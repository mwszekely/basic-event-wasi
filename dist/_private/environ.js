export class EnvironGetEvent extends CustomEvent {
    constructor() {
        super("environ_get", { cancelable: false, detail: { strings: [] } });
    }
}
const EnvironInfoSymbol = Symbol();
export function getEnviron(impl) {
    return impl[EnvironInfoSymbol] ??= (() => {
        const t = new TextEncoder();
        const e = new EnvironGetEvent();
        impl.dispatchEvent(e);
        const strings = e.detail.strings;
        let bufferSize = 0;
        const buffers = [];
        for (const [key, value] of strings) {
            const utf8 = t.encode(`${key}=${value}\x00`);
            bufferSize += utf8.length + 1;
            buffers.push(utf8);
        }
        return { bufferSize, strings: buffers };
    })();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52aXJvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fcHJpdmF0ZS9lbnZpcm9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVlBLE1BQU0sT0FBTyxlQUFnQixTQUFRLFdBQWtDO0lBQ25FO1FBQ0ksS0FBSyxDQUFDLGFBQWEsRUFBRSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RSxDQUFDO0NBQ0o7QUFFRCxNQUFNLGlCQUFpQixHQUFHLE1BQU0sRUFBRSxDQUFDO0FBU25DLE1BQU0sVUFBVSxVQUFVLENBQUMsSUFBc0I7SUFDN0MsT0FBUSxJQUFtQyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7UUFDckUsTUFBTSxDQUFDLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUM1QixNQUFNLENBQUMsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDakMsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLE1BQU0sT0FBTyxHQUFpQixFQUFFLENBQUM7UUFDakMsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQ2pDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQztZQUM3QyxVQUFVLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDOUIsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QixDQUFDO1FBQ0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUE7SUFDM0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtBQUVSLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEluc3RhbnRpYXRlZFdhc20gfSBmcm9tIFwiLi4vd2FzbS5qc1wiO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRW52aXJvbkdldEV2ZW50RGV0YWlsIHtcclxuICAgIC8qKlxyXG4gICAgICogQSBsaXN0IG9mIGVudmlyb25tZW50IHZhcmlhYmxlIHR1cGxlczsgYSBrZXkgYW5kIGEgdmFsdWUuIFxyXG4gICAgICogVGhpcyBhcnJheSBpcyBtdXRhYmxlOyB3aGVuIGV2ZW50IGRpc3BhdGNoIGVuZHMsIHRoZSBmaW5hbCBcclxuICAgICAqIHZhbHVlIG9mIHRoaXMgYXJyYXkgd2lsbCBiZSB1c2VkIHRvIHBvcHVsYXRlIGVudmlyb25tZW50IHZhcmlhYmxlcy5cclxuICAgICAqL1xyXG4gICAgc3RyaW5nczogW2tleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nXVtdO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRW52aXJvbkdldEV2ZW50IGV4dGVuZHMgQ3VzdG9tRXZlbnQ8RW52aXJvbkdldEV2ZW50RGV0YWlsPiB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcImVudmlyb25fZ2V0XCIsIHsgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogeyBzdHJpbmdzOiBbXSB9IH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBFbnZpcm9uSW5mb1N5bWJvbCA9IFN5bWJvbCgpO1xyXG5leHBvcnQgaW50ZXJmYWNlIEVudmlyb25JbmZvIHtcclxuICAgIGJ1ZmZlclNpemU6IG51bWJlcjtcclxuICAgIHN0cmluZ3M6IFVpbnQ4QXJyYXlbXTtcclxufVxyXG5pbnRlcmZhY2UgV2l0aEVudmlyb25JbmZvIHtcclxuICAgIFtFbnZpcm9uSW5mb1N5bWJvbF06IEVudmlyb25JbmZvO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW52aXJvbihpbXBsOiBJbnN0YW50aWF0ZWRXYXNtKTogRW52aXJvbkluZm8ge1xyXG4gICAgcmV0dXJuIChpbXBsIGFzIHVua25vd24gYXMgV2l0aEVudmlyb25JbmZvKVtFbnZpcm9uSW5mb1N5bWJvbF0gPz89ICgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdCA9IG5ldyBUZXh0RW5jb2RlcigpO1xyXG4gICAgICAgIGNvbnN0IGUgPSBuZXcgRW52aXJvbkdldEV2ZW50KCk7XHJcbiAgICAgICAgaW1wbC5kaXNwYXRjaEV2ZW50KGUpO1xyXG4gICAgICAgIGNvbnN0IHN0cmluZ3MgPSBlLmRldGFpbC5zdHJpbmdzO1xyXG4gICAgICAgIGxldCBidWZmZXJTaXplID0gMDtcclxuICAgICAgICBjb25zdCBidWZmZXJzOiBVaW50OEFycmF5W10gPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBzdHJpbmdzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHV0ZjggPSB0LmVuY29kZShgJHtrZXl9PSR7dmFsdWV9XFx4MDBgKTtcclxuICAgICAgICAgICAgYnVmZmVyU2l6ZSArPSB1dGY4Lmxlbmd0aCArIDE7XHJcbiAgICAgICAgICAgIGJ1ZmZlcnMucHVzaCh1dGY4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgYnVmZmVyU2l6ZSwgc3RyaW5nczogYnVmZmVycyB9XHJcbiAgICB9KSgpXHJcblxyXG59XHJcblxyXG4iXX0=