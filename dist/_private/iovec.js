import { getPointerSize } from "../util/pointer.js";
import { readPointer } from "../util/read-pointer.js";
import { readUint32 } from "../util/read-uint32.js";
export function parse(info, ptr) {
    const bufferStart = readPointer(info, ptr);
    const bufferLength = readUint32(info, ptr + getPointerSize(info));
    const uint8 = new Uint8Array(info.cachedMemoryView.buffer, bufferStart, bufferLength);
    return {
        bufferStart,
        bufferLength,
        uint8
    };
}
export function parseArray(info, ptr, count) {
    const sizeofStruct = getPointerSize(info) + 4;
    const ret = [];
    for (let i = 0; i < count; ++i) {
        ret.push(parse(info, ptr + (i * sizeofStruct)));
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW92ZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvX3ByaXZhdGUvaW92ZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFTcEQsTUFBTSxVQUFVLEtBQUssQ0FBQyxJQUFzQixFQUFFLEdBQVc7SUFDckQsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMzQyxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNsRSxNQUFNLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUN0RixPQUFPO1FBQ0gsV0FBVztRQUNYLFlBQVk7UUFDWixLQUFLO0tBQ1IsQ0FBQTtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLElBQXNCLEVBQUUsR0FBVyxFQUFFLEtBQWE7SUFDekUsTUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QyxNQUFNLEdBQUcsR0FBWSxFQUFFLENBQUM7SUFDeEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRQb2ludGVyU2l6ZSB9IGZyb20gXCIuLi91dGlsL3BvaW50ZXIuanNcIjtcclxuaW1wb3J0IHsgcmVhZFBvaW50ZXIgfSBmcm9tIFwiLi4vdXRpbC9yZWFkLXBvaW50ZXIuanNcIjtcclxuaW1wb3J0IHsgcmVhZFVpbnQzMiB9IGZyb20gXCIuLi91dGlsL3JlYWQtdWludDMyLmpzXCI7XHJcbmltcG9ydCB0eXBlIHsgSW5zdGFudGlhdGVkV2FzbSB9IGZyb20gXCIuLi93YXNtLmpzXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElvdmVjIHtcclxuICAgIGJ1ZmZlclN0YXJ0OiBudW1iZXI7XHJcbiAgICBidWZmZXJMZW5ndGg6IG51bWJlcjtcclxuICAgIHVpbnQ4OiBVaW50OEFycmF5O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoaW5mbzogSW5zdGFudGlhdGVkV2FzbSwgcHRyOiBudW1iZXIpOiBJb3ZlYyB7XHJcbiAgICBjb25zdCBidWZmZXJTdGFydCA9IHJlYWRQb2ludGVyKGluZm8sIHB0cik7XHJcbiAgICBjb25zdCBidWZmZXJMZW5ndGggPSByZWFkVWludDMyKGluZm8sIHB0ciArIGdldFBvaW50ZXJTaXplKGluZm8pKTtcclxuICAgIGNvbnN0IHVpbnQ4ID0gbmV3IFVpbnQ4QXJyYXkoaW5mby5jYWNoZWRNZW1vcnlWaWV3LmJ1ZmZlciwgYnVmZmVyU3RhcnQsIGJ1ZmZlckxlbmd0aCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJ1ZmZlclN0YXJ0LFxyXG4gICAgICAgIGJ1ZmZlckxlbmd0aCxcclxuICAgICAgICB1aW50OFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBcnJheShpbmZvOiBJbnN0YW50aWF0ZWRXYXNtLCBwdHI6IG51bWJlciwgY291bnQ6IG51bWJlcik6IElvdmVjW10ge1xyXG4gICAgY29uc3Qgc2l6ZW9mU3RydWN0ID0gZ2V0UG9pbnRlclNpemUoaW5mbykgKyA0O1xyXG4gICAgY29uc3QgcmV0OiBJb3ZlY1tdID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcclxuICAgICAgICByZXQucHVzaChwYXJzZShpbmZvLCBwdHIgKyAoaSAqIHNpemVvZlN0cnVjdCkpKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuIl19