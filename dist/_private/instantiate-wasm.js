import { awaitAllEmbind } from "./embind/register.js";
import { instantiateWasi } from "./instantiate-wasi.js";
export async function instantiateWasmGeneric(instantiateWasm, unboundImports) {
    // There's a bit of song and dance to get around the fact that:
    // 1. WASM needs its WASI imports immediately upon instantiation.
    // 2. WASI needs its WASM Instance immediately upon instantiation.
    // So we use promises to notify each that the other's been created.
    const { promise: wasmReady, resolve: resolveWasm } = Promise.withResolvers();
    const { imports, wasiReady } = instantiateWasi(wasmReady, unboundImports);
    resolveWasm(await instantiateWasm({ ...imports }));
    const ret = await wasiReady;
    await awaitAllEmbind();
    return ret;
}
WebAssembly.instantiate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFudGlhdGUtd2FzbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fcHJpdmF0ZS9pbnN0YW50aWF0ZS13YXNtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFJeEQsTUFBTSxDQUFDLEtBQUssVUFBVSxzQkFBc0IsQ0FBd0UsZUFBd0YsRUFBRSxjQUFpQjtJQUUzTiwrREFBK0Q7SUFDL0QsaUVBQWlFO0lBQ2pFLGtFQUFrRTtJQUNsRSxtRUFBbUU7SUFFbkUsTUFBTSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxhQUFhLEVBQTZDLENBQUM7SUFDeEgsTUFBTSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxlQUFlLENBQU8sU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ2hGLFdBQVcsQ0FBQyxNQUFNLGVBQWUsQ0FBQyxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sR0FBRyxHQUFHLE1BQU0sU0FBUyxDQUFDO0lBRTVCLE1BQU0sY0FBYyxFQUFFLENBQUM7SUFFdkIsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDO0FBQ0QsV0FBVyxDQUFDLFdBQVcsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSW5zdGFudGlhdGVkV2FzaSB9IGZyb20gXCIuLi9pbnN0YW50aWF0ZWQtd2FzaS5qc1wiO1xyXG5pbXBvcnQgdHlwZSB7IEVudGlyZVB1YmxpY0ludGVyZmFjZSB9IGZyb20gXCIuLi90eXBlcy5qc1wiO1xyXG5pbXBvcnQgeyBhd2FpdEFsbEVtYmluZCB9IGZyb20gXCIuL2VtYmluZC9yZWdpc3Rlci5qc1wiO1xyXG5pbXBvcnQgeyBpbnN0YW50aWF0ZVdhc2kgfSBmcm9tIFwiLi9pbnN0YW50aWF0ZS13YXNpLmpzXCI7XHJcblxyXG5leHBvcnQgdHlwZSBSb2xsdXBXYXNtUHJvbWlzZTxJIGV4dGVuZHMgRW50aXJlUHVibGljSW50ZXJmYWNlID0gRW50aXJlUHVibGljSW50ZXJmYWNlPiA9IChpbXBvcnRzPzogSSkgPT4gUHJvbWlzZTxXZWJBc3NlbWJseS5XZWJBc3NlbWJseUluc3RhbnRpYXRlZFNvdXJjZT47XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5zdGFudGlhdGVXYXNtR2VuZXJpYzxFIGV4dGVuZHMge30sIEkgZXh0ZW5kcyBFbnRpcmVQdWJsaWNJbnRlcmZhY2UgPSBFbnRpcmVQdWJsaWNJbnRlcmZhY2U+KGluc3RhbnRpYXRlV2FzbTogKGJvdW5kSW1wb3J0czogSSkgPT4gUHJvbWlzZTxXZWJBc3NlbWJseS5XZWJBc3NlbWJseUluc3RhbnRpYXRlZFNvdXJjZT4sIHVuYm91bmRJbXBvcnRzOiBJKTogUHJvbWlzZTxJbnN0YW50aWF0ZWRXYXNpPEU+PiB7XHJcblxyXG4gICAgLy8gVGhlcmUncyBhIGJpdCBvZiBzb25nIGFuZCBkYW5jZSB0byBnZXQgYXJvdW5kIHRoZSBmYWN0IHRoYXQ6XHJcbiAgICAvLyAxLiBXQVNNIG5lZWRzIGl0cyBXQVNJIGltcG9ydHMgaW1tZWRpYXRlbHkgdXBvbiBpbnN0YW50aWF0aW9uLlxyXG4gICAgLy8gMi4gV0FTSSBuZWVkcyBpdHMgV0FTTSBJbnN0YW5jZSBpbW1lZGlhdGVseSB1cG9uIGluc3RhbnRpYXRpb24uXHJcbiAgICAvLyBTbyB3ZSB1c2UgcHJvbWlzZXMgdG8gbm90aWZ5IGVhY2ggdGhhdCB0aGUgb3RoZXIncyBiZWVuIGNyZWF0ZWQuXHJcblxyXG4gICAgY29uc3QgeyBwcm9taXNlOiB3YXNtUmVhZHksIHJlc29sdmU6IHJlc29sdmVXYXNtIH0gPSBQcm9taXNlLndpdGhSZXNvbHZlcnM8V2ViQXNzZW1ibHkuV2ViQXNzZW1ibHlJbnN0YW50aWF0ZWRTb3VyY2U+KCk7XHJcbiAgICBjb25zdCB7IGltcG9ydHMsIHdhc2lSZWFkeSB9ID0gaW5zdGFudGlhdGVXYXNpPEUsIEk+KHdhc21SZWFkeSwgdW5ib3VuZEltcG9ydHMpO1xyXG4gICAgcmVzb2x2ZVdhc20oYXdhaXQgaW5zdGFudGlhdGVXYXNtKHsgLi4uaW1wb3J0cyB9KSk7XHJcbiAgICBjb25zdCByZXQgPSBhd2FpdCB3YXNpUmVhZHk7XHJcblxyXG4gICAgYXdhaXQgYXdhaXRBbGxFbWJpbmQoKTtcclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcbldlYkFzc2VtYmx5Lmluc3RhbnRpYXRlIl19