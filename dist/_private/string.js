import { readUint16 } from "../util/read-uint16.js";
import { readUint32 } from "../util/read-uint32.js";
import { readUint8 } from "../util/read-uint8.js";
import { InstantiatedWasm } from "../wasm.js";
/**
 * TODO: Can't C++ identifiers include non-ASCII characters?
 * Why do all the type decoding functions use this?
 */
export function readLatin1String(impl, ptr) {
    let ret = "";
    let nextByte;
    // eslint-disable-next-line no-cond-assign
    while (nextByte = readUint8(impl, ptr++)) {
        ret += String.fromCharCode(nextByte);
    }
    return ret;
}
// Note: In Worklets, `TextDecoder` and `TextEncoder` need a polyfill.
const utf8Decoder = new TextDecoder("utf-8");
const utf16Decoder = new TextDecoder("utf-16le");
const utf8Encoder = new TextEncoder();
/**
 * Decodes a null-terminated UTF-8 string. If you know the length of the string, you can save time by using `utf8ToStringL` instead.
 *
 * @param impl
 * @param ptr
 * @returns
 */
export function utf8ToStringZ(impl, ptr) {
    const start = ptr;
    let end = start;
    while (readUint8(impl, end++) != 0)
        ;
    return utf8ToStringL(impl, start, end - start - 1);
}
export function utf16ToStringZ(impl, ptr) {
    const start = ptr;
    let end = start;
    while (readUint16(impl, end) != 0) {
        end += 2;
    }
    return utf16ToStringL(impl, start, end - start - 1);
}
export function utf32ToStringZ(impl, ptr) {
    const start = ptr;
    let end = start;
    while (readUint32(impl, end) != 0) {
        end += 4;
    }
    return utf32ToStringL(impl, start, end - start - 1);
}
export function utf8ToStringL(impl, ptr, byteCount) {
    return utf8Decoder.decode(new Uint8Array(impl.exports.memory.buffer, ptr, byteCount));
}
export function utf16ToStringL(impl, ptr, wcharCount) {
    return utf16Decoder.decode(new Uint8Array(impl.exports.memory.buffer, ptr, wcharCount * 2));
}
export function utf32ToStringL(impl, ptr, wcharCount) {
    const chars = (new Uint32Array(impl.exports.memory.buffer, ptr, wcharCount));
    let ret = "";
    for (const ch of chars) {
        ret += String.fromCharCode(ch);
    }
    return ret;
}
export function stringToUtf8(string) {
    return utf8Encoder.encode(string).buffer;
}
export function stringToUtf16(string) {
    const ret = new Uint16Array(new ArrayBuffer(string.length));
    for (let i = 0; i < ret.length; ++i) {
        ret[i] = string.charCodeAt(i);
    }
    return ret.buffer;
}
export function stringToUtf32(string) {
    let trueLength = 0;
    // The worst-case scenario is a string of all surrogate-pairs, so allocate that.
    // We'll shrink it to the actual size afterwards.
    const temp = new Uint32Array(new ArrayBuffer(string.length * 4 * 2));
    for (const ch of string) {
        temp[trueLength] = ch.codePointAt(0);
        ++trueLength;
    }
    return temp.buffer.slice(0, trueLength * 4);
}
/**
 * Used when sending strings from JS to WASM.
 *
 *
 * @param str
 * @returns
 */
export function lengthBytesUTF8(str) {
    let len = 0;
    for (let i = 0; i < str.length; ++i) {
        const c = str.codePointAt(i);
        if (c <= 0x7F)
            len++;
        else if (c <= 0x7FF)
            len += 2;
        else if (c <= 0x7FFF)
            len += 3;
        else {
            len += 4;
            ++i;
        }
    }
    return len;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL19wcml2YXRlL3N0cmluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFOUM7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUFDLElBQXNCLEVBQUUsR0FBVztJQUNoRSxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixJQUFJLFFBQWdCLENBQUE7SUFDcEIsMENBQTBDO0lBQzFDLE9BQU8sUUFBUSxHQUFHLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3ZDLEdBQUcsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUM7QUFFRCxzRUFBc0U7QUFDdEUsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0MsTUFBTSxZQUFZLEdBQUcsSUFBSSxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakQsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUV0Qzs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUFDLElBQXNCLEVBQUUsR0FBVztJQUM3RCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUM7SUFDbEIsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDO0lBRWhCLE9BQU8sU0FBUyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFBQyxDQUFDO0lBRXBDLE9BQU8sYUFBYSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxJQUFzQixFQUFFLEdBQVc7SUFDOUQsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDO0lBQ2xCLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQztJQUVoQixPQUFPLFVBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUVoRCxPQUFPLGNBQWMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUNELE1BQU0sVUFBVSxjQUFjLENBQUMsSUFBc0IsRUFBRSxHQUFXO0lBQzlELE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQztJQUNsQixJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUM7SUFFaEIsT0FBTyxVQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUFDLENBQUM7SUFFaEQsT0FBTyxjQUFjLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLElBQXNCLEVBQUUsR0FBVyxFQUFFLFNBQWlCO0lBQ2hGLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDMUYsQ0FBQztBQUNELE1BQU0sVUFBVSxjQUFjLENBQUMsSUFBc0IsRUFBRSxHQUFXLEVBQUUsVUFBa0I7SUFDbEYsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEcsQ0FBQztBQUNELE1BQU0sVUFBVSxjQUFjLENBQUMsSUFBc0IsRUFBRSxHQUFXLEVBQUUsVUFBa0I7SUFDbEYsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDN0UsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2IsS0FBSyxNQUFNLEVBQUUsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNyQixHQUFHLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFjO0lBQ3ZDLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDN0MsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsTUFBYztJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM1RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFDRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUM7QUFDdEIsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsTUFBYztJQUN4QyxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFDbkIsZ0ZBQWdGO0lBQ2hGLGlEQUFpRDtJQUNqRCxNQUFNLElBQUksR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLEtBQUssTUFBTSxFQUFFLElBQUksTUFBTSxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFFLENBQUM7UUFDdEMsRUFBRSxVQUFVLENBQUM7SUFDakIsQ0FBQztJQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxHQUFXO0lBQ3ZDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNaLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDbEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsSUFBSSxJQUFJO1lBQ1QsR0FBRyxFQUFFLENBQUM7YUFDTCxJQUFJLENBQUMsSUFBSSxLQUFLO1lBQ2YsR0FBRyxJQUFJLENBQUMsQ0FBQzthQUNSLElBQUksQ0FBQyxJQUFJLE1BQU07WUFDaEIsR0FBRyxJQUFJLENBQUMsQ0FBQzthQUNSLENBQUM7WUFDRixHQUFHLElBQUksQ0FBQyxDQUFDO1lBQ1QsRUFBRSxDQUFDLENBQUM7UUFDUixDQUFDO0lBQ0wsQ0FBQztJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRVaW50MTYgfSBmcm9tIFwiLi4vdXRpbC9yZWFkLXVpbnQxNi5qc1wiO1xyXG5pbXBvcnQgeyByZWFkVWludDMyIH0gZnJvbSBcIi4uL3V0aWwvcmVhZC11aW50MzIuanNcIjtcclxuaW1wb3J0IHsgcmVhZFVpbnQ4IH0gZnJvbSBcIi4uL3V0aWwvcmVhZC11aW50OC5qc1wiO1xyXG5pbXBvcnQgeyBJbnN0YW50aWF0ZWRXYXNtIH0gZnJvbSBcIi4uL3dhc20uanNcIjtcclxuXHJcbi8qKlxyXG4gKiBUT0RPOiBDYW4ndCBDKysgaWRlbnRpZmllcnMgaW5jbHVkZSBub24tQVNDSUkgY2hhcmFjdGVycz8gXHJcbiAqIFdoeSBkbyBhbGwgdGhlIHR5cGUgZGVjb2RpbmcgZnVuY3Rpb25zIHVzZSB0aGlzP1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRMYXRpbjFTdHJpbmcoaW1wbDogSW5zdGFudGlhdGVkV2FzbSwgcHRyOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgbGV0IHJldCA9IFwiXCI7XHJcbiAgICBsZXQgbmV4dEJ5dGU6IG51bWJlclxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbmQtYXNzaWduXHJcbiAgICB3aGlsZSAobmV4dEJ5dGUgPSByZWFkVWludDgoaW1wbCwgcHRyKyspKSB7XHJcbiAgICAgICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUobmV4dEJ5dGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxyXG5cclxuLy8gTm90ZTogSW4gV29ya2xldHMsIGBUZXh0RGVjb2RlcmAgYW5kIGBUZXh0RW5jb2RlcmAgbmVlZCBhIHBvbHlmaWxsLlxyXG5jb25zdCB1dGY4RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIpO1xyXG5jb25zdCB1dGYxNkRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtMTZsZVwiKTtcclxuY29uc3QgdXRmOEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcclxuXHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgbnVsbC10ZXJtaW5hdGVkIFVURi04IHN0cmluZy4gSWYgeW91IGtub3cgdGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nLCB5b3UgY2FuIHNhdmUgdGltZSBieSB1c2luZyBgdXRmOFRvU3RyaW5nTGAgaW5zdGVhZC5cclxuICogXHJcbiAqIEBwYXJhbSBpbXBsIFxyXG4gKiBAcGFyYW0gcHRyIFxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1dGY4VG9TdHJpbmdaKGltcGw6IEluc3RhbnRpYXRlZFdhc20sIHB0cjogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHN0YXJ0ID0gcHRyO1xyXG4gICAgbGV0IGVuZCA9IHN0YXJ0O1xyXG5cclxuICAgIHdoaWxlIChyZWFkVWludDgoaW1wbCwgZW5kKyspICE9IDApO1xyXG5cclxuICAgIHJldHVybiB1dGY4VG9TdHJpbmdMKGltcGwsIHN0YXJ0LCBlbmQgLSBzdGFydCAtIDEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXRmMTZUb1N0cmluZ1ooaW1wbDogSW5zdGFudGlhdGVkV2FzbSwgcHRyOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgY29uc3Qgc3RhcnQgPSBwdHI7XHJcbiAgICBsZXQgZW5kID0gc3RhcnQ7XHJcblxyXG4gICAgd2hpbGUgKHJlYWRVaW50MTYoaW1wbCwgZW5kKSAhPSAwKSB7IGVuZCArPSAyOyB9XHJcblxyXG4gICAgcmV0dXJuIHV0ZjE2VG9TdHJpbmdMKGltcGwsIHN0YXJ0LCBlbmQgLSBzdGFydCAtIDEpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB1dGYzMlRvU3RyaW5nWihpbXBsOiBJbnN0YW50aWF0ZWRXYXNtLCBwdHI6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBjb25zdCBzdGFydCA9IHB0cjtcclxuICAgIGxldCBlbmQgPSBzdGFydDtcclxuXHJcbiAgICB3aGlsZSAocmVhZFVpbnQzMihpbXBsLCBlbmQpICE9IDApIHsgZW5kICs9IDQ7IH1cclxuXHJcbiAgICByZXR1cm4gdXRmMzJUb1N0cmluZ0woaW1wbCwgc3RhcnQsIGVuZCAtIHN0YXJ0IC0gMSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1dGY4VG9TdHJpbmdMKGltcGw6IEluc3RhbnRpYXRlZFdhc20sIHB0cjogbnVtYmVyLCBieXRlQ291bnQ6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdXRmOERlY29kZXIuZGVjb2RlKG5ldyBVaW50OEFycmF5KGltcGwuZXhwb3J0cy5tZW1vcnkuYnVmZmVyLCBwdHIsIGJ5dGVDb3VudCkpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB1dGYxNlRvU3RyaW5nTChpbXBsOiBJbnN0YW50aWF0ZWRXYXNtLCBwdHI6IG51bWJlciwgd2NoYXJDb3VudDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB1dGYxNkRlY29kZXIuZGVjb2RlKG5ldyBVaW50OEFycmF5KGltcGwuZXhwb3J0cy5tZW1vcnkuYnVmZmVyLCBwdHIsIHdjaGFyQ291bnQgKiAyKSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHV0ZjMyVG9TdHJpbmdMKGltcGw6IEluc3RhbnRpYXRlZFdhc20sIHB0cjogbnVtYmVyLCB3Y2hhckNvdW50OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgY2hhcnMgPSAobmV3IFVpbnQzMkFycmF5KGltcGwuZXhwb3J0cy5tZW1vcnkuYnVmZmVyLCBwdHIsIHdjaGFyQ291bnQpKTtcclxuICAgIGxldCByZXQgPSBcIlwiO1xyXG4gICAgZm9yIChjb25zdCBjaCBvZiBjaGFycykge1xyXG4gICAgICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdUb1V0Zjgoc3RyaW5nOiBzdHJpbmcpOiBBcnJheUJ1ZmZlciB7XHJcbiAgICByZXR1cm4gdXRmOEVuY29kZXIuZW5jb2RlKHN0cmluZykuYnVmZmVyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nVG9VdGYxNihzdHJpbmc6IHN0cmluZyk6IEFycmF5QnVmZmVyIHtcclxuICAgIGNvbnN0IHJldCA9IG5ldyBVaW50MTZBcnJheShuZXcgQXJyYXlCdWZmZXIoc3RyaW5nLmxlbmd0aCkpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICByZXRbaV0gPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQuYnVmZmVyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nVG9VdGYzMihzdHJpbmc6IHN0cmluZyk6IEFycmF5QnVmZmVyIHtcclxuICAgIGxldCB0cnVlTGVuZ3RoID0gMDtcclxuICAgIC8vIFRoZSB3b3JzdC1jYXNlIHNjZW5hcmlvIGlzIGEgc3RyaW5nIG9mIGFsbCBzdXJyb2dhdGUtcGFpcnMsIHNvIGFsbG9jYXRlIHRoYXQuXHJcbiAgICAvLyBXZSdsbCBzaHJpbmsgaXQgdG8gdGhlIGFjdHVhbCBzaXplIGFmdGVyd2FyZHMuXHJcbiAgICBjb25zdCB0ZW1wID0gbmV3IFVpbnQzMkFycmF5KG5ldyBBcnJheUJ1ZmZlcihzdHJpbmcubGVuZ3RoICogNCAqIDIpKTtcclxuICAgIGZvciAoY29uc3QgY2ggb2Ygc3RyaW5nKSB7XHJcbiAgICAgICAgdGVtcFt0cnVlTGVuZ3RoXSA9IGNoLmNvZGVQb2ludEF0KDApITtcclxuICAgICAgICArK3RydWVMZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRlbXAuYnVmZmVyLnNsaWNlKDAsIHRydWVMZW5ndGggKiA0KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFVzZWQgd2hlbiBzZW5kaW5nIHN0cmluZ3MgZnJvbSBKUyB0byBXQVNNLlxyXG4gKiBcclxuICogXHJcbiAqIEBwYXJhbSBzdHIgXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aEJ5dGVzVVRGOChzdHI6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICBsZXQgbGVuID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgYyA9IHN0ci5jb2RlUG9pbnRBdChpKSE7XHJcbiAgICAgICAgaWYgKGMgPD0gMHg3RilcclxuICAgICAgICAgICAgbGVuKys7XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8PSAweDdGRilcclxuICAgICAgICAgICAgbGVuICs9IDI7XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8PSAweDdGRkYpXHJcbiAgICAgICAgICAgIGxlbiArPSAzO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZW4gKz0gNDtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBsZW47XHJcbn0iXX0=