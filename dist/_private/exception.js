import { getPointerSize } from "../util/pointer.js";
import { readPointer } from "../util/read-pointer.js";
import { InstantiatedWasm } from "../wasm.js";
import { utf8ToStringZ } from "./string.js";
export function getExceptionMessage(impl, ex) {
    const ptr = getCppExceptionThrownObjectFromWebAssemblyException(impl, ex);
    return getExceptionMessageCommon(impl, ptr);
}
function getCppExceptionThrownObjectFromWebAssemblyException(impl, ex) {
    // In Wasm EH, the value extracted from WebAssembly.Exception is a pointer
    // to the unwind header. Convert it to the actual thrown value.
    const unwind_header = ex.getArg((impl.exports).__cpp_exception, 0);
    return (impl.exports).__thrown_object_from_unwind_exception(unwind_header);
}
function stackSave(impl) {
    return impl.exports.emscripten_stack_get_current();
}
function stackAlloc(impl, size) {
    return impl.exports._emscripten_stack_alloc(size);
}
function stackRestore(impl, stackPointer) {
    return impl.exports._emscripten_stack_restore(stackPointer);
}
function getExceptionMessageCommon(impl, ptr) {
    const sp = stackSave(impl);
    const type_addr_addr = stackAlloc(impl, getPointerSize(impl));
    const message_addr_addr = stackAlloc(impl, getPointerSize(impl));
    impl.exports.__get_exception_message(ptr, type_addr_addr, message_addr_addr);
    const type_addr = readPointer(impl, type_addr_addr);
    const message_addr = readPointer(impl, message_addr_addr);
    const type = utf8ToStringZ(impl, type_addr);
    impl.exports.free(type_addr);
    let message = "";
    if (message_addr) {
        message = utf8ToStringZ(impl, message_addr);
        impl.exports.free(message_addr);
    }
    stackRestore(impl, sp);
    return [type, message];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZXB0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL19wcml2YXRlL2V4Y2VwdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM5QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRzVDLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxJQUFzQixFQUFFLEVBQXVCO0lBQy9FLE1BQU0sR0FBRyxHQUFHLG1EQUFtRCxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMxRSxPQUFPLHlCQUF5QixDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQsU0FBUyxtREFBbUQsQ0FBQyxJQUFzQixFQUFFLEVBQXVCO0lBQ3hHLDBFQUEwRTtJQUMxRSwrREFBK0Q7SUFDL0QsTUFBTSxhQUFhLEdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0UsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxxQ0FBcUMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUMvRSxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsSUFBc0I7SUFDckMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLDRCQUE0QixFQUFFLENBQUM7QUFDdkQsQ0FBQztBQUNELFNBQVMsVUFBVSxDQUFDLElBQXNCLEVBQUUsSUFBWTtJQUNwRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELFNBQVMsWUFBWSxDQUFDLElBQXNCLEVBQUUsWUFBb0I7SUFDOUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2hFLENBQUM7QUFFRCxTQUFTLHlCQUF5QixDQUFDLElBQXNCLEVBQUUsR0FBVztJQUNsRSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RCxNQUFNLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDakUsSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDN0UsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNwRCxNQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDMUQsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QixJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDakIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNmLE9BQU8sR0FBRyxhQUFhLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFDRCxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDM0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRW1zY3JpcHRlbkV4Y2VwdGlvbiB9IGZyb20gXCIuLi9lbnYvdGhyb3dfZXhjZXB0aW9uX3dpdGhfc3RhY2tfdHJhY2UuanNcIjtcclxuaW1wb3J0IHsgZ2V0UG9pbnRlclNpemUgfSBmcm9tIFwiLi4vdXRpbC9wb2ludGVyLmpzXCI7XHJcbmltcG9ydCB7IHJlYWRQb2ludGVyIH0gZnJvbSBcIi4uL3V0aWwvcmVhZC1wb2ludGVyLmpzXCI7XHJcbmltcG9ydCB7IEluc3RhbnRpYXRlZFdhc20gfSBmcm9tIFwiLi4vd2FzbS5qc1wiO1xyXG5pbXBvcnQgeyB1dGY4VG9TdHJpbmdaIH0gZnJvbSBcIi4vc3RyaW5nLmpzXCI7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEV4Y2VwdGlvbk1lc3NhZ2UoaW1wbDogSW5zdGFudGlhdGVkV2FzbSwgZXg6IEVtc2NyaXB0ZW5FeGNlcHRpb24pOiBbc3RyaW5nLCBzdHJpbmddIHtcclxuICAgIGNvbnN0IHB0ciA9IGdldENwcEV4Y2VwdGlvblRocm93bk9iamVjdEZyb21XZWJBc3NlbWJseUV4Y2VwdGlvbihpbXBsLCBleCk7XHJcbiAgICByZXR1cm4gZ2V0RXhjZXB0aW9uTWVzc2FnZUNvbW1vbihpbXBsLCBwdHIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDcHBFeGNlcHRpb25UaHJvd25PYmplY3RGcm9tV2ViQXNzZW1ibHlFeGNlcHRpb24oaW1wbDogSW5zdGFudGlhdGVkV2FzbSwgZXg6IEVtc2NyaXB0ZW5FeGNlcHRpb24pIHtcclxuICAgIC8vIEluIFdhc20gRUgsIHRoZSB2YWx1ZSBleHRyYWN0ZWQgZnJvbSBXZWJBc3NlbWJseS5FeGNlcHRpb24gaXMgYSBwb2ludGVyXHJcbiAgICAvLyB0byB0aGUgdW53aW5kIGhlYWRlci4gQ29udmVydCBpdCB0byB0aGUgYWN0dWFsIHRocm93biB2YWx1ZS5cclxuICAgIGNvbnN0IHVud2luZF9oZWFkZXI6IG51bWJlciA9IGV4LmdldEFyZygoaW1wbC5leHBvcnRzKS5fX2NwcF9leGNlcHRpb24sIDApO1xyXG4gICAgcmV0dXJuIChpbXBsLmV4cG9ydHMpLl9fdGhyb3duX29iamVjdF9mcm9tX3Vud2luZF9leGNlcHRpb24odW53aW5kX2hlYWRlcik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0YWNrU2F2ZShpbXBsOiBJbnN0YW50aWF0ZWRXYXNtKSB7XHJcbiAgICByZXR1cm4gaW1wbC5leHBvcnRzLmVtc2NyaXB0ZW5fc3RhY2tfZ2V0X2N1cnJlbnQoKTtcclxufVxyXG5mdW5jdGlvbiBzdGFja0FsbG9jKGltcGw6IEluc3RhbnRpYXRlZFdhc20sIHNpemU6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIGltcGwuZXhwb3J0cy5fZW1zY3JpcHRlbl9zdGFja19hbGxvYyhzaXplKTtcclxufVxyXG5mdW5jdGlvbiBzdGFja1Jlc3RvcmUoaW1wbDogSW5zdGFudGlhdGVkV2FzbSwgc3RhY2tQb2ludGVyOiBudW1iZXIpIHtcclxuICAgIHJldHVybiBpbXBsLmV4cG9ydHMuX2Vtc2NyaXB0ZW5fc3RhY2tfcmVzdG9yZShzdGFja1BvaW50ZXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRFeGNlcHRpb25NZXNzYWdlQ29tbW9uKGltcGw6IEluc3RhbnRpYXRlZFdhc20sIHB0cjogbnVtYmVyKTogW3N0cmluZywgc3RyaW5nXSB7XHJcbiAgICBjb25zdCBzcCA9IHN0YWNrU2F2ZShpbXBsKTtcclxuICAgIGNvbnN0IHR5cGVfYWRkcl9hZGRyID0gc3RhY2tBbGxvYyhpbXBsLCBnZXRQb2ludGVyU2l6ZShpbXBsKSk7XHJcbiAgICBjb25zdCBtZXNzYWdlX2FkZHJfYWRkciA9IHN0YWNrQWxsb2MoaW1wbCwgZ2V0UG9pbnRlclNpemUoaW1wbCkpO1xyXG4gICAgaW1wbC5leHBvcnRzLl9fZ2V0X2V4Y2VwdGlvbl9tZXNzYWdlKHB0ciwgdHlwZV9hZGRyX2FkZHIsIG1lc3NhZ2VfYWRkcl9hZGRyKTtcclxuICAgIGNvbnN0IHR5cGVfYWRkciA9IHJlYWRQb2ludGVyKGltcGwsIHR5cGVfYWRkcl9hZGRyKTtcclxuICAgIGNvbnN0IG1lc3NhZ2VfYWRkciA9IHJlYWRQb2ludGVyKGltcGwsIG1lc3NhZ2VfYWRkcl9hZGRyKTtcclxuICAgIGNvbnN0IHR5cGUgPSB1dGY4VG9TdHJpbmdaKGltcGwsIHR5cGVfYWRkcik7XHJcbiAgICBpbXBsLmV4cG9ydHMuZnJlZSh0eXBlX2FkZHIpO1xyXG4gICAgbGV0IG1lc3NhZ2UgPSBcIlwiO1xyXG4gICAgaWYgKG1lc3NhZ2VfYWRkcikge1xyXG4gICAgICAgIG1lc3NhZ2UgPSB1dGY4VG9TdHJpbmdaKGltcGwsIG1lc3NhZ2VfYWRkcik7XHJcbiAgICAgICAgaW1wbC5leHBvcnRzLmZyZWUobWVzc2FnZV9hZGRyKTtcclxuICAgIH1cclxuICAgIHN0YWNrUmVzdG9yZShpbXBsLCBzcCk7XHJcbiAgICByZXR1cm4gW3R5cGUsIG1lc3NhZ2VdO1xyXG59XHJcblxyXG4iXX0=