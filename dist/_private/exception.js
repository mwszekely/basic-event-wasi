import { getPointerSize } from "../util/pointer.js";
import { readPointer } from "../util/read-pointer.js";
import { InstantiatedWasm } from "../wasm.js";
import { utf8ToStringZ } from "./string.js";
export function getExceptionMessage(impl, ex) {
    var ptr = getCppExceptionThrownObjectFromWebAssemblyException(impl, ex);
    return getExceptionMessageCommon(impl, ptr);
}
function getCppExceptionThrownObjectFromWebAssemblyException(impl, ex) {
    // In Wasm EH, the value extracted from WebAssembly.Exception is a pointer
    // to the unwind header. Convert it to the actual thrown value.
    const unwind_header = ex.getArg((impl.exports).__cpp_exception, 0);
    return (impl.exports).__thrown_object_from_unwind_exception(unwind_header);
}
function stackSave(impl) {
    return impl.exports.emscripten_stack_get_current();
}
function stackAlloc(impl, size) {
    return impl.exports._emscripten_stack_alloc(size);
}
function stackRestore(impl, stackPointer) {
    return impl.exports._emscripten_stack_restore(stackPointer);
}
function getExceptionMessageCommon(impl, ptr) {
    const sp = stackSave(impl);
    const type_addr_addr = stackAlloc(impl, getPointerSize(impl));
    const message_addr_addr = stackAlloc(impl, getPointerSize(impl));
    impl.exports.__get_exception_message(ptr, type_addr_addr, message_addr_addr);
    const type_addr = readPointer(impl, type_addr_addr);
    const message_addr = readPointer(impl, message_addr_addr);
    const type = utf8ToStringZ(impl, type_addr);
    impl.exports.free(type_addr);
    let message = "";
    if (message_addr) {
        message = utf8ToStringZ(impl, message_addr);
        impl.exports.free(message_addr);
    }
    stackRestore(impl, sp);
    return [type, message];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZXB0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL19wcml2YXRlL2V4Y2VwdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM5QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRzVDLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxJQUFzQixFQUFFLEVBQXVCO0lBQy9FLElBQUksR0FBRyxHQUFHLG1EQUFtRCxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RSxPQUFPLHlCQUF5QixDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQsU0FBUyxtREFBbUQsQ0FBQyxJQUFzQixFQUFFLEVBQXVCO0lBQ3hHLDBFQUEwRTtJQUMxRSwrREFBK0Q7SUFDL0QsTUFBTSxhQUFhLEdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0UsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxxQ0FBcUMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUMvRSxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsSUFBc0I7SUFDckMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLDRCQUE0QixFQUFFLENBQUM7QUFDdkQsQ0FBQztBQUNELFNBQVMsVUFBVSxDQUFDLElBQXNCLEVBQUUsSUFBWTtJQUNwRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELFNBQVMsWUFBWSxDQUFDLElBQXNCLEVBQUUsWUFBb0I7SUFDOUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2hFLENBQUM7QUFFRCxTQUFTLHlCQUF5QixDQUFDLElBQXNCLEVBQUUsR0FBVztJQUNsRSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RCxNQUFNLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDakUsSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDN0UsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNwRCxNQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDMUQsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QixJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDakIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNmLE9BQU8sR0FBRyxhQUFhLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFDRCxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDM0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRW1zY3JpcHRlbkV4Y2VwdGlvbiB9IGZyb20gXCIuLi9lbnYvdGhyb3dfZXhjZXB0aW9uX3dpdGhfc3RhY2tfdHJhY2UuanNcIjtcclxuaW1wb3J0IHsgZ2V0UG9pbnRlclNpemUgfSBmcm9tIFwiLi4vdXRpbC9wb2ludGVyLmpzXCI7XHJcbmltcG9ydCB7IHJlYWRQb2ludGVyIH0gZnJvbSBcIi4uL3V0aWwvcmVhZC1wb2ludGVyLmpzXCI7XHJcbmltcG9ydCB7IEluc3RhbnRpYXRlZFdhc20gfSBmcm9tIFwiLi4vd2FzbS5qc1wiO1xyXG5pbXBvcnQgeyB1dGY4VG9TdHJpbmdaIH0gZnJvbSBcIi4vc3RyaW5nLmpzXCI7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEV4Y2VwdGlvbk1lc3NhZ2UoaW1wbDogSW5zdGFudGlhdGVkV2FzbSwgZXg6IEVtc2NyaXB0ZW5FeGNlcHRpb24pOiBbc3RyaW5nLCBzdHJpbmddIHtcclxuICAgIHZhciBwdHIgPSBnZXRDcHBFeGNlcHRpb25UaHJvd25PYmplY3RGcm9tV2ViQXNzZW1ibHlFeGNlcHRpb24oaW1wbCwgZXgpO1xyXG4gICAgcmV0dXJuIGdldEV4Y2VwdGlvbk1lc3NhZ2VDb21tb24oaW1wbCwgcHRyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q3BwRXhjZXB0aW9uVGhyb3duT2JqZWN0RnJvbVdlYkFzc2VtYmx5RXhjZXB0aW9uKGltcGw6IEluc3RhbnRpYXRlZFdhc20sIGV4OiBFbXNjcmlwdGVuRXhjZXB0aW9uKSB7XHJcbiAgICAvLyBJbiBXYXNtIEVILCB0aGUgdmFsdWUgZXh0cmFjdGVkIGZyb20gV2ViQXNzZW1ibHkuRXhjZXB0aW9uIGlzIGEgcG9pbnRlclxyXG4gICAgLy8gdG8gdGhlIHVud2luZCBoZWFkZXIuIENvbnZlcnQgaXQgdG8gdGhlIGFjdHVhbCB0aHJvd24gdmFsdWUuXHJcbiAgICBjb25zdCB1bndpbmRfaGVhZGVyOiBudW1iZXIgPSBleC5nZXRBcmcoKGltcGwuZXhwb3J0cykuX19jcHBfZXhjZXB0aW9uLCAwKTtcclxuICAgIHJldHVybiAoaW1wbC5leHBvcnRzKS5fX3Rocm93bl9vYmplY3RfZnJvbV91bndpbmRfZXhjZXB0aW9uKHVud2luZF9oZWFkZXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdGFja1NhdmUoaW1wbDogSW5zdGFudGlhdGVkV2FzbSkge1xyXG4gICAgcmV0dXJuIGltcGwuZXhwb3J0cy5lbXNjcmlwdGVuX3N0YWNrX2dldF9jdXJyZW50KCk7XHJcbn1cclxuZnVuY3Rpb24gc3RhY2tBbGxvYyhpbXBsOiBJbnN0YW50aWF0ZWRXYXNtLCBzaXplOiBudW1iZXIpIHtcclxuICAgIHJldHVybiBpbXBsLmV4cG9ydHMuX2Vtc2NyaXB0ZW5fc3RhY2tfYWxsb2Moc2l6ZSk7XHJcbn1cclxuZnVuY3Rpb24gc3RhY2tSZXN0b3JlKGltcGw6IEluc3RhbnRpYXRlZFdhc20sIHN0YWNrUG9pbnRlcjogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gaW1wbC5leHBvcnRzLl9lbXNjcmlwdGVuX3N0YWNrX3Jlc3RvcmUoc3RhY2tQb2ludGVyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RXhjZXB0aW9uTWVzc2FnZUNvbW1vbihpbXBsOiBJbnN0YW50aWF0ZWRXYXNtLCBwdHI6IG51bWJlcik6IFtzdHJpbmcsIHN0cmluZ10ge1xyXG4gICAgY29uc3Qgc3AgPSBzdGFja1NhdmUoaW1wbCk7XHJcbiAgICBjb25zdCB0eXBlX2FkZHJfYWRkciA9IHN0YWNrQWxsb2MoaW1wbCwgZ2V0UG9pbnRlclNpemUoaW1wbCkpO1xyXG4gICAgY29uc3QgbWVzc2FnZV9hZGRyX2FkZHIgPSBzdGFja0FsbG9jKGltcGwsIGdldFBvaW50ZXJTaXplKGltcGwpKTtcclxuICAgIGltcGwuZXhwb3J0cy5fX2dldF9leGNlcHRpb25fbWVzc2FnZShwdHIsIHR5cGVfYWRkcl9hZGRyLCBtZXNzYWdlX2FkZHJfYWRkcik7XHJcbiAgICBjb25zdCB0eXBlX2FkZHIgPSByZWFkUG9pbnRlcihpbXBsLCB0eXBlX2FkZHJfYWRkcik7XHJcbiAgICBjb25zdCBtZXNzYWdlX2FkZHIgPSByZWFkUG9pbnRlcihpbXBsLCBtZXNzYWdlX2FkZHJfYWRkcik7XHJcbiAgICBjb25zdCB0eXBlID0gdXRmOFRvU3RyaW5nWihpbXBsLCB0eXBlX2FkZHIpO1xyXG4gICAgaW1wbC5leHBvcnRzLmZyZWUodHlwZV9hZGRyKTtcclxuICAgIGxldCBtZXNzYWdlID0gXCJcIjtcclxuICAgIGlmIChtZXNzYWdlX2FkZHIpIHtcclxuICAgICAgICBtZXNzYWdlID0gdXRmOFRvU3RyaW5nWihpbXBsLCBtZXNzYWdlX2FkZHIpO1xyXG4gICAgICAgIGltcGwuZXhwb3J0cy5mcmVlKG1lc3NhZ2VfYWRkcik7XHJcbiAgICB9XHJcbiAgICBzdGFja1Jlc3RvcmUoaW1wbCwgc3ApO1xyXG4gICAgcmV0dXJuIFt0eXBlLCBtZXNzYWdlXTtcclxufVxyXG5cclxuIl19