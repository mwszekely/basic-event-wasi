import { getPointerSize } from "../util/pointer.js";
import { readPointer } from "../util/read-pointer.js";
import { utf8ToStringZ } from "./string.js";
export function getExceptionMessage(impl, ex) {
    var ptr = getCppExceptionThrownObjectFromWebAssemblyException(impl, ex);
    return getExceptionMessageCommon(impl, ptr);
}
function getCppExceptionThrownObjectFromWebAssemblyException(impl, ex) {
    // In Wasm EH, the value extracted from WebAssembly.Exception is a pointer
    // to the unwind header. Convert it to the actual thrown value.
    const unwind_header = ex.getArg((impl.exports).__cpp_exception, 0);
    return (impl.exports).__thrown_object_from_unwind_exception(unwind_header);
}
function stackSave(impl) {
    return impl.exports.emscripten_stack_get_current();
}
function stackAlloc(impl, size) {
    return impl.exports._emscripten_stack_alloc(size);
}
function stackRestore(impl, stackPointer) {
    return impl.exports._emscripten_stack_restore(stackPointer);
}
function getExceptionMessageCommon(impl, ptr) {
    const sp = stackSave(impl);
    const type_addr_addr = stackAlloc(impl, getPointerSize(impl));
    const message_addr_addr = stackAlloc(impl, getPointerSize(impl));
    impl.exports.__get_exception_message(ptr, type_addr_addr, message_addr_addr);
    const type_addr = readPointer(impl, type_addr_addr);
    const message_addr = readPointer(impl, message_addr_addr);
    const type = utf8ToStringZ(impl, type_addr);
    impl.exports.free(type_addr);
    let message = "";
    if (message_addr) {
        message = utf8ToStringZ(impl, message_addr);
        impl.exports.free(message_addr);
    }
    stackRestore(impl, sp);
    return [type, message];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZXB0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL19wcml2YXRlL2V4Y2VwdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHNUMsTUFBTSxVQUFVLG1CQUFtQixDQUFDLElBQTBCLEVBQUUsRUFBdUI7SUFDbkYsSUFBSSxHQUFHLEdBQUcsbURBQW1ELENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hFLE9BQU8seUJBQXlCLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFFRCxTQUFTLG1EQUFtRCxDQUFDLElBQTBCLEVBQUUsRUFBdUI7SUFDNUcsMEVBQTBFO0lBQzFFLCtEQUErRDtJQUMvRCxNQUFNLGFBQWEsR0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzRSxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLHFDQUFxQyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQy9FLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxJQUEwQjtJQUN6QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztBQUN2RCxDQUFDO0FBQ0QsU0FBUyxVQUFVLENBQUMsSUFBMEIsRUFBRSxJQUFZO0lBQ3hELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsU0FBUyxZQUFZLENBQUMsSUFBMEIsRUFBRSxZQUFvQjtJQUNsRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDaEUsQ0FBQztBQUVELFNBQVMseUJBQXlCLENBQUMsSUFBMEIsRUFBRSxHQUFXO0lBQ3RFLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlELE1BQU0saUJBQWlCLEdBQUcsVUFBVSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqRSxJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUM3RSxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sWUFBWSxHQUFHLFdBQVcsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUMxRCxNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNqQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2YsT0FBTyxHQUFHLGFBQWEsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNELFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkIsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW1zY3JpcHRlbkV4Y2VwdGlvbiB9IGZyb20gXCIuLi9lbnYvdGhyb3dfZXhjZXB0aW9uX3dpdGhfc3RhY2tfdHJhY2UuanNcIjtcclxuaW1wb3J0IHsgSW5zdGFudGlhdGVkV2FzaSB9IGZyb20gXCIuLi9pbnN0YW50aWF0ZWQtd2FzaS5qc1wiO1xyXG5pbXBvcnQgeyBnZXRQb2ludGVyU2l6ZSB9IGZyb20gXCIuLi91dGlsL3BvaW50ZXIuanNcIjtcclxuaW1wb3J0IHsgcmVhZFBvaW50ZXIgfSBmcm9tIFwiLi4vdXRpbC9yZWFkLXBvaW50ZXIuanNcIjtcclxuaW1wb3J0IHsgdXRmOFRvU3RyaW5nWiB9IGZyb20gXCIuL3N0cmluZy5qc1wiO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFeGNlcHRpb25NZXNzYWdlKGltcGw6IEluc3RhbnRpYXRlZFdhc2k8e30+LCBleDogRW1zY3JpcHRlbkV4Y2VwdGlvbik6IFtzdHJpbmcsIHN0cmluZ10ge1xyXG4gICAgdmFyIHB0ciA9IGdldENwcEV4Y2VwdGlvblRocm93bk9iamVjdEZyb21XZWJBc3NlbWJseUV4Y2VwdGlvbihpbXBsLCBleCk7XHJcbiAgICByZXR1cm4gZ2V0RXhjZXB0aW9uTWVzc2FnZUNvbW1vbihpbXBsLCBwdHIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDcHBFeGNlcHRpb25UaHJvd25PYmplY3RGcm9tV2ViQXNzZW1ibHlFeGNlcHRpb24oaW1wbDogSW5zdGFudGlhdGVkV2FzaTx7fT4sIGV4OiBFbXNjcmlwdGVuRXhjZXB0aW9uKSB7XHJcbiAgICAvLyBJbiBXYXNtIEVILCB0aGUgdmFsdWUgZXh0cmFjdGVkIGZyb20gV2ViQXNzZW1ibHkuRXhjZXB0aW9uIGlzIGEgcG9pbnRlclxyXG4gICAgLy8gdG8gdGhlIHVud2luZCBoZWFkZXIuIENvbnZlcnQgaXQgdG8gdGhlIGFjdHVhbCB0aHJvd24gdmFsdWUuXHJcbiAgICBjb25zdCB1bndpbmRfaGVhZGVyOiBudW1iZXIgPSBleC5nZXRBcmcoKGltcGwuZXhwb3J0cykuX19jcHBfZXhjZXB0aW9uLCAwKTtcclxuICAgIHJldHVybiAoaW1wbC5leHBvcnRzKS5fX3Rocm93bl9vYmplY3RfZnJvbV91bndpbmRfZXhjZXB0aW9uKHVud2luZF9oZWFkZXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdGFja1NhdmUoaW1wbDogSW5zdGFudGlhdGVkV2FzaTx7fT4pIHtcclxuICAgIHJldHVybiBpbXBsLmV4cG9ydHMuZW1zY3JpcHRlbl9zdGFja19nZXRfY3VycmVudCgpO1xyXG59XHJcbmZ1bmN0aW9uIHN0YWNrQWxsb2MoaW1wbDogSW5zdGFudGlhdGVkV2FzaTx7fT4sIHNpemU6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIGltcGwuZXhwb3J0cy5fZW1zY3JpcHRlbl9zdGFja19hbGxvYyhzaXplKTtcclxufVxyXG5mdW5jdGlvbiBzdGFja1Jlc3RvcmUoaW1wbDogSW5zdGFudGlhdGVkV2FzaTx7fT4sIHN0YWNrUG9pbnRlcjogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gaW1wbC5leHBvcnRzLl9lbXNjcmlwdGVuX3N0YWNrX3Jlc3RvcmUoc3RhY2tQb2ludGVyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RXhjZXB0aW9uTWVzc2FnZUNvbW1vbihpbXBsOiBJbnN0YW50aWF0ZWRXYXNpPHt9PiwgcHRyOiBudW1iZXIpOiBbc3RyaW5nLCBzdHJpbmddIHtcclxuICAgIGNvbnN0IHNwID0gc3RhY2tTYXZlKGltcGwpO1xyXG4gICAgY29uc3QgdHlwZV9hZGRyX2FkZHIgPSBzdGFja0FsbG9jKGltcGwsIGdldFBvaW50ZXJTaXplKGltcGwpKTtcclxuICAgIGNvbnN0IG1lc3NhZ2VfYWRkcl9hZGRyID0gc3RhY2tBbGxvYyhpbXBsLCBnZXRQb2ludGVyU2l6ZShpbXBsKSk7XHJcbiAgICBpbXBsLmV4cG9ydHMuX19nZXRfZXhjZXB0aW9uX21lc3NhZ2UocHRyLCB0eXBlX2FkZHJfYWRkciwgbWVzc2FnZV9hZGRyX2FkZHIpO1xyXG4gICAgY29uc3QgdHlwZV9hZGRyID0gcmVhZFBvaW50ZXIoaW1wbCwgdHlwZV9hZGRyX2FkZHIpO1xyXG4gICAgY29uc3QgbWVzc2FnZV9hZGRyID0gcmVhZFBvaW50ZXIoaW1wbCwgbWVzc2FnZV9hZGRyX2FkZHIpO1xyXG4gICAgY29uc3QgdHlwZSA9IHV0ZjhUb1N0cmluZ1ooaW1wbCwgdHlwZV9hZGRyKTtcclxuICAgIGltcGwuZXhwb3J0cy5mcmVlKHR5cGVfYWRkcik7XHJcbiAgICBsZXQgbWVzc2FnZSA9IFwiXCI7XHJcbiAgICBpZiAobWVzc2FnZV9hZGRyKSB7XHJcbiAgICAgICAgbWVzc2FnZSA9IHV0ZjhUb1N0cmluZ1ooaW1wbCwgbWVzc2FnZV9hZGRyKTtcclxuICAgICAgICBpbXBsLmV4cG9ydHMuZnJlZShtZXNzYWdlX2FkZHIpO1xyXG4gICAgfVxyXG4gICAgc3RhY2tSZXN0b3JlKGltcGwsIHNwKTtcclxuICAgIHJldHVybiBbdHlwZSwgbWVzc2FnZV07XHJcbn1cclxuXHJcbiJdfQ==