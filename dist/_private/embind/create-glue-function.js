import { renameFunction } from "./create-named-function.js";
import { runDestructors } from "./destructors.js";
import { getTableFunction } from "./get-table-function.js";
import { getTypeInfo } from "./get-type-info.js";
/**
 * Creates a JS function that calls a C++ function, accounting for `this` types and context.
 *
 * It converts all arguments before passing them, and converts the return type before returning.
 *
 * @param impl
 * @param argTypeIds All RTTI TypeIds, in the order of [RetType, ThisType, ...ArgTypes]. ThisType can be null for standalone functions.
 * @param invokerSignature A pointer to the signature string.
 * @param invokerIndex The index to the invoker function in the `WebAssembly.Table`.
 * @param invokerContext The context pointer to use, if any.
 * @returns
 */
export async function createGlueFunction(impl, name, returnTypeId, argTypeIds, invokerSignature, invokerIndex, invokerContext) {
    const [returnType, ...argTypes] = await getTypeInfo(returnTypeId, ...argTypeIds);
    const rawInvoker = getTableFunction(impl, invokerSignature, invokerIndex);
    return renameFunction(name, function (...jsArgs) {
        const wiredThis = this ? this._this : undefined;
        const wiredArgs = [];
        const stackBasedDestructors = []; // Used to pretend like we're a part of the WASM stack, which would destroy these objects afterwards.
        if (invokerContext)
            wiredArgs.push(invokerContext);
        if (wiredThis)
            wiredArgs.push(wiredThis);
        // Convert each JS argument to its WASM equivalent (generally a pointer, or int/float)
        for (let i = 0; i < argTypes.length; ++i) {
            const type = argTypes[i];
            const arg = jsArgs[i];
            const { jsValue, wireValue, stackDestructor } = type.toWireType(arg);
            wiredArgs.push(wireValue);
            if (stackDestructor)
                stackBasedDestructors.push(() => stackDestructor(jsValue, wireValue));
        }
        // Finally, call the "raw" WASM function
        let wiredReturn = rawInvoker(...wiredArgs);
        // Still pretending we're a part of the stack, 
        // now destruct everything we "pushed" onto it.
        runDestructors(stackBasedDestructors);
        // Convert whatever the WASM function returned to a JS representation
        // If the object returned is Disposable, then we let the user dispose of it
        // when ready.
        //
        // Otherwise (namely strings), dispose its original representation now.
        const { jsValue, wireValue, stackDestructor } = returnType?.fromWireType(wiredReturn);
        if (stackDestructor && !(jsValue && typeof jsValue == "object" && (Symbol.dispose in jsValue)))
            stackDestructor(jsValue, wireValue);
        return jsValue;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWdsdWUtZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvX3ByaXZhdGUvZW1iaW5kL2NyZWF0ZS1nbHVlLWZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFbEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBR2pEOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxrQkFBa0IsQ0FDcEMsSUFBMEIsRUFDMUIsSUFBWSxFQUNaLFlBQW9CLEVBQ3BCLFVBQW9CLEVBQ3BCLGdCQUF3QixFQUN4QixZQUFvQixFQUNwQixjQUE2QjtJQVE3QixNQUFNLENBQUMsVUFBVSxFQUFFLEdBQUcsUUFBUSxDQUFDLEdBQUcsTUFBTSxXQUFXLENBQW1CLFlBQVksRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQ25HLE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFnQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFHekcsT0FBTyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQThCLEdBQUcsTUFBYTtRQUN0RSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNoRCxNQUFNLFNBQVMsR0FBZ0IsRUFBRSxDQUFDO1FBQ2xDLE1BQU0scUJBQXFCLEdBQW1CLEVBQUUsQ0FBQyxDQUFHLHFHQUFxRztRQUV6SixJQUFJLGNBQWM7WUFDZCxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ25DLElBQUksU0FBUztZQUNULFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFOUIsc0ZBQXNGO1FBQ3RGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDdkMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JFLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDMUIsSUFBSSxlQUFlO2dCQUNmLHFCQUFxQixDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDOUUsQ0FBQztRQUVELHdDQUF3QztRQUN4QyxJQUFJLFdBQVcsR0FBYyxVQUFVLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUV0RCwrQ0FBK0M7UUFDL0MsK0NBQStDO1FBQy9DLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBRXRDLHFFQUFxRTtRQUNyRSwyRUFBMkU7UUFDM0UsY0FBYztRQUNkLEVBQUU7UUFDRix1RUFBdUU7UUFDdkUsTUFBTSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLEdBQUcsVUFBVSxFQUFFLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0RixJQUFJLGVBQWUsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sT0FBTyxJQUFJLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLENBQUM7WUFDMUYsZUFBZSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUV4QyxPQUFPLE9BQU8sQ0FBQztJQUVuQixDQUFNLENBQUMsQ0FBQztBQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnN0YW50aWF0ZWRXYXNpIH0gZnJvbSBcIi4uLy4uL2luc3RhbnRpYXRlZC13YXNpLmpzXCI7XHJcbmltcG9ydCB7IHJlbmFtZUZ1bmN0aW9uIH0gZnJvbSBcIi4vY3JlYXRlLW5hbWVkLWZ1bmN0aW9uLmpzXCI7XHJcbmltcG9ydCB7IHJ1bkRlc3RydWN0b3JzIH0gZnJvbSBcIi4vZGVzdHJ1Y3RvcnMuanNcIjtcclxuaW1wb3J0IHsgRW1ib3VuZENsYXNzIH0gZnJvbSBcIi4vZW1ib3VuZC1jbGFzcy5qc1wiO1xyXG5pbXBvcnQgeyBnZXRUYWJsZUZ1bmN0aW9uIH0gZnJvbSBcIi4vZ2V0LXRhYmxlLWZ1bmN0aW9uLmpzXCI7XHJcbmltcG9ydCB7IGdldFR5cGVJbmZvIH0gZnJvbSBcIi4vZ2V0LXR5cGUtaW5mby5qc1wiO1xyXG5pbXBvcnQgeyBFbWJvdW5kUmVnaXN0ZXJlZFR5cGUsIFdpcmVUeXBlcyB9IGZyb20gXCIuL3R5cGVzLmpzXCI7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIEpTIGZ1bmN0aW9uIHRoYXQgY2FsbHMgYSBDKysgZnVuY3Rpb24sIGFjY291bnRpbmcgZm9yIGB0aGlzYCB0eXBlcyBhbmQgY29udGV4dC5cclxuICogXHJcbiAqIEl0IGNvbnZlcnRzIGFsbCBhcmd1bWVudHMgYmVmb3JlIHBhc3NpbmcgdGhlbSwgYW5kIGNvbnZlcnRzIHRoZSByZXR1cm4gdHlwZSBiZWZvcmUgcmV0dXJuaW5nLlxyXG4gKiBcclxuICogQHBhcmFtIGltcGwgXHJcbiAqIEBwYXJhbSBhcmdUeXBlSWRzIEFsbCBSVFRJIFR5cGVJZHMsIGluIHRoZSBvcmRlciBvZiBbUmV0VHlwZSwgVGhpc1R5cGUsIC4uLkFyZ1R5cGVzXS4gVGhpc1R5cGUgY2FuIGJlIG51bGwgZm9yIHN0YW5kYWxvbmUgZnVuY3Rpb25zLlxyXG4gKiBAcGFyYW0gaW52b2tlclNpZ25hdHVyZSBBIHBvaW50ZXIgdG8gdGhlIHNpZ25hdHVyZSBzdHJpbmcuXHJcbiAqIEBwYXJhbSBpbnZva2VySW5kZXggVGhlIGluZGV4IHRvIHRoZSBpbnZva2VyIGZ1bmN0aW9uIGluIHRoZSBgV2ViQXNzZW1ibHkuVGFibGVgLlxyXG4gKiBAcGFyYW0gaW52b2tlckNvbnRleHQgVGhlIGNvbnRleHQgcG9pbnRlciB0byB1c2UsIGlmIGFueS5cclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlR2x1ZUZ1bmN0aW9uPEYgZXh0ZW5kcyAoKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpIHwgRnVuY3Rpb24+KFxyXG4gICAgaW1wbDogSW5zdGFudGlhdGVkV2FzaTx7fT4sXHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICByZXR1cm5UeXBlSWQ6IG51bWJlcixcclxuICAgIGFyZ1R5cGVJZHM6IG51bWJlcltdLFxyXG4gICAgaW52b2tlclNpZ25hdHVyZTogbnVtYmVyLFxyXG4gICAgaW52b2tlckluZGV4OiBudW1iZXIsXHJcbiAgICBpbnZva2VyQ29udGV4dDogbnVtYmVyIHwgbnVsbFxyXG4pOiBQcm9taXNlPEY+IHtcclxuXHJcbiAgICB0eXBlIFIgPSBFbWJvdW5kUmVnaXN0ZXJlZFR5cGU8V2lyZVR5cGVzLCBhbnk+O1xyXG4gICAgLy90eXBlIFRoaXNUeXBlID0gbnVsbCB8IHVuZGVmaW5lZCB8IEVtYm91bmRSZWdpc3RlcmVkVHlwZTxXaXJlVHlwZXMsIGFueT47XHJcbiAgICB0eXBlIEFyZ1R5cGVzID0gRW1ib3VuZFJlZ2lzdGVyZWRUeXBlPFdpcmVUeXBlcywgYW55PltdO1xyXG5cclxuXHJcbiAgICBjb25zdCBbcmV0dXJuVHlwZSwgLi4uYXJnVHlwZXNdID0gYXdhaXQgZ2V0VHlwZUluZm88W1IsIC4uLkFyZ1R5cGVzXT4ocmV0dXJuVHlwZUlkLCAuLi5hcmdUeXBlSWRzKTtcclxuICAgIGNvbnN0IHJhd0ludm9rZXIgPSBnZXRUYWJsZUZ1bmN0aW9uPCguLi5hcmdzOiBXaXJlVHlwZXNbXSkgPT4gYW55PihpbXBsLCBpbnZva2VyU2lnbmF0dXJlLCBpbnZva2VySW5kZXgpO1xyXG5cclxuXHJcbiAgICByZXR1cm4gcmVuYW1lRnVuY3Rpb24obmFtZSwgZnVuY3Rpb24gKHRoaXM6IEVtYm91bmRDbGFzcywgLi4uanNBcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIGNvbnN0IHdpcmVkVGhpcyA9IHRoaXMgPyB0aGlzLl90aGlzIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGNvbnN0IHdpcmVkQXJnczogV2lyZVR5cGVzW10gPSBbXTtcclxuICAgICAgICBjb25zdCBzdGFja0Jhc2VkRGVzdHJ1Y3RvcnM6ICgoKSA9PiB2b2lkKVtdID0gW107ICAgLy8gVXNlZCB0byBwcmV0ZW5kIGxpa2Ugd2UncmUgYSBwYXJ0IG9mIHRoZSBXQVNNIHN0YWNrLCB3aGljaCB3b3VsZCBkZXN0cm95IHRoZXNlIG9iamVjdHMgYWZ0ZXJ3YXJkcy5cclxuXHJcbiAgICAgICAgaWYgKGludm9rZXJDb250ZXh0KVxyXG4gICAgICAgICAgICB3aXJlZEFyZ3MucHVzaChpbnZva2VyQ29udGV4dCk7XHJcbiAgICAgICAgaWYgKHdpcmVkVGhpcylcclxuICAgICAgICAgICAgd2lyZWRBcmdzLnB1c2god2lyZWRUaGlzKTtcclxuXHJcbiAgICAgICAgLy8gQ29udmVydCBlYWNoIEpTIGFyZ3VtZW50IHRvIGl0cyBXQVNNIGVxdWl2YWxlbnQgKGdlbmVyYWxseSBhIHBvaW50ZXIsIG9yIGludC9mbG9hdClcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ1R5cGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBhcmdUeXBlc1tpXTtcclxuICAgICAgICAgICAgY29uc3QgYXJnID0ganNBcmdzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCB7IGpzVmFsdWUsIHdpcmVWYWx1ZSwgc3RhY2tEZXN0cnVjdG9yIH0gPSB0eXBlLnRvV2lyZVR5cGUoYXJnKTtcclxuICAgICAgICAgICAgd2lyZWRBcmdzLnB1c2god2lyZVZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKHN0YWNrRGVzdHJ1Y3RvcilcclxuICAgICAgICAgICAgICAgIHN0YWNrQmFzZWREZXN0cnVjdG9ycy5wdXNoKCgpID0+IHN0YWNrRGVzdHJ1Y3Rvcihqc1ZhbHVlLCB3aXJlVmFsdWUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEZpbmFsbHksIGNhbGwgdGhlIFwicmF3XCIgV0FTTSBmdW5jdGlvblxyXG4gICAgICAgIGxldCB3aXJlZFJldHVybjogV2lyZVR5cGVzID0gcmF3SW52b2tlciguLi53aXJlZEFyZ3MpO1xyXG5cclxuICAgICAgICAvLyBTdGlsbCBwcmV0ZW5kaW5nIHdlJ3JlIGEgcGFydCBvZiB0aGUgc3RhY2ssIFxyXG4gICAgICAgIC8vIG5vdyBkZXN0cnVjdCBldmVyeXRoaW5nIHdlIFwicHVzaGVkXCIgb250byBpdC5cclxuICAgICAgICBydW5EZXN0cnVjdG9ycyhzdGFja0Jhc2VkRGVzdHJ1Y3RvcnMpO1xyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IHdoYXRldmVyIHRoZSBXQVNNIGZ1bmN0aW9uIHJldHVybmVkIHRvIGEgSlMgcmVwcmVzZW50YXRpb25cclxuICAgICAgICAvLyBJZiB0aGUgb2JqZWN0IHJldHVybmVkIGlzIERpc3Bvc2FibGUsIHRoZW4gd2UgbGV0IHRoZSB1c2VyIGRpc3Bvc2Ugb2YgaXRcclxuICAgICAgICAvLyB3aGVuIHJlYWR5LlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gT3RoZXJ3aXNlIChuYW1lbHkgc3RyaW5ncyksIGRpc3Bvc2UgaXRzIG9yaWdpbmFsIHJlcHJlc2VudGF0aW9uIG5vdy5cclxuICAgICAgICBjb25zdCB7IGpzVmFsdWUsIHdpcmVWYWx1ZSwgc3RhY2tEZXN0cnVjdG9yIH0gPSByZXR1cm5UeXBlPy5mcm9tV2lyZVR5cGUod2lyZWRSZXR1cm4pO1xyXG4gICAgICAgIGlmIChzdGFja0Rlc3RydWN0b3IgJiYgIShqc1ZhbHVlICYmIHR5cGVvZiBqc1ZhbHVlID09IFwib2JqZWN0XCIgJiYgKFN5bWJvbC5kaXNwb3NlIGluIGpzVmFsdWUpKSlcclxuICAgICAgICAgICAgc3RhY2tEZXN0cnVjdG9yKGpzVmFsdWUsIHdpcmVWYWx1ZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBqc1ZhbHVlO1xyXG5cclxuICAgIH0gYXMgRik7XHJcbn1cclxuIl19