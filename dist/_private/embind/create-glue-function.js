import { InstantiatedWasm } from "../../wasm.js";
import { renameFunction } from "./create-named-function.js";
import { runDestructors } from "./destructors.js";
import { EmboundClass } from "./embound-class.js";
import { getTableFunction } from "./get-table-function.js";
import { getTypeInfo } from "./get-type-info.js";
/**
 * Creates a JS function that calls a C++ function, accounting for `this` types and context.
 *
 * It converts all arguments before passing them, and converts the return type before returning.
 *
 * @param impl
 * @param argTypeIds All RTTI TypeIds, in the order of [RetType, ThisType, ...ArgTypes]. ThisType can be null for standalone functions.
 * @param invokerSignature A pointer to the signature string.
 * @param invokerIndex The index to the invoker function in the `WebAssembly.Table`.
 * @param invokerContext The context pointer to use, if any.
 * @returns
 */
export async function createGlueFunction(impl, name, returnTypeId, argTypeIds, invokerSignature, invokerIndex, invokerContext) {
    const [returnType, ...argTypes] = await getTypeInfo(returnTypeId, ...argTypeIds);
    const rawInvoker = getTableFunction(impl, invokerSignature, invokerIndex);
    return renameFunction(name, function (...jsArgs) {
        const wiredThis = this ? this._this : undefined;
        const wiredArgs = [];
        const stackBasedDestructors = []; // Used to pretend like we're a part of the WASM stack, which would destroy these objects afterwards.
        if (invokerContext)
            wiredArgs.push(invokerContext);
        if (wiredThis)
            wiredArgs.push(wiredThis);
        // Convert each JS argument to its WASM equivalent (generally a pointer, or int/float)
        for (let i = 0; i < argTypes.length; ++i) {
            const type = argTypes[i];
            const arg = jsArgs[i];
            const { jsValue, wireValue, stackDestructor } = type.toWireType(arg);
            wiredArgs.push(wireValue);
            if (stackDestructor)
                stackBasedDestructors.push(() => stackDestructor(jsValue, wireValue));
        }
        // Finally, call the "raw" WASM function
        let wiredReturn = rawInvoker(...wiredArgs);
        // Still pretending we're a part of the stack, 
        // now destruct everything we "pushed" onto it.
        runDestructors(stackBasedDestructors);
        // Convert whatever the WASM function returned to a JS representation
        // If the object returned is Disposable, then we let the user dispose of it
        // when ready.
        //
        // Otherwise (namely strings), dispose its original representation now.
        if (returnType == null)
            return undefined;
        const { jsValue, wireValue, stackDestructor } = returnType?.fromWireType(wiredReturn);
        if (stackDestructor && !(jsValue && typeof jsValue == "object" && (Symbol.dispose in jsValue)))
            stackDestructor(jsValue, wireValue);
        return jsValue;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWdsdWUtZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvX3ByaXZhdGUvZW1iaW5kL2NyZWF0ZS1nbHVlLWZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHakQ7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQixDQUNwQyxJQUFzQixFQUN0QixJQUFZLEVBQ1osWUFBb0IsRUFDcEIsVUFBb0IsRUFDcEIsZ0JBQXdCLEVBQ3hCLFlBQW9CLEVBQ3BCLGNBQTZCO0lBTzdCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsR0FBRyxRQUFRLENBQUMsR0FBRyxNQUFNLFdBQVcsQ0FBbUIsWUFBWSxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUM7SUFDbkcsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQWdDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUd6RyxPQUFPLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBOEIsR0FBRyxNQUFhO1FBQ3RFLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ2hELE1BQU0sU0FBUyxHQUFnQixFQUFFLENBQUM7UUFDbEMsTUFBTSxxQkFBcUIsR0FBbUIsRUFBRSxDQUFDLENBQUcscUdBQXFHO1FBRXpKLElBQUksY0FBYztZQUNkLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDbkMsSUFBSSxTQUFTO1lBQ1QsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU5QixzRkFBc0Y7UUFDdEYsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUN2QyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE1BQU0sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckUsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMxQixJQUFJLGVBQWU7Z0JBQ2YscUJBQXFCLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUM5RSxDQUFDO1FBRUQsd0NBQXdDO1FBQ3hDLElBQUksV0FBVyxHQUFjLFVBQVUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBRXRELCtDQUErQztRQUMvQywrQ0FBK0M7UUFDL0MsY0FBYyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFFdEMscUVBQXFFO1FBQ3JFLDJFQUEyRTtRQUMzRSxjQUFjO1FBQ2QsRUFBRTtRQUNGLHVFQUF1RTtRQUN2RSxJQUFJLFVBQVUsSUFBSSxJQUFJO1lBQ2xCLE9BQU8sU0FBUyxDQUFDO1FBRXJCLE1BQU0sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxHQUFHLFVBQVUsRUFBRSxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEYsSUFBSSxlQUFlLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLE9BQU8sSUFBSSxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDO1lBQzFGLGVBQWUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFeEMsT0FBTyxPQUFPLENBQUM7SUFFbkIsQ0FBTSxDQUFDLENBQUM7QUFDWixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5zdGFudGlhdGVkV2FzbSB9IGZyb20gXCIuLi8uLi93YXNtLmpzXCI7XHJcbmltcG9ydCB7IHJlbmFtZUZ1bmN0aW9uIH0gZnJvbSBcIi4vY3JlYXRlLW5hbWVkLWZ1bmN0aW9uLmpzXCI7XHJcbmltcG9ydCB7IHJ1bkRlc3RydWN0b3JzIH0gZnJvbSBcIi4vZGVzdHJ1Y3RvcnMuanNcIjtcclxuaW1wb3J0IHsgRW1ib3VuZENsYXNzIH0gZnJvbSBcIi4vZW1ib3VuZC1jbGFzcy5qc1wiO1xyXG5pbXBvcnQgeyBnZXRUYWJsZUZ1bmN0aW9uIH0gZnJvbSBcIi4vZ2V0LXRhYmxlLWZ1bmN0aW9uLmpzXCI7XHJcbmltcG9ydCB7IGdldFR5cGVJbmZvIH0gZnJvbSBcIi4vZ2V0LXR5cGUtaW5mby5qc1wiO1xyXG5pbXBvcnQgdHlwZSB7IEVtYm91bmRSZWdpc3RlcmVkVHlwZSwgV2lyZVR5cGVzIH0gZnJvbSBcIi4vdHlwZXMuanNcIjtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgSlMgZnVuY3Rpb24gdGhhdCBjYWxscyBhIEMrKyBmdW5jdGlvbiwgYWNjb3VudGluZyBmb3IgYHRoaXNgIHR5cGVzIGFuZCBjb250ZXh0LlxyXG4gKiBcclxuICogSXQgY29udmVydHMgYWxsIGFyZ3VtZW50cyBiZWZvcmUgcGFzc2luZyB0aGVtLCBhbmQgY29udmVydHMgdGhlIHJldHVybiB0eXBlIGJlZm9yZSByZXR1cm5pbmcuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaW1wbCBcclxuICogQHBhcmFtIGFyZ1R5cGVJZHMgQWxsIFJUVEkgVHlwZUlkcywgaW4gdGhlIG9yZGVyIG9mIFtSZXRUeXBlLCBUaGlzVHlwZSwgLi4uQXJnVHlwZXNdLiBUaGlzVHlwZSBjYW4gYmUgbnVsbCBmb3Igc3RhbmRhbG9uZSBmdW5jdGlvbnMuXHJcbiAqIEBwYXJhbSBpbnZva2VyU2lnbmF0dXJlIEEgcG9pbnRlciB0byB0aGUgc2lnbmF0dXJlIHN0cmluZy5cclxuICogQHBhcmFtIGludm9rZXJJbmRleCBUaGUgaW5kZXggdG8gdGhlIGludm9rZXIgZnVuY3Rpb24gaW4gdGhlIGBXZWJBc3NlbWJseS5UYWJsZWAuXHJcbiAqIEBwYXJhbSBpbnZva2VyQ29udGV4dCBUaGUgY29udGV4dCBwb2ludGVyIHRvIHVzZSwgaWYgYW55LlxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVHbHVlRnVuY3Rpb248RiBleHRlbmRzICgoLi4uYXJnczogYW55W10pID0+IGFueSkgfCBGdW5jdGlvbj4oXHJcbiAgICBpbXBsOiBJbnN0YW50aWF0ZWRXYXNtLFxyXG4gICAgbmFtZTogc3RyaW5nLFxyXG4gICAgcmV0dXJuVHlwZUlkOiBudW1iZXIsXHJcbiAgICBhcmdUeXBlSWRzOiBudW1iZXJbXSxcclxuICAgIGludm9rZXJTaWduYXR1cmU6IG51bWJlcixcclxuICAgIGludm9rZXJJbmRleDogbnVtYmVyLFxyXG4gICAgaW52b2tlckNvbnRleHQ6IG51bWJlciB8IG51bGxcclxuKTogUHJvbWlzZTxGPiB7XHJcblxyXG4gICAgdHlwZSBSID0gRW1ib3VuZFJlZ2lzdGVyZWRUeXBlPFdpcmVUeXBlcywgYW55PjtcclxuICAgIHR5cGUgQXJnVHlwZXMgPSBFbWJvdW5kUmVnaXN0ZXJlZFR5cGU8V2lyZVR5cGVzLCBhbnk+W107XHJcblxyXG5cclxuICAgIGNvbnN0IFtyZXR1cm5UeXBlLCAuLi5hcmdUeXBlc10gPSBhd2FpdCBnZXRUeXBlSW5mbzxbUiwgLi4uQXJnVHlwZXNdPihyZXR1cm5UeXBlSWQsIC4uLmFyZ1R5cGVJZHMpO1xyXG4gICAgY29uc3QgcmF3SW52b2tlciA9IGdldFRhYmxlRnVuY3Rpb248KC4uLmFyZ3M6IFdpcmVUeXBlc1tdKSA9PiBhbnk+KGltcGwsIGludm9rZXJTaWduYXR1cmUsIGludm9rZXJJbmRleCk7XHJcblxyXG5cclxuICAgIHJldHVybiByZW5hbWVGdW5jdGlvbihuYW1lLCBmdW5jdGlvbiAodGhpczogRW1ib3VuZENsYXNzLCAuLi5qc0FyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgY29uc3Qgd2lyZWRUaGlzID0gdGhpcyA/IHRoaXMuX3RoaXMgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgY29uc3Qgd2lyZWRBcmdzOiBXaXJlVHlwZXNbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHN0YWNrQmFzZWREZXN0cnVjdG9yczogKCgpID0+IHZvaWQpW10gPSBbXTsgICAvLyBVc2VkIHRvIHByZXRlbmQgbGlrZSB3ZSdyZSBhIHBhcnQgb2YgdGhlIFdBU00gc3RhY2ssIHdoaWNoIHdvdWxkIGRlc3Ryb3kgdGhlc2Ugb2JqZWN0cyBhZnRlcndhcmRzLlxyXG5cclxuICAgICAgICBpZiAoaW52b2tlckNvbnRleHQpXHJcbiAgICAgICAgICAgIHdpcmVkQXJncy5wdXNoKGludm9rZXJDb250ZXh0KTtcclxuICAgICAgICBpZiAod2lyZWRUaGlzKVxyXG4gICAgICAgICAgICB3aXJlZEFyZ3MucHVzaCh3aXJlZFRoaXMpO1xyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IGVhY2ggSlMgYXJndW1lbnQgdG8gaXRzIFdBU00gZXF1aXZhbGVudCAoZ2VuZXJhbGx5IGEgcG9pbnRlciwgb3IgaW50L2Zsb2F0KVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJnVHlwZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGFyZ1R5cGVzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBhcmcgPSBqc0FyZ3NbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IHsganNWYWx1ZSwgd2lyZVZhbHVlLCBzdGFja0Rlc3RydWN0b3IgfSA9IHR5cGUudG9XaXJlVHlwZShhcmcpO1xyXG4gICAgICAgICAgICB3aXJlZEFyZ3MucHVzaCh3aXJlVmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAoc3RhY2tEZXN0cnVjdG9yKVxyXG4gICAgICAgICAgICAgICAgc3RhY2tCYXNlZERlc3RydWN0b3JzLnB1c2goKCkgPT4gc3RhY2tEZXN0cnVjdG9yKGpzVmFsdWUsIHdpcmVWYWx1ZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRmluYWxseSwgY2FsbCB0aGUgXCJyYXdcIiBXQVNNIGZ1bmN0aW9uXHJcbiAgICAgICAgbGV0IHdpcmVkUmV0dXJuOiBXaXJlVHlwZXMgPSByYXdJbnZva2VyKC4uLndpcmVkQXJncyk7XHJcblxyXG4gICAgICAgIC8vIFN0aWxsIHByZXRlbmRpbmcgd2UncmUgYSBwYXJ0IG9mIHRoZSBzdGFjaywgXHJcbiAgICAgICAgLy8gbm93IGRlc3RydWN0IGV2ZXJ5dGhpbmcgd2UgXCJwdXNoZWRcIiBvbnRvIGl0LlxyXG4gICAgICAgIHJ1bkRlc3RydWN0b3JzKHN0YWNrQmFzZWREZXN0cnVjdG9ycyk7XHJcblxyXG4gICAgICAgIC8vIENvbnZlcnQgd2hhdGV2ZXIgdGhlIFdBU00gZnVuY3Rpb24gcmV0dXJuZWQgdG8gYSBKUyByZXByZXNlbnRhdGlvblxyXG4gICAgICAgIC8vIElmIHRoZSBvYmplY3QgcmV0dXJuZWQgaXMgRGlzcG9zYWJsZSwgdGhlbiB3ZSBsZXQgdGhlIHVzZXIgZGlzcG9zZSBvZiBpdFxyXG4gICAgICAgIC8vIHdoZW4gcmVhZHkuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBPdGhlcndpc2UgKG5hbWVseSBzdHJpbmdzKSwgZGlzcG9zZSBpdHMgb3JpZ2luYWwgcmVwcmVzZW50YXRpb24gbm93LlxyXG4gICAgICAgIGlmIChyZXR1cm5UeXBlID09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIGNvbnN0IHsganNWYWx1ZSwgd2lyZVZhbHVlLCBzdGFja0Rlc3RydWN0b3IgfSA9IHJldHVyblR5cGU/LmZyb21XaXJlVHlwZSh3aXJlZFJldHVybik7XHJcbiAgICAgICAgaWYgKHN0YWNrRGVzdHJ1Y3RvciAmJiAhKGpzVmFsdWUgJiYgdHlwZW9mIGpzVmFsdWUgPT0gXCJvYmplY3RcIiAmJiAoU3ltYm9sLmRpc3Bvc2UgaW4ganNWYWx1ZSkpKVxyXG4gICAgICAgICAgICBzdGFja0Rlc3RydWN0b3IoanNWYWx1ZSwgd2lyZVZhbHVlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGpzVmFsdWU7XHJcblxyXG4gICAgfSBhcyBGKTtcclxufVxyXG4iXX0=