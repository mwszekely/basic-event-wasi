import { InstantiatedWasm } from "../../wasm.js";
import { renameFunction } from "./create-named-function.js";
import { runDestructors } from "./destructors.js";
import { EmboundClass } from "./embound-class.js";
import { getTableFunction } from "./get-table-function.js";
import { getTypeInfo } from "./get-type-info.js";
/**
 * Creates a JS function that calls a C++ function, accounting for `this` types and context.
 *
 * It converts all arguments before passing them, and converts the return type before returning.
 *
 * @param impl
 * @param argTypeIds All RTTI TypeIds, in the order of [RetType, ThisType, ...ArgTypes]. ThisType can be null for standalone functions.
 * @param invokerSignature A pointer to the signature string.
 * @param invokerIndex The index to the invoker function in the `WebAssembly.Table`.
 * @param invokerContext The context pointer to use, if any.
 * @returns
 */
/* eslint @typescript-eslint/no-unsafe-function-type: "off" */
export async function createGlueFunction(impl, name, returnTypeId, argTypeIds, invokerSignature, invokerIndex, invokerContext) {
    const [returnType, ...argTypes] = await getTypeInfo(returnTypeId, ...argTypeIds);
    const rawInvoker = getTableFunction(impl, invokerSignature, invokerIndex);
    return renameFunction(name, function (...jsArgs) {
        const wiredThis = this ? this._this : undefined;
        const wiredArgs = [];
        const stackBasedDestructors = []; // Used to pretend like we're a part of the WASM stack, which would destroy these objects afterwards.
        if (invokerContext)
            wiredArgs.push(invokerContext);
        if (wiredThis)
            wiredArgs.push(wiredThis);
        // Convert each JS argument to its WASM equivalent (generally a pointer, or int/float)
        for (let i = 0; i < argTypes.length; ++i) {
            const type = argTypes[i];
            const arg = jsArgs[i];
            const { jsValue, wireValue, stackDestructor } = type.toWireType(arg);
            wiredArgs.push(wireValue);
            if (stackDestructor)
                stackBasedDestructors.push(() => stackDestructor(jsValue, wireValue));
        }
        // Finally, call the "raw" WASM function
        const wiredReturn = rawInvoker(...wiredArgs);
        // Still pretending we're a part of the stack, 
        // now destruct everything we "pushed" onto it.
        runDestructors(stackBasedDestructors);
        // Convert whatever the WASM function returned to a JS representation
        // If the object returned is Disposable, then we let the user dispose of it
        // when ready.
        //
        // Otherwise (namely strings), dispose its original representation now.
        if (returnType == null)
            return undefined;
        const { jsValue, wireValue, stackDestructor } = returnType.fromWireType(wiredReturn);
        if (stackDestructor && !(jsValue && typeof jsValue == "object" && (Symbol.dispose in jsValue)))
            stackDestructor(jsValue, wireValue);
        return jsValue;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWdsdWUtZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvX3ByaXZhdGUvZW1iaW5kL2NyZWF0ZS1nbHVlLWZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHakQ7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCw4REFBOEQ7QUFDOUQsTUFBTSxDQUFDLEtBQUssVUFBVSxrQkFBa0IsQ0FDcEMsSUFBc0IsRUFDdEIsSUFBWSxFQUNaLFlBQW9CLEVBQ3BCLFVBQW9CLEVBQ3BCLGdCQUF3QixFQUN4QixZQUFvQixFQUNwQixjQUE2QjtJQU03QixNQUFNLENBQUMsVUFBVSxFQUFFLEdBQUcsUUFBUSxDQUFDLEdBQUcsTUFBTSxXQUFXLENBQW1CLFlBQVksRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQ25HLE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFzQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFFL0csT0FBTyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQThCLEdBQUcsTUFBaUI7UUFDMUUsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDaEQsTUFBTSxTQUFTLEdBQWdCLEVBQUUsQ0FBQztRQUNsQyxNQUFNLHFCQUFxQixHQUFtQixFQUFFLENBQUMsQ0FBRyxxR0FBcUc7UUFFekosSUFBSSxjQUFjO1lBQ2QsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNuQyxJQUFJLFNBQVM7WUFDVCxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTlCLHNGQUFzRjtRQUN0RixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ3ZDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsTUFBTSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyRSxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzFCLElBQUksZUFBZTtnQkFDZixxQkFBcUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzlFLENBQUM7UUFFRCx3Q0FBd0M7UUFDeEMsTUFBTSxXQUFXLEdBQWMsVUFBVSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUM7UUFFeEQsK0NBQStDO1FBQy9DLCtDQUErQztRQUMvQyxjQUFjLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUV0QyxxRUFBcUU7UUFDckUsMkVBQTJFO1FBQzNFLGNBQWM7UUFDZCxFQUFFO1FBQ0YsdUVBQXVFO1FBQ3ZFLElBQUksVUFBVSxJQUFJLElBQUk7WUFDbEIsT0FBTyxTQUFTLENBQUM7UUFFckIsTUFBTSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNyRixJQUFJLGVBQWUsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sT0FBTyxJQUFJLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLENBQUM7WUFDMUYsZUFBZSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUV4QyxPQUFPLE9BQU8sQ0FBQztJQUVuQixDQUFNLENBQUMsQ0FBQztBQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnN0YW50aWF0ZWRXYXNtIH0gZnJvbSBcIi4uLy4uL3dhc20uanNcIjtcclxuaW1wb3J0IHsgcmVuYW1lRnVuY3Rpb24gfSBmcm9tIFwiLi9jcmVhdGUtbmFtZWQtZnVuY3Rpb24uanNcIjtcclxuaW1wb3J0IHsgcnVuRGVzdHJ1Y3RvcnMgfSBmcm9tIFwiLi9kZXN0cnVjdG9ycy5qc1wiO1xyXG5pbXBvcnQgeyBFbWJvdW5kQ2xhc3MgfSBmcm9tIFwiLi9lbWJvdW5kLWNsYXNzLmpzXCI7XHJcbmltcG9ydCB7IGdldFRhYmxlRnVuY3Rpb24gfSBmcm9tIFwiLi9nZXQtdGFibGUtZnVuY3Rpb24uanNcIjtcclxuaW1wb3J0IHsgZ2V0VHlwZUluZm8gfSBmcm9tIFwiLi9nZXQtdHlwZS1pbmZvLmpzXCI7XHJcbmltcG9ydCB0eXBlIHsgRW1ib3VuZFJlZ2lzdGVyZWRUeXBlLCBXaXJlVHlwZXMgfSBmcm9tIFwiLi90eXBlcy5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBKUyBmdW5jdGlvbiB0aGF0IGNhbGxzIGEgQysrIGZ1bmN0aW9uLCBhY2NvdW50aW5nIGZvciBgdGhpc2AgdHlwZXMgYW5kIGNvbnRleHQuXHJcbiAqIFxyXG4gKiBJdCBjb252ZXJ0cyBhbGwgYXJndW1lbnRzIGJlZm9yZSBwYXNzaW5nIHRoZW0sIGFuZCBjb252ZXJ0cyB0aGUgcmV0dXJuIHR5cGUgYmVmb3JlIHJldHVybmluZy5cclxuICogXHJcbiAqIEBwYXJhbSBpbXBsIFxyXG4gKiBAcGFyYW0gYXJnVHlwZUlkcyBBbGwgUlRUSSBUeXBlSWRzLCBpbiB0aGUgb3JkZXIgb2YgW1JldFR5cGUsIFRoaXNUeXBlLCAuLi5BcmdUeXBlc10uIFRoaXNUeXBlIGNhbiBiZSBudWxsIGZvciBzdGFuZGFsb25lIGZ1bmN0aW9ucy5cclxuICogQHBhcmFtIGludm9rZXJTaWduYXR1cmUgQSBwb2ludGVyIHRvIHRoZSBzaWduYXR1cmUgc3RyaW5nLlxyXG4gKiBAcGFyYW0gaW52b2tlckluZGV4IFRoZSBpbmRleCB0byB0aGUgaW52b2tlciBmdW5jdGlvbiBpbiB0aGUgYFdlYkFzc2VtYmx5LlRhYmxlYC5cclxuICogQHBhcmFtIGludm9rZXJDb250ZXh0IFRoZSBjb250ZXh0IHBvaW50ZXIgdG8gdXNlLCBpZiBhbnkuXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuLyogZXNsaW50IEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtZnVuY3Rpb24tdHlwZTogXCJvZmZcIiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlR2x1ZUZ1bmN0aW9uPEYgZXh0ZW5kcyAoKC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdW5rbm93bikgfCBGdW5jdGlvbj4oXHJcbiAgICBpbXBsOiBJbnN0YW50aWF0ZWRXYXNtLFxyXG4gICAgbmFtZTogc3RyaW5nLFxyXG4gICAgcmV0dXJuVHlwZUlkOiBudW1iZXIsXHJcbiAgICBhcmdUeXBlSWRzOiBudW1iZXJbXSxcclxuICAgIGludm9rZXJTaWduYXR1cmU6IG51bWJlcixcclxuICAgIGludm9rZXJJbmRleDogbnVtYmVyLFxyXG4gICAgaW52b2tlckNvbnRleHQ6IG51bWJlciB8IG51bGxcclxuKTogUHJvbWlzZTxGPiB7XHJcbiAgICB0eXBlIFQgPSBQYXJhbWV0ZXJzPEYgJiAoKC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdW5rbm93bik+O1xyXG4gICAgdHlwZSBSID0gRW1ib3VuZFJlZ2lzdGVyZWRUeXBlPFdpcmVUeXBlcywgVFtudW1iZXJdPjtcclxuICAgIHR5cGUgQXJnVHlwZXMgPSBFbWJvdW5kUmVnaXN0ZXJlZFR5cGU8V2lyZVR5cGVzLCBUW251bWJlcl0+W107XHJcblxyXG4gICAgY29uc3QgW3JldHVyblR5cGUsIC4uLmFyZ1R5cGVzXSA9IGF3YWl0IGdldFR5cGVJbmZvPFtSLCAuLi5BcmdUeXBlc10+KHJldHVyblR5cGVJZCwgLi4uYXJnVHlwZUlkcyk7XHJcbiAgICBjb25zdCByYXdJbnZva2VyID0gZ2V0VGFibGVGdW5jdGlvbjwoLi4uYXJnczogV2lyZVR5cGVzW10pID0+IFdpcmVUeXBlcz4oaW1wbCwgaW52b2tlclNpZ25hdHVyZSwgaW52b2tlckluZGV4KTtcclxuXHJcbiAgICByZXR1cm4gcmVuYW1lRnVuY3Rpb24obmFtZSwgZnVuY3Rpb24gKHRoaXM6IEVtYm91bmRDbGFzcywgLi4uanNBcmdzOiB1bmtub3duW10pIHtcclxuICAgICAgICBjb25zdCB3aXJlZFRoaXMgPSB0aGlzID8gdGhpcy5fdGhpcyA6IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCB3aXJlZEFyZ3M6IFdpcmVUeXBlc1tdID0gW107XHJcbiAgICAgICAgY29uc3Qgc3RhY2tCYXNlZERlc3RydWN0b3JzOiAoKCkgPT4gdm9pZClbXSA9IFtdOyAgIC8vIFVzZWQgdG8gcHJldGVuZCBsaWtlIHdlJ3JlIGEgcGFydCBvZiB0aGUgV0FTTSBzdGFjaywgd2hpY2ggd291bGQgZGVzdHJveSB0aGVzZSBvYmplY3RzIGFmdGVyd2FyZHMuXHJcblxyXG4gICAgICAgIGlmIChpbnZva2VyQ29udGV4dClcclxuICAgICAgICAgICAgd2lyZWRBcmdzLnB1c2goaW52b2tlckNvbnRleHQpO1xyXG4gICAgICAgIGlmICh3aXJlZFRoaXMpXHJcbiAgICAgICAgICAgIHdpcmVkQXJncy5wdXNoKHdpcmVkVGhpcyk7XHJcblxyXG4gICAgICAgIC8vIENvbnZlcnQgZWFjaCBKUyBhcmd1bWVudCB0byBpdHMgV0FTTSBlcXVpdmFsZW50IChnZW5lcmFsbHkgYSBwb2ludGVyLCBvciBpbnQvZmxvYXQpXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdUeXBlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCB0eXBlID0gYXJnVHlwZXNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGFyZyA9IGpzQXJnc1tpXTtcclxuICAgICAgICAgICAgY29uc3QgeyBqc1ZhbHVlLCB3aXJlVmFsdWUsIHN0YWNrRGVzdHJ1Y3RvciB9ID0gdHlwZS50b1dpcmVUeXBlKGFyZyk7XHJcbiAgICAgICAgICAgIHdpcmVkQXJncy5wdXNoKHdpcmVWYWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChzdGFja0Rlc3RydWN0b3IpXHJcbiAgICAgICAgICAgICAgICBzdGFja0Jhc2VkRGVzdHJ1Y3RvcnMucHVzaCgoKSA9PiBzdGFja0Rlc3RydWN0b3IoanNWYWx1ZSwgd2lyZVZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBGaW5hbGx5LCBjYWxsIHRoZSBcInJhd1wiIFdBU00gZnVuY3Rpb25cclxuICAgICAgICBjb25zdCB3aXJlZFJldHVybjogV2lyZVR5cGVzID0gcmF3SW52b2tlciguLi53aXJlZEFyZ3MpO1xyXG5cclxuICAgICAgICAvLyBTdGlsbCBwcmV0ZW5kaW5nIHdlJ3JlIGEgcGFydCBvZiB0aGUgc3RhY2ssIFxyXG4gICAgICAgIC8vIG5vdyBkZXN0cnVjdCBldmVyeXRoaW5nIHdlIFwicHVzaGVkXCIgb250byBpdC5cclxuICAgICAgICBydW5EZXN0cnVjdG9ycyhzdGFja0Jhc2VkRGVzdHJ1Y3RvcnMpO1xyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IHdoYXRldmVyIHRoZSBXQVNNIGZ1bmN0aW9uIHJldHVybmVkIHRvIGEgSlMgcmVwcmVzZW50YXRpb25cclxuICAgICAgICAvLyBJZiB0aGUgb2JqZWN0IHJldHVybmVkIGlzIERpc3Bvc2FibGUsIHRoZW4gd2UgbGV0IHRoZSB1c2VyIGRpc3Bvc2Ugb2YgaXRcclxuICAgICAgICAvLyB3aGVuIHJlYWR5LlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gT3RoZXJ3aXNlIChuYW1lbHkgc3RyaW5ncyksIGRpc3Bvc2UgaXRzIG9yaWdpbmFsIHJlcHJlc2VudGF0aW9uIG5vdy5cclxuICAgICAgICBpZiAocmV0dXJuVHlwZSA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBjb25zdCB7IGpzVmFsdWUsIHdpcmVWYWx1ZSwgc3RhY2tEZXN0cnVjdG9yIH0gPSByZXR1cm5UeXBlLmZyb21XaXJlVHlwZSh3aXJlZFJldHVybik7XHJcbiAgICAgICAgaWYgKHN0YWNrRGVzdHJ1Y3RvciAmJiAhKGpzVmFsdWUgJiYgdHlwZW9mIGpzVmFsdWUgPT0gXCJvYmplY3RcIiAmJiAoU3ltYm9sLmRpc3Bvc2UgaW4ganNWYWx1ZSkpKVxyXG4gICAgICAgICAgICBzdGFja0Rlc3RydWN0b3IoanNWYWx1ZSwgd2lyZVZhbHVlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGpzVmFsdWU7XHJcblxyXG4gICAgfSBhcyBGKTtcclxufVxyXG4iXX0=