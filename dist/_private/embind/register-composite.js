import { InstantiatedWasm } from "../../wasm.js";
import { getTableFunction } from "./get-table-function.js";
import { getTypeInfo } from "./get-type-info.js";
// Temporary scratch memory to communicate between registration calls.
export const compositeRegistrations = new Map();
export function _embind_register_value_composite(impl, rawTypePtr, namePtr, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
    compositeRegistrations.set(rawTypePtr, {
        namePtr,
        _constructor: getTableFunction(impl, constructorSignature, rawConstructor),
        _destructor: getTableFunction(impl, destructorSignature, rawDestructor),
        elements: [],
    });
}
export async function _embind_finalize_composite_elements(elements) {
    const dependencyIds = [...elements.map((elt) => elt.getterReturnTypeId), ...elements.map((elt) => elt.setterArgumentTypeId)];
    const dependencies = await getTypeInfo(...dependencyIds);
    console.assert(dependencies.length == elements.length * 2);
    const fieldRecords = elements.map((field, i) => {
        const getterReturnType = dependencies[i];
        const setterArgumentType = dependencies[i + elements.length];
        function read(ptr) {
            return getterReturnType.fromWireType(field.wasmGetter(field.getterContext, ptr));
        }
        function write(ptr, o) {
            const ret = setterArgumentType.toWireType(o);
            field.wasmSetter(field.setterContext, ptr, ret.wireValue);
            return ret;
        }
        return {
            getterReturnType,
            setterArgumentType,
            read,
            write,
            ...field
        };
    });
    return fieldRecords;
}
//# sourceMappingURL=data:application/json;base64,