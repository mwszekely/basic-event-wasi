import { InstantiatedWasm } from "../../wasm.js";
import { getTableFunction } from "./get-table-function.js";
import { getTypeInfo } from "./get-type-info.js";
// Temporary scratch memory to communicate between registration calls.
export const compositeRegistrations = {};
export function _embind_register_value_composite(impl, rawTypePtr, namePtr, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
    compositeRegistrations[rawTypePtr] = {
        namePtr,
        _constructor: getTableFunction(impl, constructorSignature, rawConstructor),
        _destructor: getTableFunction(impl, destructorSignature, rawDestructor),
        elements: [],
    };
}
export async function _embind_finalize_composite_elements(elements) {
    const dependencyIds = [...elements.map((elt) => elt.getterReturnTypeId), ...elements.map((elt) => elt.setterArgumentTypeId)];
    const dependencies = await getTypeInfo(...dependencyIds);
    console.assert(dependencies.length == elements.length * 2);
    const fieldRecords = elements.map((field, i) => {
        const getterReturnType = dependencies[i];
        const setterArgumentType = dependencies[i + elements.length];
        function read(ptr) {
            return getterReturnType.fromWireType(field.wasmGetter(field.getterContext, ptr));
        }
        function write(ptr, o) {
            const ret = setterArgumentType.toWireType(o);
            field.wasmSetter(field.setterContext, ptr, ret.wireValue);
            return ret;
        }
        return {
            getterReturnType,
            setterArgumentType,
            read,
            write,
            ...field
        };
    });
    return fieldRecords;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItY29tcG9zaXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL19wcml2YXRlL2VtYmluZC9yZWdpc3Rlci1jb21wb3NpdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzNELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQWdEakQsc0VBQXNFO0FBQ3RFLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUE4QyxFQUFFLENBQUM7QUFLcEYsTUFBTSxVQUFVLGdDQUFnQyxDQUFJLElBQXNCLEVBQUUsVUFBa0IsRUFBRSxPQUFlLEVBQUUsb0JBQTRCLEVBQUUsY0FBc0IsRUFBRSxtQkFBMkIsRUFBRSxhQUFxQjtJQUNyTixzQkFBc0IsQ0FBQyxVQUFVLENBQUMsR0FBRztRQUNqQyxPQUFPO1FBQ1AsWUFBWSxFQUFFLGdCQUFnQixDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRSxjQUFjLENBQUM7UUFDMUUsV0FBVyxFQUFFLGdCQUFnQixDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRSxhQUFhLENBQUM7UUFDdkUsUUFBUSxFQUFFLEVBQUU7S0FDZixDQUFDO0FBRU4sQ0FBQztBQUlELE1BQU0sQ0FBQyxLQUFLLFVBQVUsbUNBQW1DLENBQXdELFFBQXNEO0lBQ25LLE1BQU0sYUFBYSxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7SUFFN0gsTUFBTSxZQUFZLEdBQUcsTUFBTSxXQUFXLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQztJQUN6RCxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUUzRCxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBK0MsRUFBRTtRQUN4RixNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUUsQ0FBQztRQUMxQyxNQUFNLGtCQUFrQixHQUFHLFlBQVksQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBRSxDQUFDO1FBRTlELFNBQVMsSUFBSSxDQUFDLEdBQVc7WUFDckIsT0FBTyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckYsQ0FBQztRQUNELFNBQVMsS0FBSyxDQUFDLEdBQVcsRUFBRSxDQUFNO1lBQzlCLE1BQU0sR0FBRyxHQUFHLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMxRCxPQUFPLEdBQUcsQ0FBQztRQUVmLENBQUM7UUFDRCxPQUFPO1lBQ0gsZ0JBQWdCO1lBQ2hCLGtCQUFrQjtZQUNsQixJQUFJO1lBQ0osS0FBSztZQUNMLEdBQUcsS0FBSztTQUNYLENBQUE7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sWUFBbUIsQ0FBQztBQUMvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5zdGFudGlhdGVkV2FzbSB9IGZyb20gXCIuLi8uLi93YXNtLmpzXCI7XHJcbmltcG9ydCB7IGdldFRhYmxlRnVuY3Rpb24gfSBmcm9tIFwiLi9nZXQtdGFibGUtZnVuY3Rpb24uanNcIjtcclxuaW1wb3J0IHsgZ2V0VHlwZUluZm8gfSBmcm9tIFwiLi9nZXQtdHlwZS1pbmZvLmpzXCI7XHJcbmltcG9ydCB0eXBlIHsgRW1ib3VuZFJlZ2lzdGVyZWRUeXBlLCBXaXJlQ29udmVyc2lvblJlc3VsdCwgV2lyZVR5cGVzIH0gZnJvbSBcIi4vdHlwZXMuanNcIjtcclxuXHJcbmV4cG9ydCB0eXBlIENvbXBvc2l0ZUVsZW1lbnRSZWdpc3RyYXRpb25HZXR0ZXI8V1Q+ID0gKGdldHRlckNvbnRleHQ6IG51bWJlciwgcHRyOiBudW1iZXIpID0+IFdUO1xyXG5leHBvcnQgdHlwZSBDb21wb3NpdGVFbGVtZW50UmVnaXN0cmF0aW9uU2V0dGVyPFdUPiA9IChzZXR0ZXJDb250ZXh0OiBudW1iZXIsIHB0cjogbnVtYmVyLCB3aXJlVHlwZTogV1QpID0+IHZvaWQ7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvc2l0ZVJlZ2lzdHJhdGlvbkluZm8ge1xyXG4gICAgbmFtZVB0cjogbnVtYmVyO1xyXG4gICAgX2NvbnN0cnVjdG9yKCk6IG51bWJlcjtcclxuICAgIF9kZXN0cnVjdG9yKHB0cjogV2lyZVR5cGVzKTogdm9pZDtcclxuICAgIGVsZW1lbnRzOiBDb21wb3NpdGVFbGVtZW50UmVnaXN0cmF0aW9uSW5mbzxhbnksIGFueT5bXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb21wb3NpdGVFbGVtZW50UmVnaXN0cmF0aW9uSW5mbzxXVCBleHRlbmRzIFdpcmVUeXBlcywgVD4ge1xyXG5cclxuICAgIC8qKiBUaGUgXCJyYXdcIiBnZXR0ZXIsIGV4cG9ydGVkIGZyb20gRW1iaW5kLiBOZWVkcyBjb252ZXJzaW9uIGJldHdlZW4gdHlwZXMuICovXHJcbiAgICB3YXNtR2V0dGVyOiBDb21wb3NpdGVFbGVtZW50UmVnaXN0cmF0aW9uR2V0dGVyPFdUPjtcclxuXHJcbiAgICAvKiogVGhlIFwicmF3XCIgc2V0dGVyLCBleHBvcnRlZCBmcm9tIEVtYmluZC4gTmVlZHMgY29udmVyc2lvbiBiZXR3ZWVuIHR5cGVzLiAqL1xyXG4gICAgd2FzbVNldHRlcjogQ29tcG9zaXRlRWxlbWVudFJlZ2lzdHJhdGlvblNldHRlcjxXVD47XHJcblxyXG4gICAgLyoqIFRoZSBudW1lcmljIHR5cGUgSUQgb2YgdGhlIHR5cGUgdGhlIGdldHRlciByZXR1cm5zICovXHJcbiAgICBnZXR0ZXJSZXR1cm5UeXBlSWQ6IG51bWJlcjtcclxuXHJcbiAgICAvKiogVGhlIG51bWVyaWMgdHlwZSBJRCBvZiB0aGUgdHlwZSB0aGUgc2V0dGVyIGFjY2VwdHMgKi9cclxuICAgIHNldHRlckFyZ3VtZW50VHlwZUlkOiBudW1iZXI7XHJcblxyXG4gICAgLyoqIFVua25vd247IHVzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIGVtYmluZCBnZXR0ZXIgKi9cclxuICAgIGdldHRlckNvbnRleHQ6IG51bWJlcjtcclxuXHJcbiAgICAvKiogVW5rbm93bjsgdXNlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgZW1iaW5kIHNldHRlciAqL1xyXG4gICAgc2V0dGVyQ29udGV4dDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvc2l0ZUVsZW1lbnRSZWdpc3RyYXRpb25JbmZvRTxXVCBleHRlbmRzIFdpcmVUeXBlcywgVD4gZXh0ZW5kcyBDb21wb3NpdGVFbGVtZW50UmVnaXN0cmF0aW9uSW5mbzxXVCwgVD4ge1xyXG4gICAgLyoqIEEgdmVyc2lvbiBvZiBgd2FzbUdldHRlcmAgdGhhdCBoYW5kbGVzIHR5cGUgY29udmVyc2lvbiAqL1xyXG4gICAgcmVhZChwdHI6IFdUKTogV2lyZUNvbnZlcnNpb25SZXN1bHQ8V1QsIFQ+O1xyXG5cclxuICAgIC8qKiBBIHZlcnNpb24gb2YgYHdhc21TZXR0ZXJgIHRoYXQgaGFuZGxlcyB0eXBlIGNvbnZlcnNpb24gKi9cclxuICAgIHdyaXRlKHB0cjogbnVtYmVyLCB2YWx1ZTogVCk6IFdpcmVDb252ZXJzaW9uUmVzdWx0PFdULCBUPjtcclxuXHJcbiAgICAvKiogYGdldHRlclJldHVyblR5cGVJZCwgYnV0IHJlc29sdmVkIHRvIHRoZSBwYXJzZWQgdHlwZSBpbmZvICovXHJcbiAgICBnZXR0ZXJSZXR1cm5UeXBlOiBFbWJvdW5kUmVnaXN0ZXJlZFR5cGU8V1QsIFQ+O1xyXG5cclxuICAgIC8qKiBgc2V0dGVyUmV0dXJuVHlwZUlkLCBidXQgcmVzb2x2ZWQgdG8gdGhlIHBhcnNlZCB0eXBlIGluZm8gKi9cclxuICAgIHNldHRlckFyZ3VtZW50VHlwZTogRW1ib3VuZFJlZ2lzdGVyZWRUeXBlPFdULCBUPjtcclxufVxyXG5cclxuLy8gVGVtcG9yYXJ5IHNjcmF0Y2ggbWVtb3J5IHRvIGNvbW11bmljYXRlIGJldHdlZW4gcmVnaXN0cmF0aW9uIGNhbGxzLlxyXG5leHBvcnQgY29uc3QgY29tcG9zaXRlUmVnaXN0cmF0aW9uczogUmVjb3JkPG51bWJlciwgQ29tcG9zaXRlUmVnaXN0cmF0aW9uSW5mbz4gPSB7fTtcclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX2NvbXBvc2l0ZTxUPihpbXBsOiBJbnN0YW50aWF0ZWRXYXNtLCByYXdUeXBlUHRyOiBudW1iZXIsIG5hbWVQdHI6IG51bWJlciwgY29uc3RydWN0b3JTaWduYXR1cmU6IG51bWJlciwgcmF3Q29uc3RydWN0b3I6IG51bWJlciwgZGVzdHJ1Y3RvclNpZ25hdHVyZTogbnVtYmVyLCByYXdEZXN0cnVjdG9yOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbXBvc2l0ZVJlZ2lzdHJhdGlvbnNbcmF3VHlwZVB0cl0gPSB7XHJcbiAgICAgICAgbmFtZVB0cixcclxuICAgICAgICBfY29uc3RydWN0b3I6IGdldFRhYmxlRnVuY3Rpb24oaW1wbCwgY29uc3RydWN0b3JTaWduYXR1cmUsIHJhd0NvbnN0cnVjdG9yKSxcclxuICAgICAgICBfZGVzdHJ1Y3RvcjogZ2V0VGFibGVGdW5jdGlvbihpbXBsLCBkZXN0cnVjdG9yU2lnbmF0dXJlLCByYXdEZXN0cnVjdG9yKSxcclxuICAgICAgICBlbGVtZW50czogW10sXHJcbiAgICB9O1xyXG5cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX2VtYmluZF9maW5hbGl6ZV9jb21wb3NpdGVfZWxlbWVudHM8SSBleHRlbmRzIENvbXBvc2l0ZUVsZW1lbnRSZWdpc3RyYXRpb25JbmZvRTxhbnksIGFueT4+KGVsZW1lbnRzOiBDb21wb3NpdGVFbGVtZW50UmVnaXN0cmF0aW9uSW5mbzxhbnksIGFueT5bXSk6IFByb21pc2U8SVtdPiB7XHJcbiAgICBjb25zdCBkZXBlbmRlbmN5SWRzID0gWy4uLmVsZW1lbnRzLm1hcCgoZWx0KSA9PiBlbHQuZ2V0dGVyUmV0dXJuVHlwZUlkKSwgLi4uZWxlbWVudHMubWFwKChlbHQpID0+IGVsdC5zZXR0ZXJBcmd1bWVudFR5cGVJZCldO1xyXG5cclxuICAgIGNvbnN0IGRlcGVuZGVuY2llcyA9IGF3YWl0IGdldFR5cGVJbmZvKC4uLmRlcGVuZGVuY3lJZHMpO1xyXG4gICAgY29uc29sZS5hc3NlcnQoZGVwZW5kZW5jaWVzLmxlbmd0aCA9PSBlbGVtZW50cy5sZW5ndGggKiAyKTtcclxuXHJcbiAgICBjb25zdCBmaWVsZFJlY29yZHMgPSBlbGVtZW50cy5tYXAoKGZpZWxkLCBpKTogQ29tcG9zaXRlRWxlbWVudFJlZ2lzdHJhdGlvbkluZm9FPGFueSwgYW55PiA9PiB7XHJcbiAgICAgICAgY29uc3QgZ2V0dGVyUmV0dXJuVHlwZSA9IGRlcGVuZGVuY2llc1tpXSE7XHJcbiAgICAgICAgY29uc3Qgc2V0dGVyQXJndW1lbnRUeXBlID0gZGVwZW5kZW5jaWVzW2kgKyBlbGVtZW50cy5sZW5ndGhdITtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZChwdHI6IG51bWJlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0dGVyUmV0dXJuVHlwZS5mcm9tV2lyZVR5cGUoZmllbGQud2FzbUdldHRlcihmaWVsZC5nZXR0ZXJDb250ZXh0LCBwdHIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gd3JpdGUocHRyOiBudW1iZXIsIG86IGFueSkge1xyXG4gICAgICAgICAgICBjb25zdCByZXQgPSBzZXR0ZXJBcmd1bWVudFR5cGUudG9XaXJlVHlwZShvKTtcclxuICAgICAgICAgICAgZmllbGQud2FzbVNldHRlcihmaWVsZC5zZXR0ZXJDb250ZXh0LCBwdHIsIHJldC53aXJlVmFsdWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0dGVyUmV0dXJuVHlwZSxcclxuICAgICAgICAgICAgc2V0dGVyQXJndW1lbnRUeXBlLFxyXG4gICAgICAgICAgICByZWFkLFxyXG4gICAgICAgICAgICB3cml0ZSxcclxuICAgICAgICAgICAgLi4uZmllbGRcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZmllbGRSZWNvcmRzIGFzIElbXTtcclxufSJdfQ==