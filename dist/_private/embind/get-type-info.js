const DependenciesToWaitFor = new Map();
/**
 * Returns the parsed type info, converters, etc. for the given C++ RTTI TypeID pointer.
 *
 * Passing a null type ID is fine and will just result in a `null` at that spot in the returned array.
 */
export async function getTypeInfo(...typeIds) {
    return await Promise.all(typeIds.map(async (typeId) => {
        if (!typeId)
            return Promise.resolve(null);
        let withResolvers = getDependencyResolvers(typeId);
        return await withResolvers.promise;
    }));
}
export function getDependencyResolvers(typeId) {
    let withResolvers = DependenciesToWaitFor.get(typeId);
    if (withResolvers === undefined)
        DependenciesToWaitFor.set(typeId, withResolvers = { resolvedValue: undefined, ...Promise.withResolvers() });
    return withResolvers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXR5cGUtaW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9fcHJpdmF0ZS9lbWJpbmQvZ2V0LXR5cGUtaW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxNQUFNLHFCQUFxQixHQUErRSxJQUFJLEdBQUcsRUFBeUUsQ0FBQztBQUUzTDs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxXQUFXLENBQW1FLEdBQUcsT0FBaUI7SUFFcEgsT0FBTyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQXlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBbUMsRUFBRTtRQUMzRyxJQUFJLENBQUMsTUFBTTtZQUNQLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFLLENBQUMsQ0FBQztRQUVsQyxJQUFJLGFBQWEsR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRCxPQUFPLE1BQU8sYUFBYSxDQUFDLE9BQTJDLENBQUM7SUFDNUUsQ0FBQyxDQUFDLENBQVEsQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsTUFBYztJQUNqRCxJQUFJLGFBQWEsR0FBRyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEQsSUFBSSxhQUFhLEtBQUssU0FBUztRQUMzQixxQkFBcUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLGFBQWEsR0FBRyxFQUFFLGFBQWEsRUFBRSxTQUFVLEVBQUUsR0FBRyxPQUFPLENBQUMsYUFBYSxFQUFtQyxFQUFFLENBQUMsQ0FBQztJQUNsSixPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBFbWJvdW5kUmVnaXN0ZXJlZFR5cGUsIFR5cGVJRCB9IGZyb20gXCIuL3R5cGVzLmpzXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFByb21pc2VXaXRoUmVzb2x2ZXJzQW5kVmFsdWU8VD4gZXh0ZW5kcyBQcm9taXNlV2l0aFJlc29sdmVyczxUPiB7XHJcbiAgICByZXNvbHZlZFZhbHVlOiBUO1xyXG59XHJcbmNvbnN0IERlcGVuZGVuY2llc1RvV2FpdEZvcjogTWFwPFR5cGVJRCwgUHJvbWlzZVdpdGhSZXNvbHZlcnNBbmRWYWx1ZTxFbWJvdW5kUmVnaXN0ZXJlZFR5cGU8YW55LCBhbnk+Pj4gPSBuZXcgTWFwPFR5cGVJRCwgUHJvbWlzZVdpdGhSZXNvbHZlcnNBbmRWYWx1ZTxFbWJvdW5kUmVnaXN0ZXJlZFR5cGU8YW55LCBhbnk+Pj4oKTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBwYXJzZWQgdHlwZSBpbmZvLCBjb252ZXJ0ZXJzLCBldGMuIGZvciB0aGUgZ2l2ZW4gQysrIFJUVEkgVHlwZUlEIHBvaW50ZXIuXHJcbiAqXHJcbiAqIFBhc3NpbmcgYSBudWxsIHR5cGUgSUQgaXMgZmluZSBhbmQgd2lsbCBqdXN0IHJlc3VsdCBpbiBhIGBudWxsYCBhdCB0aGF0IHNwb3QgaW4gdGhlIHJldHVybmVkIGFycmF5LlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFR5cGVJbmZvPEUgZXh0ZW5kcyAoRW1ib3VuZFJlZ2lzdGVyZWRUeXBlPGFueSwgYW55PiB8IG51bGwgfCB1bmRlZmluZWQpW10+KC4uLnR5cGVJZHM6IG51bWJlcltdKTogUHJvbWlzZTxFPiB7XHJcblxyXG4gICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsPE5vbk51bGxhYmxlPEVbbnVtYmVyXT4+KHR5cGVJZHMubWFwKGFzeW5jICh0eXBlSWQpOiBQcm9taXNlPE5vbk51bGxhYmxlPEVbbnVtYmVyXT4+ID0+IHtcclxuICAgICAgICBpZiAoIXR5cGVJZClcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsISk7XHJcblxyXG4gICAgICAgIGxldCB3aXRoUmVzb2x2ZXJzID0gZ2V0RGVwZW5kZW5jeVJlc29sdmVycyh0eXBlSWQpO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCAod2l0aFJlc29sdmVycy5wcm9taXNlIGFzIFByb21pc2U8Tm9uTnVsbGFibGU8RVtudW1iZXJdPj4pO1xyXG4gICAgfSkpIGFzIGFueTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZGVuY3lSZXNvbHZlcnModHlwZUlkOiBudW1iZXIpOiBQcm9taXNlV2l0aFJlc29sdmVyc0FuZFZhbHVlPEVtYm91bmRSZWdpc3RlcmVkVHlwZTxhbnksIGFueT4+IHtcclxuICAgIGxldCB3aXRoUmVzb2x2ZXJzID0gRGVwZW5kZW5jaWVzVG9XYWl0Rm9yLmdldCh0eXBlSWQpO1xyXG4gICAgaWYgKHdpdGhSZXNvbHZlcnMgPT09IHVuZGVmaW5lZClcclxuICAgICAgICBEZXBlbmRlbmNpZXNUb1dhaXRGb3Iuc2V0KHR5cGVJZCwgd2l0aFJlc29sdmVycyA9IHsgcmVzb2x2ZWRWYWx1ZTogdW5kZWZpbmVkISwgLi4uUHJvbWlzZS53aXRoUmVzb2x2ZXJzPEVtYm91bmRSZWdpc3RlcmVkVHlwZTxhbnksIGFueT4+KCkgfSk7XHJcbiAgICByZXR1cm4gd2l0aFJlc29sdmVycztcclxufVxyXG4iXX0=