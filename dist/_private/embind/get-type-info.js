const DependenciesToWaitFor = new Map();
/**
 * Returns the parsed type info, converters, etc. for the given C++ RTTI TypeID pointer.
 *
 * Passing a null type ID is fine and will just result in a `null` at that spot in the returned array.
 */
export async function getTypeInfo(...typeIds) {
    return await Promise.all(typeIds.map(async (typeId) => {
        if (!typeId)
            return Promise.resolve(null);
        let withResolvers = getDependencyResolvers(typeId);
        return await withResolvers.promise;
    }));
}
export function getDependencyResolvers(typeId) {
    let withResolvers = DependenciesToWaitFor.get(typeId);
    if (withResolvers === undefined)
        DependenciesToWaitFor.set(typeId, withResolvers = { resolvedValue: undefined, ...Promise.withResolvers() });
    return withResolvers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXR5cGUtaW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9fcHJpdmF0ZS9lbWJpbmQvZ2V0LXR5cGUtaW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxNQUFNLHFCQUFxQixHQUErRSxJQUFJLEdBQUcsRUFBeUUsQ0FBQztBQUUzTDs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxXQUFXLENBQW1FLEdBQUcsT0FBaUI7SUFFcEgsT0FBTyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQXlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBbUMsRUFBRTtRQUMzRyxJQUFJLENBQUMsTUFBTTtZQUNQLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFLLENBQUMsQ0FBQztRQUVsQyxJQUFJLGFBQWEsR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRCxPQUFPLE1BQU8sYUFBYSxDQUFDLE9BQTJDLENBQUM7SUFDNUUsQ0FBQyxDQUFDLENBQVEsQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsTUFBYztJQUNqRCxJQUFJLGFBQWEsR0FBRyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEQsSUFBSSxhQUFhLEtBQUssU0FBUztRQUMzQixxQkFBcUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLGFBQWEsR0FBRyxFQUFFLGFBQWEsRUFBRSxTQUFVLEVBQUUsR0FBRyxPQUFPLENBQUMsYUFBYSxFQUFtQyxFQUFFLENBQUMsQ0FBQztJQUNsSixPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW1ib3VuZFJlZ2lzdGVyZWRUeXBlLCBUeXBlSUQgfSBmcm9tIFwiLi90eXBlcy5qc1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQcm9taXNlV2l0aFJlc29sdmVyc0FuZFZhbHVlPFQ+IGV4dGVuZHMgUHJvbWlzZVdpdGhSZXNvbHZlcnM8VD4ge1xyXG4gICAgcmVzb2x2ZWRWYWx1ZTogVDtcclxufVxyXG5jb25zdCBEZXBlbmRlbmNpZXNUb1dhaXRGb3I6IE1hcDxUeXBlSUQsIFByb21pc2VXaXRoUmVzb2x2ZXJzQW5kVmFsdWU8RW1ib3VuZFJlZ2lzdGVyZWRUeXBlPGFueSwgYW55Pj4+ID0gbmV3IE1hcDxUeXBlSUQsIFByb21pc2VXaXRoUmVzb2x2ZXJzQW5kVmFsdWU8RW1ib3VuZFJlZ2lzdGVyZWRUeXBlPGFueSwgYW55Pj4+KCk7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgcGFyc2VkIHR5cGUgaW5mbywgY29udmVydGVycywgZXRjLiBmb3IgdGhlIGdpdmVuIEMrKyBSVFRJIFR5cGVJRCBwb2ludGVyLlxyXG4gKlxyXG4gKiBQYXNzaW5nIGEgbnVsbCB0eXBlIElEIGlzIGZpbmUgYW5kIHdpbGwganVzdCByZXN1bHQgaW4gYSBgbnVsbGAgYXQgdGhhdCBzcG90IGluIHRoZSByZXR1cm5lZCBhcnJheS5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUeXBlSW5mbzxFIGV4dGVuZHMgKEVtYm91bmRSZWdpc3RlcmVkVHlwZTxhbnksIGFueT4gfCBudWxsIHwgdW5kZWZpbmVkKVtdPiguLi50eXBlSWRzOiBudW1iZXJbXSk6IFByb21pc2U8RT4ge1xyXG5cclxuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbDxOb25OdWxsYWJsZTxFW251bWJlcl0+Pih0eXBlSWRzLm1hcChhc3luYyAodHlwZUlkKTogUHJvbWlzZTxOb25OdWxsYWJsZTxFW251bWJlcl0+PiA9PiB7XHJcbiAgICAgICAgaWYgKCF0eXBlSWQpXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCEpO1xyXG5cclxuICAgICAgICBsZXQgd2l0aFJlc29sdmVycyA9IGdldERlcGVuZGVuY3lSZXNvbHZlcnModHlwZUlkKTtcclxuICAgICAgICByZXR1cm4gYXdhaXQgKHdpdGhSZXNvbHZlcnMucHJvbWlzZSBhcyBQcm9taXNlPE5vbk51bGxhYmxlPEVbbnVtYmVyXT4+KTtcclxuICAgIH0pKSBhcyBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRlbmN5UmVzb2x2ZXJzKHR5cGVJZDogbnVtYmVyKTogUHJvbWlzZVdpdGhSZXNvbHZlcnNBbmRWYWx1ZTxFbWJvdW5kUmVnaXN0ZXJlZFR5cGU8YW55LCBhbnk+PiB7XHJcbiAgICBsZXQgd2l0aFJlc29sdmVycyA9IERlcGVuZGVuY2llc1RvV2FpdEZvci5nZXQodHlwZUlkKTtcclxuICAgIGlmICh3aXRoUmVzb2x2ZXJzID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgRGVwZW5kZW5jaWVzVG9XYWl0Rm9yLnNldCh0eXBlSWQsIHdpdGhSZXNvbHZlcnMgPSB7IHJlc29sdmVkVmFsdWU6IHVuZGVmaW5lZCEsIC4uLlByb21pc2Uud2l0aFJlc29sdmVyczxFbWJvdW5kUmVnaXN0ZXJlZFR5cGU8YW55LCBhbnk+PigpIH0pO1xyXG4gICAgcmV0dXJuIHdpdGhSZXNvbHZlcnM7XHJcbn1cclxuIl19