import { getDependencyResolvers } from "./get-type-info.js";
/**
 * Convenience function to set a value on the `embind` object.  Not strictly necessary to call.
 * @param impl
 * @param name
 * @param value
 */
export function registerEmbound(impl, name, value) {
    impl.embind[name] = value;
}
/**
 * Call when a type is ready to be used by other types.
 *
 * For things like `int` or `bool`, this can just be called immediately upon registration.
 * @param info
 */
export function finalizeType(impl, name, parsedTypeInfo) {
    const info = { name, ...parsedTypeInfo };
    let withResolvers = getDependencyResolvers(info.typeId);
    withResolvers.resolve(withResolvers.resolvedValue = info);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluYWxpemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvX3ByaXZhdGUvZW1iaW5kL2ZpbmFsaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRzVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBSSxJQUEwQixFQUFFLElBQVksRUFBRSxLQUFRO0lBQ2hGLElBQUksQ0FBQyxNQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ3ZDLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQTBCLElBQTBCLEVBQUUsSUFBWSxFQUFFLGNBQTBEO0lBQ3RKLE1BQU0sSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsY0FBYyxFQUFFLENBQUM7SUFDekMsSUFBSSxhQUFhLEdBQUcsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELGFBQWEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM5RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5zdGFudGlhdGVkV2FzaSB9IGZyb20gXCIuLi8uLi9pbnN0YW50aWF0ZWQtd2FzaS5qc1wiO1xyXG5pbXBvcnQgeyBnZXREZXBlbmRlbmN5UmVzb2x2ZXJzIH0gZnJvbSBcIi4vZ2V0LXR5cGUtaW5mby5qc1wiO1xyXG5pbXBvcnQgeyBFbWJvdW5kUmVnaXN0ZXJlZFR5cGUsIFdpcmVUeXBlcyB9IGZyb20gXCIuL3R5cGVzLmpzXCI7XHJcblxyXG4vKipcclxuICogQ29udmVuaWVuY2UgZnVuY3Rpb24gdG8gc2V0IGEgdmFsdWUgb24gdGhlIGBlbWJpbmRgIG9iamVjdC4gIE5vdCBzdHJpY3RseSBuZWNlc3NhcnkgdG8gY2FsbC5cclxuICogQHBhcmFtIGltcGwgXHJcbiAqIEBwYXJhbSBuYW1lIFxyXG4gKiBAcGFyYW0gdmFsdWUgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJFbWJvdW5kPFQ+KGltcGw6IEluc3RhbnRpYXRlZFdhc2k8e30+LCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBUKTogdm9pZCB7XHJcbiAgICAoaW1wbC5lbWJpbmQgYXMgYW55KVtuYW1lXSA9IHZhbHVlO1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsbCB3aGVuIGEgdHlwZSBpcyByZWFkeSB0byBiZSB1c2VkIGJ5IG90aGVyIHR5cGVzLlxyXG4gKiBcclxuICogRm9yIHRoaW5ncyBsaWtlIGBpbnRgIG9yIGBib29sYCwgdGhpcyBjYW4ganVzdCBiZSBjYWxsZWQgaW1tZWRpYXRlbHkgdXBvbiByZWdpc3RyYXRpb24uXHJcbiAqIEBwYXJhbSBpbmZvIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmFsaXplVHlwZTxXVCBleHRlbmRzIFdpcmVUeXBlcywgVD4oaW1wbDogSW5zdGFudGlhdGVkV2FzaTx7fT4sIG5hbWU6IHN0cmluZywgcGFyc2VkVHlwZUluZm86IE9taXQ8RW1ib3VuZFJlZ2lzdGVyZWRUeXBlPFdULCBUPiwgXCJuYW1lXCI+KTogdm9pZCB7XHJcbiAgICBjb25zdCBpbmZvID0geyBuYW1lLCAuLi5wYXJzZWRUeXBlSW5mbyB9O1xyXG4gICAgbGV0IHdpdGhSZXNvbHZlcnMgPSBnZXREZXBlbmRlbmN5UmVzb2x2ZXJzKGluZm8udHlwZUlkKTtcclxuICAgIHdpdGhSZXNvbHZlcnMucmVzb2x2ZSh3aXRoUmVzb2x2ZXJzLnJlc29sdmVkVmFsdWUgPSBpbmZvKTtcclxufVxyXG4iXX0=