import { InstantiatedWasm } from "../../wasm.js";
import { getDependencyResolvers } from "./get-type-info.js";
/**
 * Convenience function to set a value on the `embind` object.  Not strictly necessary to call.
 * @param impl
 * @param name
 * @param value
 */
export function registerEmbound(impl, name, value) {
    impl.embind[name] = value;
}
/**
 * Call when a type is ready to be used by other types.
 *
 * For things like `int` or `bool`, this can just be called immediately upon registration.
 * @param info
 */
export function finalizeType(impl, name, parsedTypeInfo) {
    const info = { name, ...parsedTypeInfo };
    let withResolvers = getDependencyResolvers(info.typeId);
    withResolvers.resolve(withResolvers.resolvedValue = info);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluYWxpemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvX3ByaXZhdGUvZW1iaW5kL2ZpbmFsaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUc1RDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUksSUFBc0IsRUFBRSxJQUFZLEVBQUUsS0FBUTtJQUM1RSxJQUFJLENBQUMsTUFBYyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUN2QyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsWUFBWSxDQUEwQixJQUFzQixFQUFFLElBQVksRUFBRSxjQUEwRDtJQUNsSixNQUFNLElBQUksR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLGNBQWMsRUFBRSxDQUFDO0lBQ3pDLElBQUksYUFBYSxHQUFHLHNCQUFzQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RCxhQUFhLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDOUQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluc3RhbnRpYXRlZFdhc20gfSBmcm9tIFwiLi4vLi4vd2FzbS5qc1wiO1xyXG5pbXBvcnQgeyBnZXREZXBlbmRlbmN5UmVzb2x2ZXJzIH0gZnJvbSBcIi4vZ2V0LXR5cGUtaW5mby5qc1wiO1xyXG5pbXBvcnQgdHlwZSB7IEVtYm91bmRSZWdpc3RlcmVkVHlwZSwgV2lyZVR5cGVzIH0gZnJvbSBcIi4vdHlwZXMuanNcIjtcclxuXHJcbi8qKlxyXG4gKiBDb252ZW5pZW5jZSBmdW5jdGlvbiB0byBzZXQgYSB2YWx1ZSBvbiB0aGUgYGVtYmluZGAgb2JqZWN0LiAgTm90IHN0cmljdGx5IG5lY2Vzc2FyeSB0byBjYWxsLlxyXG4gKiBAcGFyYW0gaW1wbCBcclxuICogQHBhcmFtIG5hbWUgXHJcbiAqIEBwYXJhbSB2YWx1ZSBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckVtYm91bmQ8VD4oaW1wbDogSW5zdGFudGlhdGVkV2FzbSwgbmFtZTogc3RyaW5nLCB2YWx1ZTogVCk6IHZvaWQge1xyXG4gICAgKGltcGwuZW1iaW5kIGFzIGFueSlbbmFtZV0gPSB2YWx1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGwgd2hlbiBhIHR5cGUgaXMgcmVhZHkgdG8gYmUgdXNlZCBieSBvdGhlciB0eXBlcy5cclxuICogXHJcbiAqIEZvciB0aGluZ3MgbGlrZSBgaW50YCBvciBgYm9vbGAsIHRoaXMgY2FuIGp1c3QgYmUgY2FsbGVkIGltbWVkaWF0ZWx5IHVwb24gcmVnaXN0cmF0aW9uLlxyXG4gKiBAcGFyYW0gaW5mbyBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5hbGl6ZVR5cGU8V1QgZXh0ZW5kcyBXaXJlVHlwZXMsIFQ+KGltcGw6IEluc3RhbnRpYXRlZFdhc20sIG5hbWU6IHN0cmluZywgcGFyc2VkVHlwZUluZm86IE9taXQ8RW1ib3VuZFJlZ2lzdGVyZWRUeXBlPFdULCBUPiwgXCJuYW1lXCI+KTogdm9pZCB7XHJcbiAgICBjb25zdCBpbmZvID0geyBuYW1lLCAuLi5wYXJzZWRUeXBlSW5mbyB9O1xyXG4gICAgbGV0IHdpdGhSZXNvbHZlcnMgPSBnZXREZXBlbmRlbmN5UmVzb2x2ZXJzKGluZm8udHlwZUlkKTtcclxuICAgIHdpdGhSZXNvbHZlcnMucmVzb2x2ZSh3aXRoUmVzb2x2ZXJzLnJlc29sdmVkVmFsdWUgPSBpbmZvKTtcclxufVxyXG4iXX0=