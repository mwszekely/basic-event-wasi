import { runDestructors } from "../_private/embind/destructors.js";
import { finalizeType } from "../_private/embind/finalize.js";
import { getTableFunction } from "../_private/embind/get-table-function.js";
import { _embind_finalize_composite_elements, compositeRegistrations } from "../_private/embind/register-composite.js";
import { _embind_register } from "../_private/embind/register.js";
import { readLatin1String } from "../_private/string.js";
import { InstantiatedWasm } from "../wasm.js";
/**
 * This function is called first, to start the registration of a struct and all its fields.
 */
export function _embind_register_value_object(rawType, namePtr, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
    compositeRegistrations.set(rawType, {
        namePtr,
        _constructor: getTableFunction(this, constructorSignature, rawConstructor),
        _destructor: getTableFunction(this, destructorSignature, rawDestructor),
        elements: [],
    });
}
/**
 * This function is called once per field, after `_embind_register_value_object` and before `_embind_finalize_value_object`.
 */
export function _embind_register_value_object_field(rawTypePtr, fieldName, getterReturnTypeId, getterSignature, getter, getterContext, setterArgumentTypeId, setterSignature, setter, setterContext) {
    compositeRegistrations.get(rawTypePtr).elements.push({
        name: readLatin1String(this, fieldName),
        getterContext,
        setterContext,
        getterReturnTypeId,
        setterArgumentTypeId,
        wasmGetter: getTableFunction(this, getterSignature, getter),
        wasmSetter: getTableFunction(this, setterSignature, setter),
    });
}
/**
 * Called after all other object registration functions are called; this contains the actual registration code.
 */
export function _embind_finalize_value_object(rawTypePtr) {
    const reg = compositeRegistrations.get(rawTypePtr);
    compositeRegistrations.delete(rawTypePtr);
    _embind_register(this, reg.namePtr, async (name) => {
        const fieldRecords = await _embind_finalize_composite_elements(reg.elements);
        finalizeType(this, name, {
            typeId: rawTypePtr,
            fromWireType: (ptr) => {
                const elementDestructors = [];
                const ret = {};
                for (let i = 0; i < reg.elements.length; ++i) {
                    const field = fieldRecords[i];
                    const { jsValue, wireValue, stackDestructor } = fieldRecords[i].read(ptr);
                    elementDestructors.push(() => stackDestructor?.(jsValue, wireValue));
                    Object.defineProperty(ret, field.name, {
                        value: jsValue,
                        writable: false,
                        configurable: false,
                        enumerable: true,
                    });
                }
                Object.freeze(ret);
                return {
                    jsValue: ret,
                    wireValue: ptr,
                    stackDestructor: () => {
                        runDestructors(elementDestructors);
                        reg._destructor(ptr);
                    }
                };
            },
            toWireType: (o) => {
                const ptr = reg._constructor();
                const elementDestructors = [];
                for (const field of fieldRecords) {
                    const { jsValue, wireValue, stackDestructor } = field.write(ptr, o[field.name]);
                    elementDestructors.push(() => stackDestructor?.(jsValue, wireValue));
                }
                return {
                    wireValue: ptr,
                    jsValue: o,
                    stackDestructor: () => {
                        runDestructors(elementDestructors);
                        reg._destructor(ptr);
                    }
                };
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,