import { finalizeType, registerEmbound } from "../_private/embind/finalize.js";
import { _embind_register } from "../_private/embind/register.js";
const AllEnums = {};
export function _embind_register_enum(typePtr, namePtr, size, isSigned) {
    _embind_register(this, namePtr, async (name) => {
        // Create the enum object that the user will inspect to look for enum values
        AllEnums[typePtr] = {};
        // Mark this type as ready to be used by other types 
        // (even if we don't have the enum values yet, enum values
        // themselves aren't used by any registration functions.)
        finalizeType(this, name, {
            typeId: typePtr,
            fromWireType: (wireValue) => { return { wireValue, jsValue: wireValue }; },
            toWireType: (jsValue) => { return { wireValue: jsValue, jsValue }; }
        });
        // Make this type available for the user
        registerEmbound(this, name, AllEnums[typePtr]);
    });
}
export function _embind_register_enum_value(rawEnumType, namePtr, enumValue) {
    _embind_register(this, namePtr, async (name) => {
        // Just add this name's value to the existing enum type.
        AllEnums[rawEnumType][name] = enumValue;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iaW5kX3JlZ2lzdGVyX2VudW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW52L2VtYmluZF9yZWdpc3Rlcl9lbnVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFHbEUsTUFBTSxRQUFRLEdBQTJDLEVBQUUsQ0FBQztBQUU1RCxNQUFNLFVBQVUscUJBQXFCLENBQXlCLE9BQWUsRUFBRSxPQUFlLEVBQUUsSUFBWSxFQUFFLFFBQWlCO0lBQzNILGdCQUFnQixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1FBRTNDLDRFQUE0RTtRQUM1RSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRXZCLHFEQUFxRDtRQUNyRCwwREFBMEQ7UUFDMUQseURBQXlEO1FBQ3pELFlBQVksQ0FBaUIsSUFBSSxFQUFFLElBQUksRUFBRTtZQUNyQyxNQUFNLEVBQUUsT0FBTztZQUNmLFlBQVksRUFBRSxDQUFDLFNBQVMsRUFBRSxFQUFFLEdBQUcsT0FBTyxFQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hFLFVBQVUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLEdBQUcsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUEsQ0FBQyxDQUFDO1NBQ3RFLENBQUMsQ0FBQztRQUVILHdDQUF3QztRQUN4QyxlQUFlLENBQUMsSUFBSSxFQUFFLElBQWEsRUFBRSxRQUFRLENBQUMsT0FBYyxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFHRCxNQUFNLFVBQVUsMkJBQTJCLENBQXlCLFdBQW1CLEVBQUUsT0FBZSxFQUFFLFNBQWlCO0lBQ3ZILGdCQUFnQixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQzNDLHdEQUF3RDtRQUN4RCxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBQzVDLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbmFsaXplVHlwZSwgcmVnaXN0ZXJFbWJvdW5kIH0gZnJvbSBcIi4uL19wcml2YXRlL2VtYmluZC9maW5hbGl6ZS5qc1wiO1xyXG5pbXBvcnQgeyBfZW1iaW5kX3JlZ2lzdGVyIH0gZnJvbSBcIi4uL19wcml2YXRlL2VtYmluZC9yZWdpc3Rlci5qc1wiO1xyXG5pbXBvcnQgdHlwZSB7IEluc3RhbnRpYXRlZFdhc20gfSBmcm9tIFwiLi4vd2FzbS5qc1wiO1xyXG5cclxuY29uc3QgQWxsRW51bXM6IFJlY29yZDxudW1iZXIsIFJlY29yZDxzdHJpbmcsIG51bWJlcj4+ID0ge307XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX2VtYmluZF9yZWdpc3Rlcl9lbnVtKHRoaXM6IEluc3RhbnRpYXRlZFdhc20sIHR5cGVQdHI6IG51bWJlciwgbmFtZVB0cjogbnVtYmVyLCBzaXplOiBudW1iZXIsIGlzU2lnbmVkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBfZW1iaW5kX3JlZ2lzdGVyKHRoaXMsIG5hbWVQdHIsIGFzeW5jIChuYW1lKSA9PiB7XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgZW51bSBvYmplY3QgdGhhdCB0aGUgdXNlciB3aWxsIGluc3BlY3QgdG8gbG9vayBmb3IgZW51bSB2YWx1ZXNcclxuICAgICAgICBBbGxFbnVtc1t0eXBlUHRyXSA9IHt9O1xyXG5cclxuICAgICAgICAvLyBNYXJrIHRoaXMgdHlwZSBhcyByZWFkeSB0byBiZSB1c2VkIGJ5IG90aGVyIHR5cGVzIFxyXG4gICAgICAgIC8vIChldmVuIGlmIHdlIGRvbid0IGhhdmUgdGhlIGVudW0gdmFsdWVzIHlldCwgZW51bSB2YWx1ZXNcclxuICAgICAgICAvLyB0aGVtc2VsdmVzIGFyZW4ndCB1c2VkIGJ5IGFueSByZWdpc3RyYXRpb24gZnVuY3Rpb25zLilcclxuICAgICAgICBmaW5hbGl6ZVR5cGU8bnVtYmVyLCBudW1iZXI+KHRoaXMsIG5hbWUsIHtcclxuICAgICAgICAgICAgdHlwZUlkOiB0eXBlUHRyLFxyXG4gICAgICAgICAgICBmcm9tV2lyZVR5cGU6ICh3aXJlVmFsdWUpID0+IHsgcmV0dXJuIHt3aXJlVmFsdWUsIGpzVmFsdWU6IHdpcmVWYWx1ZX07IH0sXHJcbiAgICAgICAgICAgIHRvV2lyZVR5cGU6IChqc1ZhbHVlKSA9PiB7IHJldHVybiB7IHdpcmVWYWx1ZToganNWYWx1ZSwganNWYWx1ZSB9IH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gTWFrZSB0aGlzIHR5cGUgYXZhaWxhYmxlIGZvciB0aGUgdXNlclxyXG4gICAgICAgIHJlZ2lzdGVyRW1ib3VuZCh0aGlzLCBuYW1lIGFzIG5ldmVyLCBBbGxFbnVtc1t0eXBlUHRyIGFzIGFueV0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX2VtYmluZF9yZWdpc3Rlcl9lbnVtX3ZhbHVlKHRoaXM6IEluc3RhbnRpYXRlZFdhc20sIHJhd0VudW1UeXBlOiBudW1iZXIsIG5hbWVQdHI6IG51bWJlciwgZW51bVZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIF9lbWJpbmRfcmVnaXN0ZXIodGhpcywgbmFtZVB0ciwgYXN5bmMgKG5hbWUpID0+IHtcclxuICAgICAgICAvLyBKdXN0IGFkZCB0aGlzIG5hbWUncyB2YWx1ZSB0byB0aGUgZXhpc3RpbmcgZW51bSB0eXBlLlxyXG4gICAgICAgIEFsbEVudW1zW3Jhd0VudW1UeXBlXVtuYW1lXSA9IGVudW1WYWx1ZTtcclxuICAgIH0pXHJcbn0iXX0=