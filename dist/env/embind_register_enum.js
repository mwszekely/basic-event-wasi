import { finalizeType, registerEmbound } from "../_private/embind/finalize.js";
import { _embind_register } from "../_private/embind/register.js";
const AllEnums = {};
export function _embind_register_enum(typePtr, namePtr, size, isSigned) {
    _embind_register(this, namePtr, async (name) => {
        // Create the enum object that the user will inspect to look for enum values
        AllEnums[typePtr] = {};
        // Mark this type as ready to be used by other types 
        // (even if we don't have the enum values yet, enum values
        // themselves aren't used by any registration functions.)
        finalizeType(this, name, {
            typeId: typePtr,
            fromWireType: (wireValue) => { return { wireValue, jsValue: wireValue }; },
            toWireType: (jsValue) => { return { wireValue: jsValue, jsValue }; }
        });
        // Make this type available for the user
        registerEmbound(this, name, AllEnums[typePtr]);
    });
}
export function _embind_register_enum_value(rawEnumType, namePtr, enumValue) {
    _embind_register(this, namePtr, async (name) => {
        // Just add this name's value to the existing enum type.
        AllEnums[rawEnumType][name] = enumValue;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iaW5kX3JlZ2lzdGVyX2VudW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW52L2VtYmluZF9yZWdpc3Rlcl9lbnVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFHbEUsTUFBTSxRQUFRLEdBQTJDLEVBQUUsQ0FBQztBQUU1RCxNQUFNLFVBQVUscUJBQXFCLENBQTZCLE9BQWUsRUFBRSxPQUFlLEVBQUUsSUFBWSxFQUFFLFFBQWlCO0lBQy9ILGdCQUFnQixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1FBRTNDLDRFQUE0RTtRQUM1RSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRXZCLHFEQUFxRDtRQUNyRCwwREFBMEQ7UUFDMUQseURBQXlEO1FBQ3pELFlBQVksQ0FBaUIsSUFBSSxFQUFFLElBQUksRUFBRTtZQUNyQyxNQUFNLEVBQUUsT0FBTztZQUNmLFlBQVksRUFBRSxDQUFDLFNBQVMsRUFBRSxFQUFFLEdBQUcsT0FBTyxFQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hFLFVBQVUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLEdBQUcsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUEsQ0FBQyxDQUFDO1NBQ3RFLENBQUMsQ0FBQztRQUVILHdDQUF3QztRQUN4QyxlQUFlLENBQUMsSUFBSSxFQUFFLElBQWEsRUFBRSxRQUFRLENBQUMsT0FBYyxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFHRCxNQUFNLFVBQVUsMkJBQTJCLENBQTZCLFdBQW1CLEVBQUUsT0FBZSxFQUFFLFNBQWlCO0lBQzNILGdCQUFnQixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQzNDLHdEQUF3RDtRQUN4RCxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBQzVDLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbmFsaXplVHlwZSwgcmVnaXN0ZXJFbWJvdW5kIH0gZnJvbSBcIi4uL19wcml2YXRlL2VtYmluZC9maW5hbGl6ZS5qc1wiO1xyXG5pbXBvcnQgeyBfZW1iaW5kX3JlZ2lzdGVyIH0gZnJvbSBcIi4uL19wcml2YXRlL2VtYmluZC9yZWdpc3Rlci5qc1wiO1xyXG5pbXBvcnQgdHlwZSB7IEluc3RhbnRpYXRlZFdhc2kgfSBmcm9tIFwiLi4vaW5zdGFudGlhdGVkLXdhc2kuanNcIjtcclxuXHJcbmNvbnN0IEFsbEVudW1zOiBSZWNvcmQ8bnVtYmVyLCBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+PiA9IHt9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9lbWJpbmRfcmVnaXN0ZXJfZW51bSh0aGlzOiBJbnN0YW50aWF0ZWRXYXNpPHt9PiwgdHlwZVB0cjogbnVtYmVyLCBuYW1lUHRyOiBudW1iZXIsIHNpemU6IG51bWJlciwgaXNTaWduZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIF9lbWJpbmRfcmVnaXN0ZXIodGhpcywgbmFtZVB0ciwgYXN5bmMgKG5hbWUpID0+IHtcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBlbnVtIG9iamVjdCB0aGF0IHRoZSB1c2VyIHdpbGwgaW5zcGVjdCB0byBsb29rIGZvciBlbnVtIHZhbHVlc1xyXG4gICAgICAgIEFsbEVudW1zW3R5cGVQdHJdID0ge307XHJcblxyXG4gICAgICAgIC8vIE1hcmsgdGhpcyB0eXBlIGFzIHJlYWR5IHRvIGJlIHVzZWQgYnkgb3RoZXIgdHlwZXMgXHJcbiAgICAgICAgLy8gKGV2ZW4gaWYgd2UgZG9uJ3QgaGF2ZSB0aGUgZW51bSB2YWx1ZXMgeWV0LCBlbnVtIHZhbHVlc1xyXG4gICAgICAgIC8vIHRoZW1zZWx2ZXMgYXJlbid0IHVzZWQgYnkgYW55IHJlZ2lzdHJhdGlvbiBmdW5jdGlvbnMuKVxyXG4gICAgICAgIGZpbmFsaXplVHlwZTxudW1iZXIsIG51bWJlcj4odGhpcywgbmFtZSwge1xyXG4gICAgICAgICAgICB0eXBlSWQ6IHR5cGVQdHIsXHJcbiAgICAgICAgICAgIGZyb21XaXJlVHlwZTogKHdpcmVWYWx1ZSkgPT4geyByZXR1cm4ge3dpcmVWYWx1ZSwganNWYWx1ZTogd2lyZVZhbHVlfTsgfSxcclxuICAgICAgICAgICAgdG9XaXJlVHlwZTogKGpzVmFsdWUpID0+IHsgcmV0dXJuIHsgd2lyZVZhbHVlOiBqc1ZhbHVlLCBqc1ZhbHVlIH0gfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBNYWtlIHRoaXMgdHlwZSBhdmFpbGFibGUgZm9yIHRoZSB1c2VyXHJcbiAgICAgICAgcmVnaXN0ZXJFbWJvdW5kKHRoaXMsIG5hbWUgYXMgbmV2ZXIsIEFsbEVudW1zW3R5cGVQdHIgYXMgYW55XSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfZW1iaW5kX3JlZ2lzdGVyX2VudW1fdmFsdWUodGhpczogSW5zdGFudGlhdGVkV2FzaTx7fT4sIHJhd0VudW1UeXBlOiBudW1iZXIsIG5hbWVQdHI6IG51bWJlciwgZW51bVZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIF9lbWJpbmRfcmVnaXN0ZXIodGhpcywgbmFtZVB0ciwgYXN5bmMgKG5hbWUpID0+IHtcclxuICAgICAgICAvLyBKdXN0IGFkZCB0aGlzIG5hbWUncyB2YWx1ZSB0byB0aGUgZXhpc3RpbmcgZW51bSB0eXBlLlxyXG4gICAgICAgIEFsbEVudW1zW3Jhd0VudW1UeXBlXVtuYW1lXSA9IGVudW1WYWx1ZTtcclxuICAgIH0pXHJcbn0iXX0=