import { finalizeType, registerEmbound } from "../_private/embind/finalize.js";
import { _embind_register } from "../_private/embind/register.js";
const AllEnums = {};
export function _embind_register_enum(typePtr, namePtr, _size, _isSigned) {
    _embind_register(this, namePtr, (name) => {
        // Create the enum object that the user will inspect to look for enum values
        AllEnums[typePtr] = {};
        // Mark this type as ready to be used by other types 
        // (even if we don't have the enum values yet, enum values
        // themselves aren't used by any registration functions.)
        finalizeType(this, name, {
            typeId: typePtr,
            fromWireType: (wireValue) => { return { wireValue, jsValue: wireValue }; },
            toWireType: (jsValue) => { return { wireValue: jsValue, jsValue }; }
        });
        // Make this type available for the user
        registerEmbound(this, name, AllEnums[typePtr]);
    });
}
export function _embind_register_enum_value(rawEnumType, namePtr, enumValue) {
    _embind_register(this, namePtr, (name) => {
        // Just add this name's value to the existing enum type.
        AllEnums[rawEnumType][name] = enumValue;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iaW5kX3JlZ2lzdGVyX2VudW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW52L2VtYmluZF9yZWdpc3Rlcl9lbnVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFHbEUsTUFBTSxRQUFRLEdBQTJDLEVBQUUsQ0FBQztBQUU1RCxNQUFNLFVBQVUscUJBQXFCLENBQXlCLE9BQWUsRUFBRSxPQUFlLEVBQUUsS0FBYSxFQUFFLFNBQWtCO0lBQzdILGdCQUFnQixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUVyQyw0RUFBNEU7UUFDNUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUV2QixxREFBcUQ7UUFDckQsMERBQTBEO1FBQzFELHlEQUF5RDtRQUN6RCxZQUFZLENBQWlCLElBQUksRUFBRSxJQUFJLEVBQUU7WUFDckMsTUFBTSxFQUFFLE9BQU87WUFDZixZQUFZLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxHQUFHLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxRSxVQUFVLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxHQUFHLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFBLENBQUMsQ0FBQztTQUN0RSxDQUFDLENBQUM7UUFFSCx3Q0FBd0M7UUFDeEMsZUFBZSxDQUFDLElBQUksRUFBRSxJQUFhLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBR0QsTUFBTSxVQUFVLDJCQUEyQixDQUF5QixXQUFtQixFQUFFLE9BQWUsRUFBRSxTQUFpQjtJQUN2SCxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDckMsd0RBQXdEO1FBQ3hELFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmluYWxpemVUeXBlLCByZWdpc3RlckVtYm91bmQgfSBmcm9tIFwiLi4vX3ByaXZhdGUvZW1iaW5kL2ZpbmFsaXplLmpzXCI7XHJcbmltcG9ydCB7IF9lbWJpbmRfcmVnaXN0ZXIgfSBmcm9tIFwiLi4vX3ByaXZhdGUvZW1iaW5kL3JlZ2lzdGVyLmpzXCI7XHJcbmltcG9ydCB0eXBlIHsgSW5zdGFudGlhdGVkV2FzbSB9IGZyb20gXCIuLi93YXNtLmpzXCI7XHJcblxyXG5jb25zdCBBbGxFbnVtczogUmVjb3JkPG51bWJlciwgUmVjb3JkPHN0cmluZywgbnVtYmVyPj4gPSB7fTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfZW1iaW5kX3JlZ2lzdGVyX2VudW0odGhpczogSW5zdGFudGlhdGVkV2FzbSwgdHlwZVB0cjogbnVtYmVyLCBuYW1lUHRyOiBudW1iZXIsIF9zaXplOiBudW1iZXIsIF9pc1NpZ25lZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgX2VtYmluZF9yZWdpc3Rlcih0aGlzLCBuYW1lUHRyLCAobmFtZSkgPT4ge1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgdGhlIGVudW0gb2JqZWN0IHRoYXQgdGhlIHVzZXIgd2lsbCBpbnNwZWN0IHRvIGxvb2sgZm9yIGVudW0gdmFsdWVzXHJcbiAgICAgICAgQWxsRW51bXNbdHlwZVB0cl0gPSB7fTtcclxuXHJcbiAgICAgICAgLy8gTWFyayB0aGlzIHR5cGUgYXMgcmVhZHkgdG8gYmUgdXNlZCBieSBvdGhlciB0eXBlcyBcclxuICAgICAgICAvLyAoZXZlbiBpZiB3ZSBkb24ndCBoYXZlIHRoZSBlbnVtIHZhbHVlcyB5ZXQsIGVudW0gdmFsdWVzXHJcbiAgICAgICAgLy8gdGhlbXNlbHZlcyBhcmVuJ3QgdXNlZCBieSBhbnkgcmVnaXN0cmF0aW9uIGZ1bmN0aW9ucy4pXHJcbiAgICAgICAgZmluYWxpemVUeXBlPG51bWJlciwgbnVtYmVyPih0aGlzLCBuYW1lLCB7XHJcbiAgICAgICAgICAgIHR5cGVJZDogdHlwZVB0cixcclxuICAgICAgICAgICAgZnJvbVdpcmVUeXBlOiAod2lyZVZhbHVlKSA9PiB7IHJldHVybiB7IHdpcmVWYWx1ZSwganNWYWx1ZTogd2lyZVZhbHVlIH07IH0sXHJcbiAgICAgICAgICAgIHRvV2lyZVR5cGU6IChqc1ZhbHVlKSA9PiB7IHJldHVybiB7IHdpcmVWYWx1ZToganNWYWx1ZSwganNWYWx1ZSB9IH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gTWFrZSB0aGlzIHR5cGUgYXZhaWxhYmxlIGZvciB0aGUgdXNlclxyXG4gICAgICAgIHJlZ2lzdGVyRW1ib3VuZCh0aGlzLCBuYW1lIGFzIG5ldmVyLCBBbGxFbnVtc1t0eXBlUHRyXSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfZW1iaW5kX3JlZ2lzdGVyX2VudW1fdmFsdWUodGhpczogSW5zdGFudGlhdGVkV2FzbSwgcmF3RW51bVR5cGU6IG51bWJlciwgbmFtZVB0cjogbnVtYmVyLCBlbnVtVmFsdWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgX2VtYmluZF9yZWdpc3Rlcih0aGlzLCBuYW1lUHRyLCAobmFtZSkgPT4ge1xyXG4gICAgICAgIC8vIEp1c3QgYWRkIHRoaXMgbmFtZSdzIHZhbHVlIHRvIHRoZSBleGlzdGluZyBlbnVtIHR5cGUuXHJcbiAgICAgICAgQWxsRW51bXNbcmF3RW51bVR5cGVdW25hbWVdID0gZW51bVZhbHVlO1xyXG4gICAgfSlcclxufSJdfQ==