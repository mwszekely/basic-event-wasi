import { createGlueFunction } from "../_private/embind/create-glue-function.js";
import { readArrayOfTypes } from "../_private/embind/read-array-of-types.js";
import { _embind_register } from "../_private/embind/register.js";
/**
 *
 * @param namePtr A pointer to the null-terminated name of this export.
 * @param argCount The number of arguments the WASM function takes
 * @param rawArgTypesPtr A pointer to an array of numbers, each representing a TypeID. The 0th value is the return type, the rest are the arguments themselves.
 * @param signature A pointer to a null-terminated string representing the WASM signature of the function; e.g. "`p`", "`fpp`", "`vp`", "`fpfff`", etc.
 * @param rawInvokerPtr The pointer to the function in WASM.
 * @param functionIndex The index of the function in the `WebAssembly.Table` that's exported.
 * @param isAsync Unused...probably
 */
export function _embind_register_function(namePtr, argCount, rawArgTypesPtr, signature, rawInvokerPtr, functionIndex, isAsync) {
    const [returnTypeId, ...argTypeIds] = readArrayOfTypes(this, argCount, rawArgTypesPtr);
    _embind_register(this, namePtr, async (name) => {
        this.embind[name] = await createGlueFunction(this, name, returnTypeId, argTypeIds, signature, rawInvokerPtr, functionIndex);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iaW5kX3JlZ2lzdGVyX2Z1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Vudi9lbWJpbmRfcmVnaXN0ZXJfZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDaEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFJbEU7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxVQUFVLHlCQUF5QixDQUVyQyxPQUFlLEVBQ2YsUUFBZ0IsRUFDaEIsY0FBc0IsRUFDdEIsU0FBaUIsRUFDakIsYUFBcUIsRUFDckIsYUFBcUIsRUFDckIsT0FBZ0I7SUFFaEIsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLFVBQVUsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFFdkYsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDMUMsSUFBSSxDQUFDLE1BQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLGtCQUFrQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3pJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUdsdWVGdW5jdGlvbiB9IGZyb20gXCIuLi9fcHJpdmF0ZS9lbWJpbmQvY3JlYXRlLWdsdWUtZnVuY3Rpb24uanNcIjtcclxuaW1wb3J0IHsgcmVhZEFycmF5T2ZUeXBlcyB9IGZyb20gXCIuLi9fcHJpdmF0ZS9lbWJpbmQvcmVhZC1hcnJheS1vZi10eXBlcy5qc1wiO1xyXG5pbXBvcnQgeyBfZW1iaW5kX3JlZ2lzdGVyIH0gZnJvbSBcIi4uL19wcml2YXRlL2VtYmluZC9yZWdpc3Rlci5qc1wiO1xyXG5pbXBvcnQgdHlwZSB7IEluc3RhbnRpYXRlZFdhc20gfSBmcm9tIFwiLi4vd2FzbS5qc1wiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIG5hbWVQdHIgQSBwb2ludGVyIHRvIHRoZSBudWxsLXRlcm1pbmF0ZWQgbmFtZSBvZiB0aGlzIGV4cG9ydC5cclxuICogQHBhcmFtIGFyZ0NvdW50IFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHRoZSBXQVNNIGZ1bmN0aW9uIHRha2VzXHJcbiAqIEBwYXJhbSByYXdBcmdUeXBlc1B0ciBBIHBvaW50ZXIgdG8gYW4gYXJyYXkgb2YgbnVtYmVycywgZWFjaCByZXByZXNlbnRpbmcgYSBUeXBlSUQuIFRoZSAwdGggdmFsdWUgaXMgdGhlIHJldHVybiB0eXBlLCB0aGUgcmVzdCBhcmUgdGhlIGFyZ3VtZW50cyB0aGVtc2VsdmVzLlxyXG4gKiBAcGFyYW0gc2lnbmF0dXJlIEEgcG9pbnRlciB0byBhIG51bGwtdGVybWluYXRlZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBXQVNNIHNpZ25hdHVyZSBvZiB0aGUgZnVuY3Rpb247IGUuZy4gXCJgcGBcIiwgXCJgZnBwYFwiLCBcImB2cGBcIiwgXCJgZnBmZmZgXCIsIGV0Yy5cclxuICogQHBhcmFtIHJhd0ludm9rZXJQdHIgVGhlIHBvaW50ZXIgdG8gdGhlIGZ1bmN0aW9uIGluIFdBU00uXHJcbiAqIEBwYXJhbSBmdW5jdGlvbkluZGV4IFRoZSBpbmRleCBvZiB0aGUgZnVuY3Rpb24gaW4gdGhlIGBXZWJBc3NlbWJseS5UYWJsZWAgdGhhdCdzIGV4cG9ydGVkLlxyXG4gKiBAcGFyYW0gaXNBc3luYyBVbnVzZWQuLi5wcm9iYWJseVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9lbWJpbmRfcmVnaXN0ZXJfZnVuY3Rpb24oXHJcbiAgICB0aGlzOiBJbnN0YW50aWF0ZWRXYXNtLFxyXG4gICAgbmFtZVB0cjogbnVtYmVyLFxyXG4gICAgYXJnQ291bnQ6IG51bWJlcixcclxuICAgIHJhd0FyZ1R5cGVzUHRyOiBudW1iZXIsXHJcbiAgICBzaWduYXR1cmU6IG51bWJlcixcclxuICAgIHJhd0ludm9rZXJQdHI6IG51bWJlcixcclxuICAgIGZ1bmN0aW9uSW5kZXg6IG51bWJlcixcclxuICAgIGlzQXN5bmM6IGJvb2xlYW5cclxuKTogdm9pZCB7XHJcbiAgICBjb25zdCBbcmV0dXJuVHlwZUlkLCAuLi5hcmdUeXBlSWRzXSA9IHJlYWRBcnJheU9mVHlwZXModGhpcywgYXJnQ291bnQsIHJhd0FyZ1R5cGVzUHRyKTtcclxuXHJcbiAgICBfZW1iaW5kX3JlZ2lzdGVyKHRoaXMsIG5hbWVQdHIsIGFzeW5jIChuYW1lKSA9PiB7XHJcbiAgICAgICAgKHRoaXMuZW1iaW5kIGFzIGFueSlbbmFtZV0gPSBhd2FpdCBjcmVhdGVHbHVlRnVuY3Rpb24odGhpcywgbmFtZSwgcmV0dXJuVHlwZUlkLCBhcmdUeXBlSWRzLCBzaWduYXR1cmUsIHJhd0ludm9rZXJQdHIsIGZ1bmN0aW9uSW5kZXgpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG4iXX0=