import { createGlueFunction } from "../_private/embind/create-glue-function.js";
import { readArrayOfTypes } from "../_private/embind/read-array-of-types.js";
import { _embind_register } from "../_private/embind/register.js";
/**
 *
 * @param namePtr A pointer to the null-terminated name of this export.
 * @param argCount The number of arguments the WASM function takes
 * @param rawArgTypesPtr A pointer to an array of numbers, each representing a TypeID. The 0th value is the return type, the rest are the arguments themselves.
 * @param signature A pointer to a null-terminated string representing the WASM signature of the function; e.g. "`p`", "`fpp`", "`vp`", "`fpfff`", etc.
 * @param rawInvokerPtr The pointer to the function in WASM.
 * @param functionIndex The index of the function in the `WebAssembly.Table` that's exported.
 * @param isAsync Unused...probably
 */
export function _embind_register_function(namePtr, argCount, rawArgTypesPtr, signature, rawInvokerPtr, functionIndex, isAsync) {
    const [returnTypeId, ...argTypeIds] = readArrayOfTypes(this, argCount, rawArgTypesPtr);
    _embind_register(this, namePtr, async (name) => {
        this.embind[name] = await createGlueFunction(this, name, returnTypeId, argTypeIds, signature, rawInvokerPtr, functionIndex);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iaW5kX3JlZ2lzdGVyX2Z1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Vudi9lbWJpbmRfcmVnaXN0ZXJfZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDaEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFJbEU7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxVQUFVLHlCQUF5QixDQUVyQyxPQUFlLEVBQ2YsUUFBZ0IsRUFDaEIsY0FBc0IsRUFDdEIsU0FBaUIsRUFDakIsYUFBcUIsRUFDckIsYUFBcUIsRUFDckIsT0FBZ0I7SUFFaEIsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLFVBQVUsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFFdkYsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDMUMsSUFBSSxDQUFDLE1BQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLGtCQUFrQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3pJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUdsdWVGdW5jdGlvbiB9IGZyb20gXCIuLi9fcHJpdmF0ZS9lbWJpbmQvY3JlYXRlLWdsdWUtZnVuY3Rpb24uanNcIjtcclxuaW1wb3J0IHsgcmVhZEFycmF5T2ZUeXBlcyB9IGZyb20gXCIuLi9fcHJpdmF0ZS9lbWJpbmQvcmVhZC1hcnJheS1vZi10eXBlcy5qc1wiO1xyXG5pbXBvcnQgeyBfZW1iaW5kX3JlZ2lzdGVyIH0gZnJvbSBcIi4uL19wcml2YXRlL2VtYmluZC9yZWdpc3Rlci5qc1wiO1xyXG5pbXBvcnQgdHlwZSB7IEluc3RhbnRpYXRlZFdhc2kgfSBmcm9tIFwiLi4vaW5zdGFudGlhdGVkLXdhc2kuanNcIjtcclxuXHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSBuYW1lUHRyIEEgcG9pbnRlciB0byB0aGUgbnVsbC10ZXJtaW5hdGVkIG5hbWUgb2YgdGhpcyBleHBvcnQuXHJcbiAqIEBwYXJhbSBhcmdDb3VudCBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyB0aGUgV0FTTSBmdW5jdGlvbiB0YWtlc1xyXG4gKiBAcGFyYW0gcmF3QXJnVHlwZXNQdHIgQSBwb2ludGVyIHRvIGFuIGFycmF5IG9mIG51bWJlcnMsIGVhY2ggcmVwcmVzZW50aW5nIGEgVHlwZUlELiBUaGUgMHRoIHZhbHVlIGlzIHRoZSByZXR1cm4gdHlwZSwgdGhlIHJlc3QgYXJlIHRoZSBhcmd1bWVudHMgdGhlbXNlbHZlcy5cclxuICogQHBhcmFtIHNpZ25hdHVyZSBBIHBvaW50ZXIgdG8gYSBudWxsLXRlcm1pbmF0ZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgV0FTTSBzaWduYXR1cmUgb2YgdGhlIGZ1bmN0aW9uOyBlLmcuIFwiYHBgXCIsIFwiYGZwcGBcIiwgXCJgdnBgXCIsIFwiYGZwZmZmYFwiLCBldGMuXHJcbiAqIEBwYXJhbSByYXdJbnZva2VyUHRyIFRoZSBwb2ludGVyIHRvIHRoZSBmdW5jdGlvbiBpbiBXQVNNLlxyXG4gKiBAcGFyYW0gZnVuY3Rpb25JbmRleCBUaGUgaW5kZXggb2YgdGhlIGZ1bmN0aW9uIGluIHRoZSBgV2ViQXNzZW1ibHkuVGFibGVgIHRoYXQncyBleHBvcnRlZC5cclxuICogQHBhcmFtIGlzQXN5bmMgVW51c2VkLi4ucHJvYmFibHlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfZW1iaW5kX3JlZ2lzdGVyX2Z1bmN0aW9uKFxyXG4gICAgdGhpczogSW5zdGFudGlhdGVkV2FzaTx7fT4sXHJcbiAgICBuYW1lUHRyOiBudW1iZXIsXHJcbiAgICBhcmdDb3VudDogbnVtYmVyLFxyXG4gICAgcmF3QXJnVHlwZXNQdHI6IG51bWJlcixcclxuICAgIHNpZ25hdHVyZTogbnVtYmVyLFxyXG4gICAgcmF3SW52b2tlclB0cjogbnVtYmVyLFxyXG4gICAgZnVuY3Rpb25JbmRleDogbnVtYmVyLFxyXG4gICAgaXNBc3luYzogYm9vbGVhblxyXG4pOiB2b2lkIHtcclxuICAgIGNvbnN0IFtyZXR1cm5UeXBlSWQsIC4uLmFyZ1R5cGVJZHNdID0gcmVhZEFycmF5T2ZUeXBlcyh0aGlzLCBhcmdDb3VudCwgcmF3QXJnVHlwZXNQdHIpO1xyXG5cclxuICAgIF9lbWJpbmRfcmVnaXN0ZXIodGhpcywgbmFtZVB0ciwgYXN5bmMgKG5hbWUpID0+IHtcclxuICAgICAgICAodGhpcy5lbWJpbmQgYXMgYW55KVtuYW1lXSA9IGF3YWl0IGNyZWF0ZUdsdWVGdW5jdGlvbih0aGlzLCBuYW1lLCByZXR1cm5UeXBlSWQsIGFyZ1R5cGVJZHMsIHNpZ25hdHVyZSwgcmF3SW52b2tlclB0ciwgZnVuY3Rpb25JbmRleCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuXHJcbiJdfQ==