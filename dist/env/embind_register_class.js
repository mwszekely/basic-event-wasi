import { renameFunction } from "../_private/embind/create-named-function.js";
import { EmboundClass, EmboundClasses, Secret } from "../_private/embind/embound-class.js";
import { finalizeType } from "../_private/embind/finalize.js";
import { getTableFunction } from "../_private/embind/get-table-function.js";
import { _embind_register } from "../_private/embind/register.js";
import { InstantiatedWasm } from "../wasm.js";
export { inspectClassByPointer } from "../_private/embind/embound-class.js";
export function _embind_register_class(rawType, rawPointerType, rawConstPointerType, _baseClassRawType, _getActualTypeSignature, _getActualTypePtr, _upcastSignature, _upcastPtr, _downcastSignature, _downcastPtr, namePtr, destructorSignature, rawDestructorPtr) {
    /**
     * Note: _embind_register_class doesn't have a corresponding `finalize` version,
     * like value_array and value_object have, which is fine I guess?
     *
     * But it means that we can't just create a class pre-installed with everything it needs--
     * we need to add member functions and properties and such as we get them, and we
     * never really know when we're done.
     */
    _embind_register(this, namePtr, (name) => {
        const rawDestructorInvoker = getTableFunction(this, destructorSignature, rawDestructorPtr);
        // TODO(?) It's probably not necessary to have EmboundClasses and this.embind basically be the same exact thing.
        EmboundClasses[rawType] = this.embind[name] = renameFunction(name, 
        // Unlike the constructor, the destructor is known early enough to assign now.
        // Probably because destructors can't be overloaded by anything so there's only ever one.
        // Anyway, assign it to this new class.
        class extends EmboundClass {
            static _destructor = rawDestructorInvoker;
        });
        function fromWireType(_this) { const jsValue = new EmboundClasses[rawType](Secret, _this); return { wireValue: _this, jsValue, stackDestructor: () => jsValue[Symbol.dispose]() }; }
        function toWireType(jsObject) {
            return {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any , @typescript-eslint/no-unsafe-member-access
                wireValue: jsObject._this,
                jsValue: jsObject,
                // Note: no destructors for any of these,
                // because they're just for value-types-as-object-types.
                // Adding it here wouldn't work properly, because it assumes
                // we own the object (when converting from a JS string to std::string, we effectively do, but not here)
            };
        }
        // Wish other types included pointer TypeIDs with them too...
        finalizeType(this, name, { typeId: rawType, fromWireType, toWireType });
        finalizeType(this, `${name}*`, { typeId: rawPointerType, fromWireType, toWireType });
        finalizeType(this, `${name} const*`, { typeId: rawConstPointerType, fromWireType, toWireType });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iaW5kX3JlZ2lzdGVyX2NsYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Vudi9lbWJpbmRfcmVnaXN0ZXJfY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzNGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVsRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDOUMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFHNUUsTUFBTSxVQUFVLHNCQUFzQixDQUVsQyxPQUFlLEVBQ2YsY0FBc0IsRUFDdEIsbUJBQTJCLEVBQzNCLGlCQUF5QixFQUN6Qix1QkFBK0IsRUFDL0IsaUJBQXlCLEVBQ3pCLGdCQUF3QixFQUN4QixVQUFrQixFQUNsQixrQkFBMEIsRUFDMUIsWUFBb0IsRUFDcEIsT0FBZSxFQUNmLG1CQUEyQixFQUMzQixnQkFBd0I7SUFFeEI7Ozs7Ozs7T0FPRztJQUVILGdCQUFnQixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNyQyxNQUFNLG9CQUFvQixHQUFHLGdCQUFnQixDQUEwQixJQUFJLEVBQUUsbUJBQW1CLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUVwSCxnSEFBZ0g7UUFDaEgsY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBYSxDQUFDLEdBQUcsY0FBYyxDQUFDLElBQUk7UUFDdEUsOEVBQThFO1FBQzlFLHlGQUF5RjtRQUN6Rix1Q0FBdUM7UUFDdkMsS0FBTSxTQUFRLFlBQVk7WUFDdEIsTUFBTSxDQUFDLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQztTQUM3QyxDQUFVLENBQUM7UUFFaEIsU0FBUyxZQUFZLENBQUMsS0FBYSxJQUFnRCxNQUFNLE9BQU8sR0FBRyxJQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFBLENBQUMsQ0FBQztRQUN2TyxTQUFTLFVBQVUsQ0FBQyxRQUFzQjtZQUN0QyxPQUFPO2dCQUNILDJHQUEyRztnQkFDM0csU0FBUyxFQUFHLFFBQWdCLENBQUMsS0FBZTtnQkFDNUMsT0FBTyxFQUFFLFFBQVE7Z0JBQ2pCLHlDQUF5QztnQkFDekMsd0RBQXdEO2dCQUN4RCw0REFBNEQ7Z0JBQzVELHVHQUF1RzthQUMxRyxDQUFDO1FBQ04sQ0FBQztRQUVELDZEQUE2RDtRQUM3RCxZQUFZLENBQXVCLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQzlGLFlBQVksQ0FBdUIsSUFBSSxFQUFFLEdBQUcsSUFBSSxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQzNHLFlBQVksQ0FBdUIsSUFBSSxFQUFFLEdBQUcsSUFBSSxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDMUgsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuYW1lRnVuY3Rpb24gfSBmcm9tIFwiLi4vX3ByaXZhdGUvZW1iaW5kL2NyZWF0ZS1uYW1lZC1mdW5jdGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBFbWJvdW5kQ2xhc3MsIEVtYm91bmRDbGFzc2VzLCBTZWNyZXQgfSBmcm9tIFwiLi4vX3ByaXZhdGUvZW1iaW5kL2VtYm91bmQtY2xhc3MuanNcIjtcclxuaW1wb3J0IHsgZmluYWxpemVUeXBlIH0gZnJvbSBcIi4uL19wcml2YXRlL2VtYmluZC9maW5hbGl6ZS5qc1wiO1xyXG5pbXBvcnQgeyBnZXRUYWJsZUZ1bmN0aW9uIH0gZnJvbSBcIi4uL19wcml2YXRlL2VtYmluZC9nZXQtdGFibGUtZnVuY3Rpb24uanNcIjtcclxuaW1wb3J0IHsgX2VtYmluZF9yZWdpc3RlciB9IGZyb20gXCIuLi9fcHJpdmF0ZS9lbWJpbmQvcmVnaXN0ZXIuanNcIjtcclxuaW1wb3J0IHR5cGUgeyBXaXJlQ29udmVyc2lvblJlc3VsdCB9IGZyb20gXCIuLi9fcHJpdmF0ZS9lbWJpbmQvdHlwZXMuanNcIjtcclxuaW1wb3J0IHsgSW5zdGFudGlhdGVkV2FzbSB9IGZyb20gXCIuLi93YXNtLmpzXCI7XHJcbmV4cG9ydCB7IGluc3BlY3RDbGFzc0J5UG9pbnRlciB9IGZyb20gXCIuLi9fcHJpdmF0ZS9lbWJpbmQvZW1ib3VuZC1jbGFzcy5qc1wiO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfZW1iaW5kX3JlZ2lzdGVyX2NsYXNzKFxyXG4gICAgdGhpczogSW5zdGFudGlhdGVkV2FzbSxcclxuICAgIHJhd1R5cGU6IG51bWJlcixcclxuICAgIHJhd1BvaW50ZXJUeXBlOiBudW1iZXIsXHJcbiAgICByYXdDb25zdFBvaW50ZXJUeXBlOiBudW1iZXIsXHJcbiAgICBfYmFzZUNsYXNzUmF3VHlwZTogbnVtYmVyLFxyXG4gICAgX2dldEFjdHVhbFR5cGVTaWduYXR1cmU6IG51bWJlcixcclxuICAgIF9nZXRBY3R1YWxUeXBlUHRyOiBudW1iZXIsXHJcbiAgICBfdXBjYXN0U2lnbmF0dXJlOiBudW1iZXIsXHJcbiAgICBfdXBjYXN0UHRyOiBudW1iZXIsXHJcbiAgICBfZG93bmNhc3RTaWduYXR1cmU6IG51bWJlcixcclxuICAgIF9kb3duY2FzdFB0cjogbnVtYmVyLFxyXG4gICAgbmFtZVB0cjogbnVtYmVyLFxyXG4gICAgZGVzdHJ1Y3RvclNpZ25hdHVyZTogbnVtYmVyLFxyXG4gICAgcmF3RGVzdHJ1Y3RvclB0cjogbnVtYmVyKTogdm9pZCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOb3RlOiBfZW1iaW5kX3JlZ2lzdGVyX2NsYXNzIGRvZXNuJ3QgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgYGZpbmFsaXplYCB2ZXJzaW9uLFxyXG4gICAgICogbGlrZSB2YWx1ZV9hcnJheSBhbmQgdmFsdWVfb2JqZWN0IGhhdmUsIHdoaWNoIGlzIGZpbmUgSSBndWVzcz9cclxuICAgICAqIFxyXG4gICAgICogQnV0IGl0IG1lYW5zIHRoYXQgd2UgY2FuJ3QganVzdCBjcmVhdGUgYSBjbGFzcyBwcmUtaW5zdGFsbGVkIHdpdGggZXZlcnl0aGluZyBpdCBuZWVkcy0tXHJcbiAgICAgKiB3ZSBuZWVkIHRvIGFkZCBtZW1iZXIgZnVuY3Rpb25zIGFuZCBwcm9wZXJ0aWVzIGFuZCBzdWNoIGFzIHdlIGdldCB0aGVtLCBhbmQgd2VcclxuICAgICAqIG5ldmVyIHJlYWxseSBrbm93IHdoZW4gd2UncmUgZG9uZS5cclxuICAgICAqL1xyXG5cclxuICAgIF9lbWJpbmRfcmVnaXN0ZXIodGhpcywgbmFtZVB0ciwgKG5hbWUpID0+IHtcclxuICAgICAgICBjb25zdCByYXdEZXN0cnVjdG9ySW52b2tlciA9IGdldFRhYmxlRnVuY3Rpb248KF90aGlzOiBudW1iZXIpID0+IHZvaWQ+KHRoaXMsIGRlc3RydWN0b3JTaWduYXR1cmUsIHJhd0Rlc3RydWN0b3JQdHIpO1xyXG5cclxuICAgICAgICAvLyBUT0RPKD8pIEl0J3MgcHJvYmFibHkgbm90IG5lY2Vzc2FyeSB0byBoYXZlIEVtYm91bmRDbGFzc2VzIGFuZCB0aGlzLmVtYmluZCBiYXNpY2FsbHkgYmUgdGhlIHNhbWUgZXhhY3QgdGhpbmcuXHJcbiAgICAgICAgRW1ib3VuZENsYXNzZXNbcmF3VHlwZV0gPSB0aGlzLmVtYmluZFtuYW1lIGFzIG5ldmVyXSA9IHJlbmFtZUZ1bmN0aW9uKG5hbWUsXHJcbiAgICAgICAgICAgIC8vIFVubGlrZSB0aGUgY29uc3RydWN0b3IsIHRoZSBkZXN0cnVjdG9yIGlzIGtub3duIGVhcmx5IGVub3VnaCB0byBhc3NpZ24gbm93LlxyXG4gICAgICAgICAgICAvLyBQcm9iYWJseSBiZWNhdXNlIGRlc3RydWN0b3JzIGNhbid0IGJlIG92ZXJsb2FkZWQgYnkgYW55dGhpbmcgc28gdGhlcmUncyBvbmx5IGV2ZXIgb25lLlxyXG4gICAgICAgICAgICAvLyBBbnl3YXksIGFzc2lnbiBpdCB0byB0aGlzIG5ldyBjbGFzcy5cclxuICAgICAgICAgICAgY2xhc3MgZXh0ZW5kcyBFbWJvdW5kQ2xhc3Mge1xyXG4gICAgICAgICAgICAgICAgc3RhdGljIF9kZXN0cnVjdG9yID0gcmF3RGVzdHJ1Y3Rvckludm9rZXI7XHJcbiAgICAgICAgICAgIH0pIGFzIG5ldmVyO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBmcm9tV2lyZVR5cGUoX3RoaXM6IG51bWJlcik6IFdpcmVDb252ZXJzaW9uUmVzdWx0PG51bWJlciwgRW1ib3VuZENsYXNzPiB7IGNvbnN0IGpzVmFsdWUgPSBuZXcgRW1ib3VuZENsYXNzZXNbcmF3VHlwZV0oU2VjcmV0LCBfdGhpcyk7IHJldHVybiB7IHdpcmVWYWx1ZTogX3RoaXMsIGpzVmFsdWUsIHN0YWNrRGVzdHJ1Y3RvcjogKCkgPT4ganNWYWx1ZVtTeW1ib2wuZGlzcG9zZV0oKSB9IH1cclxuICAgICAgICBmdW5jdGlvbiB0b1dpcmVUeXBlKGpzT2JqZWN0OiBFbWJvdW5kQ2xhc3MpOiBXaXJlQ29udmVyc2lvblJlc3VsdDxudW1iZXIsIEVtYm91bmRDbGFzcz4ge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcclxuICAgICAgICAgICAgICAgIHdpcmVWYWx1ZTogKGpzT2JqZWN0IGFzIGFueSkuX3RoaXMgYXMgbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAganNWYWx1ZToganNPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAvLyBOb3RlOiBubyBkZXN0cnVjdG9ycyBmb3IgYW55IG9mIHRoZXNlLFxyXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGV5J3JlIGp1c3QgZm9yIHZhbHVlLXR5cGVzLWFzLW9iamVjdC10eXBlcy5cclxuICAgICAgICAgICAgICAgIC8vIEFkZGluZyBpdCBoZXJlIHdvdWxkbid0IHdvcmsgcHJvcGVybHksIGJlY2F1c2UgaXQgYXNzdW1lc1xyXG4gICAgICAgICAgICAgICAgLy8gd2Ugb3duIHRoZSBvYmplY3QgKHdoZW4gY29udmVydGluZyBmcm9tIGEgSlMgc3RyaW5nIHRvIHN0ZDo6c3RyaW5nLCB3ZSBlZmZlY3RpdmVseSBkbywgYnV0IG5vdCBoZXJlKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gV2lzaCBvdGhlciB0eXBlcyBpbmNsdWRlZCBwb2ludGVyIFR5cGVJRHMgd2l0aCB0aGVtIHRvby4uLlxyXG4gICAgICAgIGZpbmFsaXplVHlwZTxudW1iZXIsIEVtYm91bmRDbGFzcz4odGhpcywgbmFtZSwgeyB0eXBlSWQ6IHJhd1R5cGUsIGZyb21XaXJlVHlwZSwgdG9XaXJlVHlwZSB9KTtcclxuICAgICAgICBmaW5hbGl6ZVR5cGU8bnVtYmVyLCBFbWJvdW5kQ2xhc3M+KHRoaXMsIGAke25hbWV9KmAsIHsgdHlwZUlkOiByYXdQb2ludGVyVHlwZSwgZnJvbVdpcmVUeXBlLCB0b1dpcmVUeXBlIH0pO1xyXG4gICAgICAgIGZpbmFsaXplVHlwZTxudW1iZXIsIEVtYm91bmRDbGFzcz4odGhpcywgYCR7bmFtZX0gY29uc3QqYCwgeyB0eXBlSWQ6IHJhd0NvbnN0UG9pbnRlclR5cGUsIGZyb21XaXJlVHlwZSwgdG9XaXJlVHlwZSB9KTtcclxuICAgIH0pO1xyXG59XHJcbiJdfQ==