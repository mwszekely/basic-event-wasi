import { runDestructors } from "../_private/embind/destructors.js";
import { finalizeType } from "../_private/embind/finalize.js";
import { getTableFunction } from "../_private/embind/get-table-function.js";
import { _embind_finalize_composite_elements, _embind_register_value_composite, compositeRegistrations } from "../_private/embind/register-composite.js";
import { _embind_register } from "../_private/embind/register.js";
export function _embind_register_value_array(rawTypePtr, namePtr, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
    _embind_register_value_composite(this, rawTypePtr, namePtr, constructorSignature, rawConstructor, destructorSignature, rawDestructor);
}
export function _embind_register_value_array_element(rawTupleType, getterReturnTypeId, getterSignature, getter, getterContext, setterArgumentTypeId, setterSignature, setter, setterContext) {
    compositeRegistrations[rawTupleType].elements.push({
        getterContext,
        setterContext,
        getterReturnTypeId,
        setterArgumentTypeId,
        wasmGetter: getTableFunction(this, getterSignature, getter),
        wasmSetter: getTableFunction(this, setterSignature, setter)
    });
}
export function _embind_finalize_value_array(rawTypePtr) {
    const reg = compositeRegistrations[rawTypePtr];
    delete compositeRegistrations[rawTypePtr];
    _embind_register(this, reg.namePtr, async (name) => {
        const fieldRecords = await _embind_finalize_composite_elements(reg.elements);
        finalizeType(this, name, {
            typeId: rawTypePtr,
            fromWireType: (ptr) => {
                let elementDestructors = [];
                const ret = [];
                for (let i = 0; i < reg.elements.length; ++i) {
                    const field = fieldRecords[i];
                    const { jsValue, wireValue, stackDestructor } = fieldRecords[i].read(ptr);
                    elementDestructors.push(() => stackDestructor?.(jsValue, wireValue));
                    ret[i] = jsValue;
                }
                /*ret[Symbol.dispose] = () => {
                    runDestructors(elementDestructors);
                    reg._destructor(ptr)
                }*/
                Object.freeze(ret);
                return {
                    jsValue: ret,
                    wireValue: ptr,
                    stackDestructor: () => {
                        runDestructors(elementDestructors);
                        reg._destructor(ptr);
                    }
                };
            },
            toWireType: (o) => {
                let elementDestructors = [];
                const ptr = reg._constructor();
                let i = 0;
                for (let field of fieldRecords) {
                    const { jsValue, wireValue, stackDestructor } = field.write(ptr, o[i]);
                    elementDestructors.push(() => stackDestructor?.(jsValue, wireValue));
                    ++i;
                }
                return {
                    wireValue: ptr,
                    jsValue: o,
                    stackDestructor: () => {
                        runDestructors(elementDestructors);
                        reg._destructor(ptr);
                    }
                };
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,