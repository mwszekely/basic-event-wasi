import { awaitAllEmbind } from "./_private/embind/register.js";
import {} from "./types.js";
//  This reassignment is a Typescript hack to add custom types to addEventListener...
const EventTargetW = EventTarget;
/**
 * Extension of `WebAssembly.WebAssemblyInstantiatedSource` that is also an `EventTarget` for all WASI "event"s (which, yes, is why this is an entire `class`).
 */
export class InstantiatedWasm extends EventTargetW {
    /** The `WebAssembly.Module` this instance was built from. Rarely useful by itself. */
    module;
    /** The `WebAssembly.Module` this instance was built from. Rarely useful by itself. */
    instance;
    /**
     * Contains everything exported using embind.
     *
     * These are separate from regular exports on `instance.export`.
     */
    embind;
    /**
     * The "raw" WASM exports. None are prefixed with "_".
     *
     * No conversion is performed on the types here; everything takes or returns a number.
     *
     */
    exports;
    /**
     * `exports.memory`, but updated when/if more memory is allocated.
     *
     * Generally speaking, it's more convenient to use the general-purpose `readUint32` functions,
     * since they account for `DataView` being big-endian by default.
     */
    cachedMemoryView;
    /**
     * Not intended to be called directly. Use the static `instantiate` function instead, which returns one of these.
     *
     * I want to instead just return a promise here sooooooo badly...
     */
    constructor() {
        super();
        this.module = this.instance = this.exports = this.cachedMemoryView = null;
        this.embind = {};
    }
    static async instantiate(wasmDataOrFetcher, { wasi_snapshot_preview1, env, ...unboundImports }) {
        // (These are just up here to not get in the way of the comments)
        let wasm;
        let module;
        let instance;
        // There's a bit of song and dance to get around the fact that:
        // 1. WASM needs its WASI imports immediately upon instantiation.
        // 2. WASI needs its WASM `Instance` in order to function.
        // First, bind all of our imports to the same object, 
        // which also happens to be the InstantiatedWasm we're returning (but could theoretically be something else).
        // This is how they'll be able to access memory and communicate with each other.
        wasm = new InstantiatedWasm();
        const imports = {
            wasi_snapshot_preview1: bindAllFuncs(wasm, wasi_snapshot_preview1),
            env: bindAllFuncs(wasm, env),
            ...unboundImports
        };
        // We have those imports, and they've been bound to the to-be-instantiated WASM.
        // Now pass those bound imports to WebAssembly.instantiate (or whatever the user specified)
        if (wasmDataOrFetcher instanceof WebAssembly.Module) {
            instance = await WebAssembly.instantiate(wasmDataOrFetcher, imports);
            module = wasmDataOrFetcher;
        }
        else if (wasmDataOrFetcher instanceof ArrayBuffer || ArrayBuffer.isView(wasmDataOrFetcher))
            ({ instance, module } = await WebAssembly.instantiate(wasmDataOrFetcher, imports));
        else if (isResponse(wasmDataOrFetcher))
            ({ instance, module } = await WebAssembly.instantiateStreaming(wasmDataOrFetcher, imports));
        else
            ({ instance, module } = await wasmDataOrFetcher(imports));
        // Do the stuff we couldn't do in the `InstantiatedWasm` constructor because we didn't have these then:
        wasm.instance = instance;
        wasm.module = module;
        wasm.exports = wasm.instance.exports;
        wasm.cachedMemoryView = new DataView(wasm.exports.memory.buffer);
        // Almost done -- now run WASI's `_start` or `_initialize` function.
        console.assert(("_initialize" in wasm.instance.exports) != "_start" in wasm.instance.exports, `Expected either _initialize XOR _start to be exported from this WASM.`);
        if ("_initialize" in wasm.instance.exports)
            wasm.instance.exports._initialize();
        else if ("_start" in wasm.instance.exports)
            wasm.instance.exports._start();
        // Wait for all Embind calls to resolve (they `await` each other based on the dependencies they need, and this resolves when all dependencies have too)
        await awaitAllEmbind();
        // And we're finally finished.
        return wasm;
    }
}
// Given an object, binds each function in that object to p (shallowly).
function bindAllFuncs(p, r) {
    return Object.fromEntries(Object.entries(r).map(([key, func]) => { return [key, (typeof func == "function" ? func.bind(p) : func)]; }));
}
// Separated out for type reasons due to "Response" not existing in limited Worklet-like environments.
function isResponse(arg) { return "then" in arg || ("Response" in globalThis && arg instanceof Response); }
//# sourceMappingURL=data:application/json;base64,