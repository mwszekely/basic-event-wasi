//  This reassignment is a Typescript hack to add custom types to addEventListener...
const InstantiatedWasiEventTarget = EventTarget;
/**
 * Extension of `WebAssembly.WebAssemblyInstantiatedSource` that is also an `EventTarget` for all WASI "event"s.
 */
export class InstantiatedWasi extends InstantiatedWasiEventTarget {
    /** The `WebAssembly.Module` this instance was built from. Rarely useful by itself. */
    module;
    /** The `WebAssembly.Module` this instance was built from. Rarely useful by itself. */
    instance;
    /**
     * Contains everything exported using embind.
     *
     * These are separate from regular exports on `instance.export`.
     */
    embind;
    /**
     * The "raw" WASM exports. None are prefixed with "_".
     *
     * No conversion is performed on the types here; everything takes or returns a number.
     *
     */
    exports;
    cachedMemoryView;
    /** Not intended to be called directly. Use the `instantiate` function instead, which returns one of these. */
    constructor() {
        super();
        this.module = this.instance = this.exports = this.cachedMemoryView = null;
        this.embind = {};
    }
    _init(module, instance) {
        this.module = module;
        this.instance = instance;
        this.exports = instance.exports;
        this.cachedMemoryView = new DataView(this.exports.memory.buffer);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFudGlhdGVkLXdhc2kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5zdGFudGlhdGVkLXdhc2kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVUEscUZBQXFGO0FBQ3JGLE1BQU0sMkJBQTJCLEdBQUcsV0FBMkYsQ0FBQztBQUVoSTs7R0FFRztBQUNILE1BQU0sT0FBTyxnQkFBK0IsU0FBUSwyQkFBMkI7SUFDM0Usc0ZBQXNGO0lBQy9FLE1BQU0sQ0FBcUI7SUFDbEMsc0ZBQXNGO0lBQy9FLFFBQVEsQ0FBdUI7SUFFdEM7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBZTtJQUU1Qjs7Ozs7T0FLRztJQUNJLE9BQU8sQ0FBNEI7SUFDbkMsZ0JBQWdCLENBQVc7SUFFbEMsOEdBQThHO0lBQzlHO1FBQ0ksS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSyxDQUFBO1FBQzFFLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFTyxLQUFLLENBQUMsTUFBMEIsRUFBRSxRQUE4QjtRQUNwRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUF5QyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyRSxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbWJvdW5kVHlwZXMgfSBmcm9tIFwiLi9fcHJpdmF0ZS9lbWJpbmQvdHlwZXMuanNcIjtcclxuaW1wb3J0IHR5cGUgeyBFdmVudFR5cGVzTWFwIH0gZnJvbSBcIi4vX3ByaXZhdGUvZXZlbnQtdHlwZXMtbWFwLmpzXCI7XHJcbmltcG9ydCB7IEtub3duSW5zdGFuY2VFeHBvcnRzMiB9IGZyb20gXCIuL3R5cGVzLmpzXCI7XHJcblxyXG5pbnRlcmZhY2UgSW5zdGFudGlhdGVkV2FzaUV2ZW50VGFyZ2V0IGV4dGVuZHMgRXZlbnRUYXJnZXQge1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjxLIGV4dGVuZHMga2V5b2YgRXZlbnRUeXBlc01hcD4odHlwZTogSywgbGlzdGVuZXI6ICh0aGlzOiBGaWxlUmVhZGVyLCBldjogRXZlbnRUeXBlc01hcFtLXSkgPT4gYW55LCBvcHRpb25zPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKTogdm9pZDtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXIodHlwZTogc3RyaW5nLCBjYWxsYmFjazogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCB8IG51bGwsIG9wdGlvbnM/OiBFdmVudExpc3RlbmVyT3B0aW9ucyB8IGJvb2xlYW4pOiB2b2lkO1xyXG59XHJcblxyXG5cclxuLy8gIFRoaXMgcmVhc3NpZ25tZW50IGlzIGEgVHlwZXNjcmlwdCBoYWNrIHRvIGFkZCBjdXN0b20gdHlwZXMgdG8gYWRkRXZlbnRMaXN0ZW5lci4uLlxyXG5jb25zdCBJbnN0YW50aWF0ZWRXYXNpRXZlbnRUYXJnZXQgPSBFdmVudFRhcmdldCBhcyB7bmV3KCk6IEluc3RhbnRpYXRlZFdhc2lFdmVudFRhcmdldDsgcHJvdG90eXBlOiBJbnN0YW50aWF0ZWRXYXNpRXZlbnRUYXJnZXR9O1xyXG5cclxuLyoqXHJcbiAqIEV4dGVuc2lvbiBvZiBgV2ViQXNzZW1ibHkuV2ViQXNzZW1ibHlJbnN0YW50aWF0ZWRTb3VyY2VgIHRoYXQgaXMgYWxzbyBhbiBgRXZlbnRUYXJnZXRgIGZvciBhbGwgV0FTSSBcImV2ZW50XCJzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEluc3RhbnRpYXRlZFdhc2k8RSBleHRlbmRzIHt9PiBleHRlbmRzIEluc3RhbnRpYXRlZFdhc2lFdmVudFRhcmdldCBpbXBsZW1lbnRzIFdlYkFzc2VtYmx5LldlYkFzc2VtYmx5SW5zdGFudGlhdGVkU291cmNlIHtcclxuICAgIC8qKiBUaGUgYFdlYkFzc2VtYmx5Lk1vZHVsZWAgdGhpcyBpbnN0YW5jZSB3YXMgYnVpbHQgZnJvbS4gUmFyZWx5IHVzZWZ1bCBieSBpdHNlbGYuICovXHJcbiAgICBwdWJsaWMgbW9kdWxlOiBXZWJBc3NlbWJseS5Nb2R1bGU7XHJcbiAgICAvKiogVGhlIGBXZWJBc3NlbWJseS5Nb2R1bGVgIHRoaXMgaW5zdGFuY2Ugd2FzIGJ1aWx0IGZyb20uIFJhcmVseSB1c2VmdWwgYnkgaXRzZWxmLiAqL1xyXG4gICAgcHVibGljIGluc3RhbmNlOiBXZWJBc3NlbWJseS5JbnN0YW5jZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnRhaW5zIGV2ZXJ5dGhpbmcgZXhwb3J0ZWQgdXNpbmcgZW1iaW5kLlxyXG4gICAgICogXHJcbiAgICAgKiBUaGVzZSBhcmUgc2VwYXJhdGUgZnJvbSByZWd1bGFyIGV4cG9ydHMgb24gYGluc3RhbmNlLmV4cG9ydGAuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBlbWJpbmQ6IEVtYm91bmRUeXBlcztcclxuXHJcbiAgICAvKiogXHJcbiAgICAgKiBUaGUgXCJyYXdcIiBXQVNNIGV4cG9ydHMuIE5vbmUgYXJlIHByZWZpeGVkIHdpdGggXCJfXCIuXHJcbiAgICAgKiBcclxuICAgICAqIE5vIGNvbnZlcnNpb24gaXMgcGVyZm9ybWVkIG9uIHRoZSB0eXBlcyBoZXJlOyBldmVyeXRoaW5nIHRha2VzIG9yIHJldHVybnMgYSBudW1iZXIuXHJcbiAgICAgKiBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGV4cG9ydHM6IEUgJiBLbm93bkluc3RhbmNlRXhwb3J0czI7XHJcbiAgICBwdWJsaWMgY2FjaGVkTWVtb3J5VmlldzogRGF0YVZpZXc7XHJcblxyXG4gICAgLyoqIE5vdCBpbnRlbmRlZCB0byBiZSBjYWxsZWQgZGlyZWN0bHkuIFVzZSB0aGUgYGluc3RhbnRpYXRlYCBmdW5jdGlvbiBpbnN0ZWFkLCB3aGljaCByZXR1cm5zIG9uZSBvZiB0aGVzZS4gKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5tb2R1bGUgPSB0aGlzLmluc3RhbmNlID0gdGhpcy5leHBvcnRzID0gdGhpcy5jYWNoZWRNZW1vcnlWaWV3ID0gbnVsbCFcclxuICAgICAgICB0aGlzLmVtYmluZCA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2luaXQobW9kdWxlOiBXZWJBc3NlbWJseS5Nb2R1bGUsIGluc3RhbmNlOiBXZWJBc3NlbWJseS5JbnN0YW5jZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubW9kdWxlID0gbW9kdWxlO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICB0aGlzLmV4cG9ydHMgPSBpbnN0YW5jZS5leHBvcnRzIGFzIEUgYXMgRSAmIEtub3duSW5zdGFuY2VFeHBvcnRzMjtcclxuICAgICAgICB0aGlzLmNhY2hlZE1lbW9yeVZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5leHBvcnRzLm1lbW9yeS5idWZmZXIpO1xyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=