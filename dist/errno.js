// These constants aren't done as an enum because 95% of them are never referenced,
// but they'd almost certainly never be tree-shaken out.
/** No error occurred. System call completed successfully. */ export const ESUCCESS = 0;
/** Argument list too long. */ export const E2BIG = 1;
/** Permission denied. */ export const EACCES = 2;
/** Address in use. */ export const EADDRINUSE = 3;
/** Address not available. */ export const EADDRNOTAVAIL = 4;
/** Address family not supported. */ export const EAFNOSUPPORT = 5;
/** Resource unavailable, or operation would block. */ export const EAGAIN = 6;
/** Connection already in progress. */ export const EALREADY = 7;
/** Bad file descriptor. */ export const EBADF = 8;
/** Bad message. */ export const EBADMSG = 9;
/** Device or resource busy. */ export const EBUSY = 10;
/** Operation canceled. */ export const ECANCELED = 11;
/** No child processes. */ export const ECHILD = 12;
/** Connection aborted. */ export const ECONNABORTED = 13;
/** Connection refused. */ export const ECONNREFUSED = 14;
/** Connection reset. */ export const ECONNRESET = 15;
/** Resource deadlock would occur. */ export const EDEADLK = 16;
/** Destination address required. */ export const EDESTADDRREQ = 17;
/** Mathematics argument out of domain of function. */ export const EDOM = 18;
/** Reserved. */ export const EDQUOT = 19;
/** File exists. */ export const EEXIST = 20;
/** Bad address. */ export const EFAULT = 21;
/** File too large. */ export const EFBIG = 22;
/** Host is unreachable. */ export const EHOSTUNREACH = 23;
/** Identifier removed. */ export const EIDRM = 24;
/** Illegal byte sequence. */ export const EILSEQ = 25;
/** Operation in progress. */ export const EINPROGRESS = 26;
/** Interrupted function. */ export const EINTR = 27;
/** Invalid argument. */ export const EINVAL = 28;
/** I/O error. */ export const EIO = 29;
/** Socket is connected. */ export const EISCONN = 30;
/** Is a directory. */ export const EISDIR = 31;
/** Too many levels of symbolic links. */ export const ELOOP = 32;
/** File descriptor value too large. */ export const EMFILE = 33;
/** Too many links. */ export const EMLINK = 34;
/** Message too large. */ export const EMSGSIZE = 35;
/** Reserved. */ export const EMULTIHOP = 36;
/** Filename too long. */ export const ENAMETOOLONG = 37;
/** Network is down. */ export const ENETDOWN = 38;
/** Connection aborted by network. */ export const ENETRESET = 39;
/** Network unreachable. */ export const ENETUNREACH = 40;
/** Too many files open in system. */ export const ENFILE = 41;
/** No buffer space available. */ export const ENOBUFS = 42;
/** No such device. */ export const ENODEV = 43;
/** No such file or directory. */ export const ENOENT = 44;
/** Executable file format error. */ export const ENOEXEC = 45;
/** No locks available. */ export const ENOLCK = 46;
/** Reserved. */ export const ENOLINK = 47;
/** Not enough space. */ export const ENOMEM = 48;
/** No message of the desired type. */ export const ENOMSG = 49;
/** Protocol not available. */ export const ENOPROTOOPT = 50;
/** No space left on device. */ export const ENOSPC = 51;
/** Function not supported. */ export const ENOSYS = 52;
/** The socket is not connected. */ export const ENOTCONN = 53;
/** Not a directory or a symbolic link to a directory. */ export const ENOTDIR = 54;
/** Directory not empty. */ export const ENOTEMPTY = 55;
/** State not recoverable. */ export const ENOTRECOVERABLE = 56;
/** Not a socket. */ export const ENOTSOCK = 57;
/** Not supported, or operation not supported on socket. */ export const ENOTSUP = 58;
/** Inappropriate I/O control operation. */ export const ENOTTY = 59;
/** No such device or address. */ export const ENXIO = 60;
/** Value too large to be stored in data type. */ export const EOVERFLOW = 61;
/** Previous owner died. */ export const EOWNERDEAD = 62;
/** Operation not permitted. */ export const EPERM = 63;
/** Broken pipe. */ export const EPIPE = 64;
/** Protocol error. */ export const EPROTO = 65;
/** Protocol not supported. */ export const EPROTONOSUPPORT = 66;
/** Protocol wrong type for socket. */ export const EPROTOTYPE = 67;
/** Result too large. */ export const ERANGE = 68;
/** Read-only file system. */ export const EROFS = 69;
/** Invalid seek. */ export const ESPIPE = 70;
/** No such process. */ export const ESRCH = 71;
/** Reserved. */ export const ESTALE = 72;
/** Connection timed out. */ export const ETIMEDOUT = 73;
/** Text file busy. */ export const ETXTBSY = 74;
/** Cross-device link. */ export const EXDEV = 75;
/** Extension: Capabilities insufficient. */ export const ENOTCAPABLE = 76;
//# sourceMappingURL=data:application/json;base64,