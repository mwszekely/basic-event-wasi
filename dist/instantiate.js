import { instantiateWasmGeneric } from "./_private/instantiate-wasm.js";
export async function instantiate(wasm, unboundImports) {
    return await instantiateWasmGeneric(async (combinedImports) => {
        if (wasm instanceof WebAssembly.Module)
            return ({ module: wasm, instance: await WebAssembly.instantiate(wasm, { ...combinedImports }) });
        else if (wasm instanceof ArrayBuffer || ArrayBuffer.isView(wasm))
            return await WebAssembly.instantiate(wasm, { ...combinedImports });
        else if ("then" in wasm || ("Response" in globalThis && wasm instanceof Response))
            return await WebAssembly.instantiateStreaming(wasm, { ...combinedImports });
        else
            return await wasm(combinedImports);
    }, unboundImports);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFudGlhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5zdGFudGlhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUEwQixzQkFBc0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBbUJoRyxNQUFNLENBQUMsS0FBSyxVQUFVLFdBQVcsQ0FBZSxJQUE4RixFQUFFLGNBQXFDO0lBQ2pMLE9BQU8sTUFBTSxzQkFBc0IsQ0FBSSxLQUFLLEVBQUUsZUFBZSxFQUFFLEVBQUU7UUFDN0QsSUFBSSxJQUFJLFlBQVksV0FBVyxDQUFDLE1BQU07WUFDbEMsT0FBTyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLEdBQUcsZUFBZSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDaEcsSUFBSSxJQUFJLFlBQVksV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQzVELE9BQU8sTUFBTSxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLEdBQUcsZUFBZSxFQUFFLENBQUMsQ0FBQzthQUNsRSxJQUFJLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksVUFBVSxJQUFJLElBQUksWUFBWSxRQUFRLENBQUM7WUFDN0UsT0FBTyxNQUFNLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLGVBQWUsRUFBRSxDQUFDLENBQUM7O1lBRTVFLE9BQU8sTUFBTyxJQUEwQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRWxFLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQTtBQUN0QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZSBSb2xsdXBXYXNtUHJvbWlzZSwgaW5zdGFudGlhdGVXYXNtR2VuZXJpYyB9IGZyb20gXCIuL19wcml2YXRlL2luc3RhbnRpYXRlLXdhc20uanNcIjtcclxuaW1wb3J0IHsgSW5zdGFudGlhdGVkV2FzaSB9IGZyb20gXCIuL2luc3RhbnRpYXRlZC13YXNpLmpzXCI7XHJcbmltcG9ydCB7IEVudGlyZVB1YmxpY0ludGVyZmFjZSB9IGZyb20gXCIuL3R5cGVzLmpzXCI7XHJcblxyXG4vKipcclxuICogSW5zdGFudGlhdGVzIGEgV0FTTSBtb2R1bGUgd2l0aCB0aGUgc3BlY2lmaWVkIFdBU0kgaW1wb3J0cy5cclxuICogXHJcbiAqIGBpbnB1dGAgY2FuIGJlIGFueSBvbmUgb2Y6XHJcbiAqIFxyXG4gKiAqIGBSZXNwb25zZWAgb3IgYFByb21pc2U8UmVzcG9uc2U+YCAoZnJvbSBlLmcuIGBmZXRjaGApLiBVc2VzIGBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZ2AuXHJcbiAqICogYEFycmF5QnVmZmVyYCByZXByZXNlbnRpbmcgdGhlIFdBU00gaW4gYmluYXJ5IGZvcm0sIG9yIGEgYFdlYkFzc2VtYmx5Lk1vZHVsZWAuIFxyXG4gKiAqIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyAxIGFyZ3VtZW50IG9mIHR5cGUgYFdlYkFzc2VtYmx5LkltcG9ydHNgIGFuZCByZXR1cm5zIGEgYFdlYkFzc2VtYmx5LldlYkFzc2VtYmx5SW5zdGFudGlhdGVkU291cmNlYC4gVGhpcyBpcyB0aGUgdHlwZSB0aGF0IGBAcm9sbHVwL3BsdWdpbi13YXNtYCByZXR1cm5zIHdoZW4gYnVuZGxpbmcgYSBwcmUtYnVpbHQgV0FTTSBiaW5hcnkuXHJcbiAqIFxyXG4gKiBAcGFyYW0gd2FzbUZldGNoUHJvbWlzZSBcclxuICogQHBhcmFtIHVuYm91bmRJbXBvcnRzIFxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluc3RhbnRpYXRlPEUgZXh0ZW5kcyB7fT4od2FzbUZldGNoUHJvbWlzZTogUmVzcG9uc2UgfCBQcm9taXNlTGlrZTxSZXNwb25zZT4sIHVuYm91bmRJbXBvcnRzOiBFbnRpcmVQdWJsaWNJbnRlcmZhY2UpOiBQcm9taXNlPEluc3RhbnRpYXRlZFdhc2k8RT4+O1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5zdGFudGlhdGU8RSBleHRlbmRzIHt9Pihtb2R1bGVCeXRlczogV2ViQXNzZW1ibHkuTW9kdWxlIHwgQnVmZmVyU291cmNlLCB1bmJvdW5kSW1wb3J0czogRW50aXJlUHVibGljSW50ZXJmYWNlKTogUHJvbWlzZTxJbnN0YW50aWF0ZWRXYXNpPEU+PjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluc3RhbnRpYXRlPEUgZXh0ZW5kcyB7fT4od2FzbUluc3RhbnRpYXRvcjogUm9sbHVwV2FzbVByb21pc2UsIHVuYm91bmRJbXBvcnRzOiBFbnRpcmVQdWJsaWNJbnRlcmZhY2UpOiBQcm9taXNlPEluc3RhbnRpYXRlZFdhc2k8RT4+O1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5zdGFudGlhdGU8RSBleHRlbmRzIHt9Pih3YXNtOiBSb2xsdXBXYXNtUHJvbWlzZSB8IFdlYkFzc2VtYmx5Lk1vZHVsZSB8IEJ1ZmZlclNvdXJjZSB8IFJlc3BvbnNlIHwgUHJvbWlzZUxpa2U8UmVzcG9uc2U+LCB1bmJvdW5kSW1wb3J0czogRW50aXJlUHVibGljSW50ZXJmYWNlKTogUHJvbWlzZTxJbnN0YW50aWF0ZWRXYXNpPEU+PiB7XHJcbiAgICByZXR1cm4gYXdhaXQgaW5zdGFudGlhdGVXYXNtR2VuZXJpYzxFPihhc3luYyAoY29tYmluZWRJbXBvcnRzKSA9PiB7XHJcbiAgICAgICAgaWYgKHdhc20gaW5zdGFuY2VvZiBXZWJBc3NlbWJseS5Nb2R1bGUpXHJcbiAgICAgICAgICAgIHJldHVybiAoeyBtb2R1bGU6IHdhc20sIGluc3RhbmNlOiBhd2FpdCBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZSh3YXNtLCB7IC4uLmNvbWJpbmVkSW1wb3J0cyB9KSB9KTtcclxuICAgICAgICBlbHNlIGlmICh3YXNtIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgQXJyYXlCdWZmZXIuaXNWaWV3KHdhc20pKVxyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUod2FzbSwgeyAuLi5jb21iaW5lZEltcG9ydHMgfSk7XHJcbiAgICAgICAgZWxzZSBpZiAoXCJ0aGVuXCIgaW4gd2FzbSB8fCAoXCJSZXNwb25zZVwiIGluIGdsb2JhbFRoaXMgJiYgd2FzbSBpbnN0YW5jZW9mIFJlc3BvbnNlKSlcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKHdhc20sIHsgLi4uY29tYmluZWRJbXBvcnRzIH0pO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0ICh3YXNtIGFzIFJvbGx1cFdhc21Qcm9taXNlKShjb21iaW5lZEltcG9ydHMpO1xyXG5cclxuICAgIH0sIHVuYm91bmRJbXBvcnRzKVxyXG59XHJcblxyXG5cclxuIl19