import { EINVAL, ENOSYS, ESUCCESS } from "../errno.js";
import { writeUint64 } from "../util/write-uint64.js";
export var ClockId;
(function (ClockId) {
    ClockId[ClockId["REALTIME"] = 0] = "REALTIME";
    ClockId[ClockId["MONOTONIC"] = 1] = "MONOTONIC";
    ClockId[ClockId["PROCESS_CPUTIME_ID"] = 2] = "PROCESS_CPUTIME_ID";
    ClockId[ClockId["THREAD_CPUTIME_ID"] = 3] = "THREAD_CPUTIME_ID";
})(ClockId || (ClockId = {}));
const p = (globalThis.performance);
export function clock_time_get(clk_id, _precision, outPtr) {
    let nowMs;
    switch (clk_id) {
        case ClockId.REALTIME:
            nowMs = Date.now();
            break;
        case ClockId.MONOTONIC:
            if (p == null)
                return ENOSYS; // TODO: Possible to be null in Worklets?
            nowMs = p.now();
            break;
        case ClockId.PROCESS_CPUTIME_ID:
        case ClockId.THREAD_CPUTIME_ID:
            return ENOSYS;
        default: return EINVAL;
    }
    const nowNs = BigInt(Math.round(nowMs * 1000 * 1000));
    writeUint64(this, outPtr, nowNs);
    return ESUCCESS;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvY2tfdGltZV9nZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2FzaV9zbmFwc2hvdF9wcmV2aWV3MS9jbG9ja190aW1lX2dldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFdkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXRELE1BQU0sQ0FBTixJQUFZLE9BS1g7QUFMRCxXQUFZLE9BQU87SUFDZiw2Q0FBWSxDQUFBO0lBQ1osK0NBQWEsQ0FBQTtJQUNiLGlFQUFzQixDQUFBO0lBQ3RCLCtEQUFxQixDQUFBO0FBQ3pCLENBQUMsRUFMVyxPQUFPLEtBQVAsT0FBTyxRQUtsQjtBQUVELE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRW5DLE1BQU0sVUFBVSxjQUFjLENBQTZCLE1BQWMsRUFBRSxVQUFrQixFQUFFLE1BQWM7SUFFekcsSUFBSSxLQUFhLENBQUM7SUFDbEIsUUFBUSxNQUFNLEVBQUUsQ0FBQztRQUNiLEtBQUssT0FBTyxDQUFDLFFBQVE7WUFDakIsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNuQixNQUFNO1FBQ1YsS0FBSyxPQUFPLENBQUMsU0FBUztZQUNsQixJQUFJLENBQUMsSUFBSSxJQUFJO2dCQUFFLE9BQU8sTUFBTSxDQUFDLENBQUcseUNBQXlDO1lBQ3pFLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDaEIsTUFBTTtRQUNWLEtBQUssT0FBTyxDQUFDLGtCQUFrQixDQUFDO1FBQ2hDLEtBQUssT0FBTyxDQUFDLGlCQUFpQjtZQUMxQixPQUFPLE1BQU0sQ0FBQztRQUNsQixPQUFPLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQztJQUMzQixDQUFDO0lBQ0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3RELFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRWpDLE9BQU8sUUFBUSxDQUFDO0FBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFSU5WQUwsIEVOT1NZUywgRVNVQ0NFU1MgfSBmcm9tIFwiLi4vZXJybm8uanNcIjtcclxuaW1wb3J0IHsgSW5zdGFudGlhdGVkV2FzaSB9IGZyb20gXCIuLi9pbnN0YW50aWF0ZWQtd2FzaS5qc1wiO1xyXG5pbXBvcnQgeyB3cml0ZVVpbnQ2NCB9IGZyb20gXCIuLi91dGlsL3dyaXRlLXVpbnQ2NC5qc1wiO1xyXG5cclxuZXhwb3J0IGVudW0gQ2xvY2tJZCB7XHJcbiAgICBSRUFMVElNRSA9IDAsXHJcbiAgICBNT05PVE9OSUMgPSAxLFxyXG4gICAgUFJPQ0VTU19DUFVUSU1FX0lEID0gMixcclxuICAgIFRIUkVBRF9DUFVUSU1FX0lEID0gM1xyXG59XHJcblxyXG5jb25zdCBwID0gKGdsb2JhbFRoaXMucGVyZm9ybWFuY2UpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb2NrX3RpbWVfZ2V0KHRoaXM6IEluc3RhbnRpYXRlZFdhc2k8e30+LCBjbGtfaWQ6IG51bWJlciwgX3ByZWNpc2lvbjogbnVtYmVyLCBvdXRQdHI6IG51bWJlcik6IG51bWJlciB7XHJcblxyXG4gICAgbGV0IG5vd01zOiBudW1iZXI7XHJcbiAgICBzd2l0Y2ggKGNsa19pZCkge1xyXG4gICAgICAgIGNhc2UgQ2xvY2tJZC5SRUFMVElNRTpcclxuICAgICAgICAgICAgbm93TXMgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIENsb2NrSWQuTU9OT1RPTklDOlxyXG4gICAgICAgICAgICBpZiAocCA9PSBudWxsKSByZXR1cm4gRU5PU1lTOyAgIC8vIFRPRE86IFBvc3NpYmxlIHRvIGJlIG51bGwgaW4gV29ya2xldHM/XHJcbiAgICAgICAgICAgIG5vd01zID0gcC5ub3coKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBDbG9ja0lkLlBST0NFU1NfQ1BVVElNRV9JRDpcclxuICAgICAgICBjYXNlIENsb2NrSWQuVEhSRUFEX0NQVVRJTUVfSUQ6XHJcbiAgICAgICAgICAgIHJldHVybiBFTk9TWVM7XHJcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIEVJTlZBTDtcclxuICAgIH1cclxuICAgIGNvbnN0IG5vd05zID0gQmlnSW50KE1hdGgucm91bmQobm93TXMgKiAxMDAwICogMTAwMCkpO1xyXG4gICAgd3JpdGVVaW50NjQodGhpcywgb3V0UHRyLCBub3dOcyk7XHJcblxyXG4gICAgcmV0dXJuIEVTVUNDRVNTO1xyXG59Il19