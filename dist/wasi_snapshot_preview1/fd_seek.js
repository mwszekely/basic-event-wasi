import { EBADF, EINVAL, EOVERFLOW, ESPIPE, ESUCCESS } from "../errno.js";
import { writePointer } from "../util/write-pointer.js";
export class FileDescriptorSeekEvent extends CustomEvent {
    constructor(fileDescriptor, offset, whence) {
        super("fd_seek", { cancelable: true, detail: { fileDescriptor, offset, whence, newPosition: 0, error: undefined } });
    }
}
export const WHENCE_SET = 0;
export const WHENCE_CUR = 1;
export const WHENCE_END = 2;
/** POSIX lseek */
export function fd_seek(fd, offset, whence, offsetOut) {
    const event = new FileDescriptorSeekEvent(fd, offset, whence);
    if (this.dispatchEvent(event)) {
        switch (fd) {
            case 0:
            case 1:
            case 2: return ESPIPE;
            default: return EBADF;
        }
    }
    else {
        writePointer(this, offsetOut, event.detail.newPosition);
        return event.detail.error ?? ESUCCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmRfc2Vlay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93YXNpX3NuYXBzaG90X3ByZXZpZXcxL2ZkX3NlZWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBbUN4RCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsV0FBMEM7SUFDbkYsWUFBWSxjQUFzQixFQUFFLE1BQWMsRUFBRSxNQUFrQjtRQUNsRSxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDekgsQ0FBQztDQUNKO0FBRUQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQztBQUM1QixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0FBQzVCLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFHNUIsa0JBQWtCO0FBQ2xCLE1BQU0sVUFBVSxPQUFPLENBQXlCLEVBQWtCLEVBQUUsTUFBYyxFQUFFLE1BQWtCLEVBQUUsU0FBaUI7SUFDckgsTUFBTSxLQUFLLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlELElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzVCLFFBQVEsRUFBRSxFQUFFLENBQUM7WUFDVCxLQUFLLENBQUMsQ0FBQztZQUNQLEtBQUssQ0FBQyxDQUFDO1lBQ1AsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQztZQUN0QixPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQztRQUMxQixDQUFDO0lBQ0wsQ0FBQztTQUNJLENBQUM7UUFDRixZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hELE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDO0lBQzFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRUJBREYsIEVJTlZBTCwgRU9WRVJGTE9XLCBFU1BJUEUsIEVTVUNDRVNTIH0gZnJvbSBcIi4uL2Vycm5vLmpzXCI7XHJcbmltcG9ydCB0eXBlIHsgRmlsZURlc2NyaXB0b3IgfSBmcm9tIFwiLi4vdHlwZXMuanNcIjtcclxuaW1wb3J0IHsgd3JpdGVQb2ludGVyIH0gZnJvbSBcIi4uL3V0aWwvd3JpdGUtcG9pbnRlci5qc1wiO1xyXG5pbXBvcnQgdHlwZSB7IEluc3RhbnRpYXRlZFdhc20gfSBmcm9tIFwiLi4vd2FzbS5qc1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGaWxlRGVzY3JpcHRvclNlZWtFdmVudERldGFpbCB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBbZmlsZSBkZXNjcmlwdG9yXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaWxlX2Rlc2NyaXB0b3IpLCBhIDAtaW5kZXhlZCBudW1iZXIgZGVzY3JpYmluZyB3aGVyZSB0aGUgZGF0YSBpcyBnb2luZyB0by9jb21pbmcgZnJvbS5cclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHkgZmlsZURlc2NyaXB0b3I6IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gbW92ZSB0aGUgY3VycmVudCBwb3NpdGlvbiBieVxyXG4gICAgICovXHJcbiAgICByZWFkb25seSBvZmZzZXQ6IG51bWJlcjtcclxuXHJcbiAgICAvKiogXHJcbiAgICAgKiBXaGV0aGVyIHRvIG1vdmUgLi4uXHJcbiAgICAgKiAqIC4uLnRvIGFuIGFic29sdXRlIHBvc2l0aW9uIChXSEVOQ0VfU0VUKVxyXG4gICAgICogKiAuLi5yZWxhdGl2ZSB0byB0aGUgY3VycmVudCBwb3NpdGlvbiAoV0hFTkNFX0NVUilcclxuICAgICAqICogLi4ucmVsYXRpdmUgdG8gdGhlIGVuZCBvZiB0aGUgZmlsZSAoV0hFTkNFX0VORClcclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHkgd2hlbmNlOiBTZWVrV2hlbmNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSWYgeW91IHNldCB0aGlzIHZhbHVlIGFuZCBjYWxsIGBwcmV2ZW50RGVmYXVsdGAsIGl0IHdpbGwgYmUgcmV0dXJuZWQgYnkgYGZkX3NlZWtgLiBPdGhlcndpc2UgRVNVQ0NFU1Mgd2lsbCBiZSByZXR1cm5lZFxyXG4gICAgICovXHJcbiAgICBlcnJvcj86IEZpbGVTZWVrRXJyb3JzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSWYgYHByZXZlbnREZWZhdWx0YCBpcyBjYWxsZWQsIHRoaXMgbXVzdCBiZSBzZXQgdG8gdGhlIG5ldyBwb3NpdGlvbiBpbiB0aGUgZmlsZSAob3IgYGVycm9yYCBtdXN0IGJlIHNldCkuXHJcbiAgICAgKi9cclxuICAgIG5ld1Bvc2l0aW9uOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEZpbGVTZWVrRXJyb3JzID0gdHlwZW9mIEVTUElQRSB8IHR5cGVvZiBFQkFERiB8IHR5cGVvZiBFSU5WQUwgfCB0eXBlb2YgRU9WRVJGTE9XIHwgdHlwZW9mIEVTVUNDRVNTO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpbGVEZXNjcmlwdG9yU2Vla0V2ZW50IGV4dGVuZHMgQ3VzdG9tRXZlbnQ8RmlsZURlc2NyaXB0b3JTZWVrRXZlbnREZXRhaWw+IHtcclxuICAgIGNvbnN0cnVjdG9yKGZpbGVEZXNjcmlwdG9yOiBudW1iZXIsIG9mZnNldDogbnVtYmVyLCB3aGVuY2U6IFNlZWtXaGVuY2UpIHtcclxuICAgICAgICBzdXBlcihcImZkX3NlZWtcIiwgeyBjYW5jZWxhYmxlOiB0cnVlLCBkZXRhaWw6IHsgZmlsZURlc2NyaXB0b3IsIG9mZnNldCwgd2hlbmNlLCBuZXdQb3NpdGlvbjogMCwgZXJyb3I6IHVuZGVmaW5lZCB9IH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgV0hFTkNFX1NFVCA9IDA7XHJcbmV4cG9ydCBjb25zdCBXSEVOQ0VfQ1VSID0gMTtcclxuZXhwb3J0IGNvbnN0IFdIRU5DRV9FTkQgPSAyO1xyXG5leHBvcnQgdHlwZSBTZWVrV2hlbmNlID0gdHlwZW9mIFdIRU5DRV9TRVQgfCB0eXBlb2YgV0hFTkNFX0NVUiB8IHR5cGVvZiBXSEVOQ0VfRU5EO1xyXG5cclxuLyoqIFBPU0lYIGxzZWVrICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmZF9zZWVrKHRoaXM6IEluc3RhbnRpYXRlZFdhc20sIGZkOiBGaWxlRGVzY3JpcHRvciwgb2Zmc2V0OiBudW1iZXIsIHdoZW5jZTogU2Vla1doZW5jZSwgb2Zmc2V0T3V0OiBudW1iZXIpOiBGaWxlU2Vla0Vycm9ycyB7XHJcbiAgICBjb25zdCBldmVudCA9IG5ldyBGaWxlRGVzY3JpcHRvclNlZWtFdmVudChmZCwgb2Zmc2V0LCB3aGVuY2UpO1xyXG4gICAgaWYgKHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCkpIHtcclxuICAgICAgICBzd2l0Y2ggKGZkKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBFU1BJUEU7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBFQkFERjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB3cml0ZVBvaW50ZXIodGhpcywgb2Zmc2V0T3V0LCBldmVudC5kZXRhaWwubmV3UG9zaXRpb24pO1xyXG4gICAgICAgIHJldHVybiBldmVudC5kZXRhaWwuZXJyb3IgPz8gRVNVQ0NFU1M7XHJcbiAgICB9XHJcbn1cclxuIl19