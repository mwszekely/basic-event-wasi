import { parseArray } from "../_private/iovec.js";
import { EBADF, ESUCCESS } from "../errno.js";
import { writeSizeT } from "../util/write-sizet.js";
const FdReadInfoSymbol = Symbol();
export class FileDescriptorReadEvent extends CustomEvent {
    constructor(fileDescriptor, data) {
        super("fd_read", {
            bubbles: false,
            cancelable: true,
            detail: {
                fileDescriptor,
                data
            }
        });
    }
}
/** POSIX readv */
export function fd_read(fd, iov, iovcnt, pnum) {
    let nWritten = 0;
    const buffers = parseArray(this, iov, iovcnt);
    const this2 = (this[FdReadInfoSymbol] ??= { data: [] });
    const event = new FileDescriptorReadEvent(fd, this2.data);
    if (this.dispatchEvent(event)) {
        if (fd === 0) {
            if (event.detail.data.length == 0) {
                // Default behavior for stdin--use window.prompt.
                // TODO: WASM promises when those are available
                console.assert(event.detail.data.length == 0);
                const str = (window.prompt() ?? "") + "\n";
                event.detail.data.push(str);
            }
        }
        else {
            return EBADF;
        }
    }
    // Write the user-provided data to the buffer
    let outBuffIndex = 0;
    let inBuffIndex = 0;
    let outBuff = buffers[outBuffIndex].uint8;
    let inBuff = event.detail.data[inBuffIndex];
    while (true) {
        if (typeof inBuff == "string")
            inBuff = new TextEncoder().encode(inBuff);
        if (outBuff == null || inBuff == null)
            break;
        // Write what we can from inBuff to outBuff.
        const lengthRemainingToWrite = inBuff.byteLength;
        const lengthAvailableToWrite = outBuff.byteLength;
        const lengthToWrite = Math.min(lengthAvailableToWrite, lengthRemainingToWrite);
        outBuff.set(inBuff.subarray(0, lengthToWrite));
        // Now "discard" what we wrote
        // (this doesn't actually do any heavy memory moves or anything,
        // it's just creating new views over the same `ArrayBuffer`s).
        inBuff = inBuff.subarray(lengthToWrite);
        outBuff = outBuff.subarray(lengthToWrite);
        // Now see where we're at with each buffer.
        // If we ran out of input data, move to the next input buffer.
        if (lengthRemainingToWrite < lengthAvailableToWrite) {
            ++inBuffIndex;
            inBuff = event.detail.data[inBuffIndex];
        }
        // If we ran out of output space, move to the next output buffer.
        if (lengthAvailableToWrite < lengthRemainingToWrite) {
            ++outBuffIndex;
            outBuff = buffers[outBuffIndex]?.uint8;
        }
        nWritten += lengthToWrite;
    }
    const d = [];
    if (inBuff && inBuff.byteLength)
        d.push(inBuff);
    if (event.detail.data.length > 0)
        d.push(...event.detail.data.slice(inBuffIndex + 1));
    this2.data = d;
    writeSizeT(this, pnum, nWritten);
    return ESUCCESS;
}
//# sourceMappingURL=data:application/json;base64,