/* eslint-disable @typescript-eslint/no-empty-function */
// Polyfill for extremely limited environments, like Worklets.
// This seems to exist in Chrome but not, e.g., Firefox, possibly Safari
// TODO: This is tiny, but a way to optimize it out for environments that *do* have `Event` would be nice...
class Event {
    constructor(type_, eventInitDict) {
        this.bubbles = eventInitDict?.bubbles || false;
        this.cancelBubble = false;
        this.cancelable = eventInitDict?.cancelable || false;
        this.composed = eventInitDict?.composed || false;
        this.currentTarget = null;
        this.defaultPrevented = false;
        this.eventPhase = Event.NONE;
        this.isTrusted = true;
        this.returnValue = false;
        this.srcElement = null;
        this.target = null;
        this.timeStamp = 0;
        this.type = type_;
    }
    static NONE = 0;
    static CAPTURING_PHASE = 1;
    static AT_TARGET = 2;
    static BUBBLING_PHASE = 3;
    bubbles;
    cancelBubble;
    cancelable;
    composed;
    currentTarget;
    defaultPrevented;
    eventPhase;
    isTrusted;
    returnValue;
    srcElement;
    target;
    timeStamp;
    type;
    composedPath() { return []; }
    initEvent(type_, bubbles, cancelable) { this.type = type_; this.bubbles = bubbles || this.bubbles; this.cancelable = cancelable || this.cancelable; }
    preventDefault() { this.defaultPrevented = true; }
    stopImmediatePropagation() { }
    stopPropagation() { }
}
;
(globalThis.Event) ??= (() => {
    // console.info(`This environment does not define Event; using a polyfill.`)
    return Event;
})();
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcG9seWZpbGwvZXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBRXpELDhEQUE4RDtBQUM5RCx3RUFBd0U7QUFDeEUsNEdBQTRHO0FBQzVHLE1BQU0sS0FBSztJQUVQLFlBQVksS0FBYSxFQUFFLGFBQXlCO1FBQ2hELElBQUksQ0FBQyxPQUFPLEdBQUcsYUFBYSxFQUFFLE9BQU8sSUFBSSxLQUFLLENBQUM7UUFDL0MsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDMUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxhQUFhLEVBQUUsVUFBVSxJQUFJLEtBQUssQ0FBQztRQUNyRCxJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsRUFBRSxRQUFRLElBQUksS0FBSyxDQUFDO1FBQ2pELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNoQixNQUFNLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztJQUMzQixNQUFNLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNyQixNQUFNLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztJQUUxQixPQUFPLENBQVU7SUFDakIsWUFBWSxDQUFVO0lBQ3RCLFVBQVUsQ0FBVTtJQUNYLFFBQVEsQ0FBVTtJQUNsQixhQUFhLENBQXFCO0lBQzNDLGdCQUFnQixDQUFVO0lBQ2pCLFVBQVUsQ0FBUztJQUNuQixTQUFTLENBQVU7SUFDNUIsV0FBVyxDQUFVO0lBQ1osVUFBVSxDQUFxQjtJQUMvQixNQUFNLENBQXFCO0lBQzNCLFNBQVMsQ0FBc0I7SUFDeEMsSUFBSSxDQUFTO0lBQ2IsWUFBWSxLQUFvQixPQUFPLEVBQUUsQ0FBQSxDQUFDLENBQUM7SUFDM0MsU0FBUyxDQUFDLEtBQWEsRUFBRSxPQUFpQixFQUFFLFVBQW9CLElBQVUsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDdkwsY0FBYyxLQUFXLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3hELHdCQUF3QixLQUFXLENBQUM7SUFDcEMsZUFBZSxLQUFXLENBQUM7O0FBRTlCLENBQUM7QUFFRixDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtJQUN6Qiw0RUFBNEU7SUFDNUUsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyxDQUFDLEVBQVcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbiAqL1xyXG5cclxuLy8gUG9seWZpbGwgZm9yIGV4dHJlbWVseSBsaW1pdGVkIGVudmlyb25tZW50cywgbGlrZSBXb3JrbGV0cy5cclxuLy8gVGhpcyBzZWVtcyB0byBleGlzdCBpbiBDaHJvbWUgYnV0IG5vdCwgZS5nLiwgRmlyZWZveCwgcG9zc2libHkgU2FmYXJpXHJcbi8vIFRPRE86IFRoaXMgaXMgdGlueSwgYnV0IGEgd2F5IHRvIG9wdGltaXplIGl0IG91dCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgKmRvKiBoYXZlIGBFdmVudGAgd291bGQgYmUgbmljZS4uLlxyXG5jbGFzcyBFdmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IodHlwZV86IHN0cmluZywgZXZlbnRJbml0RGljdD86IEV2ZW50SW5pdCkge1xyXG4gICAgICAgIHRoaXMuYnViYmxlcyA9IGV2ZW50SW5pdERpY3Q/LmJ1YmJsZXMgfHwgZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jYW5jZWxCdWJibGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNhbmNlbGFibGUgPSBldmVudEluaXREaWN0Py5jYW5jZWxhYmxlIHx8IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY29tcG9zZWQgPSBldmVudEluaXREaWN0Py5jb21wb3NlZCB8fCBmYWxzZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRUYXJnZXQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZXZlbnRQaGFzZSA9IEV2ZW50Lk5PTkU7XHJcbiAgICAgICAgdGhpcy5pc1RydXN0ZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNyY0VsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnRpbWVTdGFtcCA9IDA7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZV87XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIE5PTkUgPSAwO1xyXG4gICAgc3RhdGljIENBUFRVUklOR19QSEFTRSA9IDE7XHJcbiAgICBzdGF0aWMgQVRfVEFSR0VUID0gMjtcclxuICAgIHN0YXRpYyBCVUJCTElOR19QSEFTRSA9IDM7XHJcblxyXG4gICAgYnViYmxlczogYm9vbGVhbjtcclxuICAgIGNhbmNlbEJ1YmJsZTogYm9vbGVhbjtcclxuICAgIGNhbmNlbGFibGU6IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBjb21wb3NlZDogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IGN1cnJlbnRUYXJnZXQ6IEV2ZW50VGFyZ2V0IHwgbnVsbDtcclxuICAgIGRlZmF1bHRQcmV2ZW50ZWQ6IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBldmVudFBoYXNlOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBpc1RydXN0ZWQ6IGJvb2xlYW47XHJcbiAgICByZXR1cm5WYWx1ZTogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IHNyY0VsZW1lbnQ6IEV2ZW50VGFyZ2V0IHwgbnVsbDtcclxuICAgIHJlYWRvbmx5IHRhcmdldDogRXZlbnRUYXJnZXQgfCBudWxsO1xyXG4gICAgcmVhZG9ubHkgdGltZVN0YW1wOiBET01IaWdoUmVzVGltZVN0YW1wO1xyXG4gICAgdHlwZTogc3RyaW5nO1xyXG4gICAgY29tcG9zZWRQYXRoKCk6IEV2ZW50VGFyZ2V0W10geyByZXR1cm4gW10gfVxyXG4gICAgaW5pdEV2ZW50KHR5cGVfOiBzdHJpbmcsIGJ1YmJsZXM/OiBib29sZWFuLCBjYW5jZWxhYmxlPzogYm9vbGVhbik6IHZvaWQgeyB0aGlzLnR5cGUgPSB0eXBlXzsgdGhpcy5idWJibGVzID0gYnViYmxlcyB8fCB0aGlzLmJ1YmJsZXM7IHRoaXMuY2FuY2VsYWJsZSA9IGNhbmNlbGFibGUgfHwgdGhpcy5jYW5jZWxhYmxlOyB9XHJcbiAgICBwcmV2ZW50RGVmYXVsdCgpOiB2b2lkIHsgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsgfVxyXG4gICAgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk6IHZvaWQgeyB9XHJcbiAgICBzdG9wUHJvcGFnYXRpb24oKTogdm9pZCB7IH1cclxuXHJcbn07XHJcblxyXG4oZ2xvYmFsVGhpcy5FdmVudCkgPz89ICgoKSA9PiB7XHJcbiAgICAvLyBjb25zb2xlLmluZm8oYFRoaXMgZW52aXJvbm1lbnQgZG9lcyBub3QgZGVmaW5lIEV2ZW50OyB1c2luZyBhIHBvbHlmaWxsLmApXHJcbiAgICByZXR1cm4gRXZlbnQ7XHJcbn0pKCkgYXMgbmV2ZXI7XHJcbiJdfQ==