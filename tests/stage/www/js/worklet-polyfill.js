// ../dist/polyfill/event.js
var Event2 = class _Event {
  constructor(type_, eventInitDict) {
    this.bubbles = eventInitDict?.bubbles || false;
    this.cancelBubble = false;
    this.cancelable = eventInitDict?.cancelable || false;
    this.composed = eventInitDict?.composed || false;
    this.currentTarget = null;
    this.defaultPrevented = false;
    this.eventPhase = _Event.NONE;
    this.isTrusted = true;
    this.returnValue = false;
    this.srcElement = null;
    this.target = null;
    this.timeStamp = 0;
    this.type = type_;
  }
  static NONE = 0;
  static CAPTURING_PHASE = 1;
  static AT_TARGET = 2;
  static BUBBLING_PHASE = 3;
  bubbles;
  cancelBubble;
  cancelable;
  composed;
  currentTarget;
  defaultPrevented;
  eventPhase;
  isTrusted;
  returnValue;
  srcElement;
  target;
  timeStamp;
  type;
  composedPath() {
    return [];
  }
  initEvent(type_, bubbles, cancelable) {
    this.type = type_;
    this.bubbles = bubbles || this.bubbles;
    this.cancelable = cancelable || this.cancelable;
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
  stopImmediatePropagation() {
  }
  stopPropagation() {
  }
};
globalThis.Event ?? (() => {
  console.info(`This environment does not define Event; using a polyfill.`);
  return Event2;
})();

// ../dist/polyfill/custom-event.js
var CustomEvent = class extends Event {
  constructor(type, eventInitDict) {
    super(type, eventInitDict);
    this.detail = eventInitDict?.detail;
  }
  detail;
  initCustomEvent(_type, _bubbles, _cancelable, detail) {
    this.detail = detail ?? this.detail;
  }
};
globalThis.CustomEvent ??= (() => {
  console.info(`This environment does not define CustomEvent; using a polyfill`);
  return CustomEvent;
})();

// ../dist/polyfill/text-decoder.js
globalThis.TextDecoder ??= class TD {
  encoding = "utf8";
  fatal = false;
  ignoreBOM = false;
  decode(input, options) {
    let i = 0;
    if (!input)
      return "";
    let input2 = new Uint8Array(input instanceof ArrayBuffer ? input : input.buffer);
    let ret = "";
    while (i < input.byteLength) {
      const byte = input2[i];
      if (byte < 128)
        ret += String.fromCharCode(byte);
      else
        throw new Error("Not implemented: non-ASCII characters in Worklets");
      ++i;
    }
    return ret;
  }
};

// ../dist/polyfill/text-encoder.js
globalThis.TextEncoder ??= class TD2 {
  encoding = "utf8";
  encodeInto(source, destination) {
    let read = 0;
    let written = 0;
    let byteIndex = 0;
    for (const ch of source) {
      if (ch.codePointAt(0) >= 128)
        throw new Error("Not implemented: non-ASCII characters in Worklets");
      destination[byteIndex++] = ch.codePointAt(0);
      ++read;
      ++written;
    }
    return {
      read,
      written
    };
  }
  encode(input) {
    if (!input)
      return new Uint8Array();
    let b = new Uint8Array(new ArrayBuffer(input.length));
    for (let i = 0; i < input.length; ++i) {
      if (input[i].charCodeAt(0) < 128)
        b[i] = input[i].charCodeAt(0);
    }
    return b;
  }
};
//# sourceMappingURL=data:application/json;base64,
